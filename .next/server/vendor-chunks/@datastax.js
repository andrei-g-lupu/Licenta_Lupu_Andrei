"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@datastax";
exports.ids = ["vendor-chunks/@datastax"];
exports.modules = {

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/data-api-http-client.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/clients/data-api-http-client.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DataAPIHttpClient_props;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIHttpClient = exports.EmissionStrategy = void 0;\nexports.replacer = replacer;\nexports.reviver = reviver;\nconst api_1 = __webpack_require__(/*! ../../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst data_api_1 = __webpack_require__(/*! ../../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst timeout_managers_1 = __webpack_require__(/*! ../../api/timeout-managers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\");\nconst events_1 = __webpack_require__(/*! ../../data-api/events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\");\nconst errors_1 = __webpack_require__(/*! ../../data-api/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\nconst devops_1 = __webpack_require__(/*! ../../devops */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\");\nconst common_1 = __webpack_require__(/*! ../../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst embedding_providers_1 = __webpack_require__(/*! ../../data-api/embedding-providers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js\");\nexports.EmissionStrategy = {\n    Normal: (emitter)=>({\n            emitCommandStarted (info) {\n                emitter.emit(\"commandStarted\", new events_1.CommandStartedEvent(info));\n            },\n            emitCommandFailed (info, error, started) {\n                emitter.emit(\"commandFailed\", new events_1.CommandFailedEvent(info, error, started));\n            },\n            emitCommandSucceeded (info, resp, warnings, started) {\n                emitter.emit(\"commandSucceeded\", new events_1.CommandSucceededEvent(info, resp, warnings, started));\n            }\n        }),\n    Admin: (emitter)=>({\n            emitCommandStarted (info) {\n                emitter.emit(\"adminCommandStarted\", new devops_1.AdminCommandStartedEvent(adaptInfo4Devops(info), true, info.timeoutManager.msRemaining()));\n            },\n            emitCommandFailed (info, error, started) {\n                emitter.emit(\"adminCommandFailed\", new devops_1.AdminCommandFailedEvent(adaptInfo4Devops(info), true, error, started));\n            },\n            emitCommandSucceeded (info, resp, warnings, started) {\n                emitter.emit(\"adminCommandSucceeded\", new devops_1.AdminCommandSucceededEvent(adaptInfo4Devops(info), true, resp, warnings, started));\n            }\n        })\n};\nconst adaptInfo4Devops = (info)=>({\n        method: \"POST\",\n        data: info.command,\n        path: info.url,\n        params: {}\n    });\nclass DataAPIHttpClient extends api_1.HttpClient {\n    constructor(props){\n        super(props, [\n            mkAuthHeaderProvider(props.tokenProvider),\n            props.embeddingHeaders.getHeaders.bind(props.embeddingHeaders)\n        ]);\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTimeMS\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"emissionStrategy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _DataAPIHttpClient_props.set(this, void 0);\n        this.keyspace = props.keyspace;\n        __classPrivateFieldSet(this, _DataAPIHttpClient_props, props, \"f\");\n        this.maxTimeMS = this.fetchCtx.maxTimeMS ?? api_1.DEFAULT_TIMEOUT;\n        this.emissionStrategy = props.emissionStrategy(props.emitter);\n    }\n    forCollection(keyspace, collection, opts) {\n        const clone = new DataAPIHttpClient({\n            ...__classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\"),\n            embeddingHeaders: embedding_providers_1.EmbeddingHeadersProvider.parseHeaders(opts?.embeddingApiKey),\n            keyspace: {\n                ref: keyspace\n            }\n        });\n        clone.collection = collection;\n        clone.maxTimeMS = opts?.defaultMaxTimeMS ?? this.maxTimeMS;\n        return clone;\n    }\n    forDbAdmin(opts) {\n        const clone = new DataAPIHttpClient({\n            ...__classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\"),\n            tokenProvider: opts?.adminToken ? common_1.TokenProvider.parseToken(opts?.adminToken) : __classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\").tokenProvider,\n            monitorCommands: opts?.monitorCommands || __classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\").monitorCommands,\n            baseUrl: opts?.endpointUrl || __classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\").baseUrl,\n            baseApiPath: opts?.endpointUrl ? \"\" : __classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\").baseApiPath\n        });\n        clone.emissionStrategy = exports.EmissionStrategy.Admin(this.emitter);\n        clone.collection = undefined;\n        return clone;\n    }\n    timeoutManager(timeout) {\n        timeout ?? (timeout = this.maxTimeMS);\n        return new timeout_managers_1.TimeoutManager(timeout, ()=>new data_api_1.DataAPITimeoutError(timeout));\n    }\n    async executeCommand(command, options) {\n        const timeoutManager = options?.timeoutManager ?? this.timeoutManager(options?.maxTimeMS);\n        return await this._requestDataAPI({\n            url: this.baseUrl,\n            timeoutManager: timeoutManager,\n            collection: options?.collection,\n            keyspace: (0, common_1.resolveKeyspace)(options, true),\n            command: command\n        });\n    }\n    async _requestDataAPI(info) {\n        let started = 0;\n        try {\n            info.collection || (info.collection = this.collection);\n            if (info.keyspace !== null) {\n                info.keyspace || (info.keyspace = this.keyspace?.ref);\n                if ((0, common_1.isNullish)(info.keyspace)) {\n                    throw new Error(\"Db is missing a required keyspace; be sure to set one w/ client.db(..., { keyspace }), or db.useKeyspace()\");\n                }\n            }\n            const keyspacePath = info.keyspace ? `/${info.keyspace}` : \"\";\n            const collectionPath = info.collection ? `/${info.collection}` : \"\";\n            info.url += keyspacePath + collectionPath;\n            if (this.monitorCommands) {\n                started = (0, api_1.hrTimeMs)();\n                this.emissionStrategy.emitCommandStarted(info);\n            }\n            const resp = await this._request({\n                url: info.url,\n                data: JSON.stringify(info.command, replacer),\n                timeoutManager: info.timeoutManager,\n                method: api_1.HttpMethods.Post\n            });\n            if (resp.status >= 400 && resp.status !== 401) {\n                throw new errors_1.DataAPIHttpError(resp);\n            }\n            const data = resp.body ? JSON.parse(resp.body, reviver) : {};\n            const warnings = data?.status?.warnings ?? [];\n            delete data?.status?.warnings;\n            if (data.errors && data.errors.length > 0 && data.errors[0]?.errorCode === \"COLLECTION_NOT_EXIST\") {\n                const name = data.errors[0]?.message.split(\": \")[1];\n                throw new errors_1.CollectionNotFoundError(info.keyspace ?? \"<unknown>\", name);\n            }\n            if (data.errors && data.errors.length > 0) {\n                throw (0, errors_1.mkRespErrorFromResponse)(data_api_1.DataAPIResponseError, info.command, data, warnings);\n            }\n            const respData = {\n                data: data.data,\n                status: data.status,\n                errors: data.errors\n            };\n            if (this.monitorCommands) {\n                this.emissionStrategy.emitCommandSucceeded(info, respData, warnings, started);\n            }\n            return respData;\n        } catch (e) {\n            if (this.monitorCommands) {\n                this.emissionStrategy.emitCommandFailed(info, e, started);\n            }\n            throw e;\n        }\n    }\n}\nexports.DataAPIHttpClient = DataAPIHttpClient;\n_DataAPIHttpClient_props = new WeakMap();\nfunction replacer(key, value) {\n    if (typeof value === \"bigint\") {\n        return Number(value);\n    }\n    if (typeof this[key] === \"object\") {\n        if (key === \"$date\") {\n            return new Date(value).valueOf();\n        }\n        if (this[key] instanceof Date) {\n            return {\n                $date: this[key].valueOf()\n            };\n        }\n    }\n    return value;\n}\nfunction reviver(_, value) {\n    if (!value) {\n        return value;\n    }\n    if (value.$date) {\n        return new Date(value.$date);\n    }\n    if (value.$objectId) {\n        return new data_api_1.ObjectId(value.$objectId);\n    }\n    if (value.$uuid) {\n        return new data_api_1.UUID(value.$uuid);\n    }\n    return value;\n}\nconst mkAuthHeaderProvider = (tp)=>()=>{\n        const token = tp.getToken();\n        return token instanceof Promise ? token.then(mkAuthHeader) : mkAuthHeader(token);\n    };\nconst mkAuthHeader = (token)=>token ? {\n        [api_1.DEFAULT_DATA_API_AUTH_HEADER]: token\n    } : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/data-api-http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/devops-api-http-client.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/clients/devops-api-http-client.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DevOpsAPIHttpClient = void 0;\nconst http_client_1 = __webpack_require__(/*! ../../api/clients/http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/http-client.js\");\nconst errors_1 = __webpack_require__(/*! ../../devops/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\");\nconst timeout_managers_1 = __webpack_require__(/*! ../../api/timeout-managers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\");\nconst constants_1 = __webpack_require__(/*! ../../api/constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\");\nconst devops_1 = __webpack_require__(/*! ../../devops */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\");\nconst common_1 = __webpack_require__(/*! ../../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nclass DevOpsAPIHttpClient extends http_client_1.HttpClient {\n    constructor(opts){\n        super(opts, [\n            mkAuthHeaderProvider(opts.tokenProvider)\n        ]);\n    }\n    async request(req, options, started = 0) {\n        const isLongRunning = started !== 0;\n        try {\n            const timeoutManager = options?.timeoutManager ?? this._timeoutManager(options?.maxTimeMS);\n            const url = this.baseUrl + req.path;\n            if (this.monitorCommands && !isLongRunning) {\n                this.emitter.emit(\"adminCommandStarted\", new devops_1.AdminCommandStartedEvent(req, isLongRunning, timeoutManager.ms));\n            }\n            started || (started = (0, http_client_1.hrTimeMs)());\n            const resp = await this._request({\n                url: url,\n                method: req.method,\n                params: req.params,\n                data: JSON.stringify(req.data),\n                forceHttp1: true,\n                timeoutManager\n            });\n            const data = resp.body ? (0, common_1.jsonTryParse)(resp.body, undefined) : undefined;\n            if (resp.status >= 400) {\n                throw new errors_1.DevOpsAPIResponseError(resp, data);\n            }\n            if (this.monitorCommands && !isLongRunning) {\n                this.emitter.emit(\"adminCommandSucceeded\", new devops_1.AdminCommandSucceededEvent(req, false, data, [], started));\n            }\n            return {\n                data: data,\n                status: resp.status,\n                headers: resp.headers\n            };\n        } catch (e) {\n            if (!(e instanceof Error)) {\n                throw e;\n            }\n            if (this.monitorCommands) {\n                this.emitter.emit(\"adminCommandFailed\", new devops_1.AdminCommandFailedEvent(req, isLongRunning, e, started));\n            }\n            throw e;\n        }\n    }\n    async requestLongRunning(req, info) {\n        const timeoutManager = this._timeoutManager(info.options?.maxTimeMS);\n        const isLongRunning = info.options?.blocking !== false;\n        if (this.monitorCommands) {\n            this.emitter.emit(\"adminCommandStarted\", new devops_1.AdminCommandStartedEvent(req, isLongRunning, timeoutManager.ms));\n        }\n        const started = (0, http_client_1.hrTimeMs)();\n        const resp = await this.request(req, {\n            timeoutManager\n        }, started);\n        const id = typeof info.id === \"function\" ? info.id(resp) : info.id;\n        await this._awaitStatus(id, req, info, timeoutManager, started);\n        if (this.monitorCommands && isLongRunning) {\n            this.emitter.emit(\"adminCommandSucceeded\", new devops_1.AdminCommandSucceededEvent(req, true, resp, [], started));\n        }\n        return resp;\n    }\n    _timeoutManager(timeout) {\n        timeout ?? (timeout = this.fetchCtx.maxTimeMS ?? 12 * 60 * 1000);\n        return new timeout_managers_1.TimeoutManager(timeout, (info)=>new errors_1.DevOpsAPITimeoutError(info.url, timeout));\n    }\n    async _awaitStatus(id, req, info, timeoutManager, started) {\n        if (info.options?.blocking === false) {\n            return;\n        }\n        const pollInterval = info.options?.pollInterval || info.defaultPollInterval;\n        let waiting = false;\n        for(;;){\n            if (waiting) {\n                continue;\n            }\n            waiting = true;\n            if (this.monitorCommands) {\n                this.emitter.emit(\"adminCommandPolling\", new devops_1.AdminCommandPollingEvent(req, started, pollInterval));\n            }\n            const resp = await this.request({\n                method: constants_1.HttpMethods.Get,\n                path: `/databases/${id}`\n            }, {\n                timeoutManager: timeoutManager\n            }, started);\n            if (resp.data?.status === info.target) {\n                break;\n            }\n            if (!info.legalStates.includes(resp.data?.status)) {\n                const okStates = [\n                    info.target,\n                    ...info.legalStates\n                ];\n                const error = new errors_1.DevOpsUnexpectedStateError(`Created database is not in any legal state [${okStates.join(\",\")}]`, okStates, resp.data);\n                if (this.monitorCommands) {\n                    this.emitter.emit(\"adminCommandFailed\", new devops_1.AdminCommandFailedEvent(req, true, error, started));\n                }\n                throw error;\n            }\n            await new Promise((resolve)=>{\n                setTimeout(()=>{\n                    waiting = false;\n                    resolve();\n                }, pollInterval);\n            });\n        }\n    }\n}\nexports.DevOpsAPIHttpClient = DevOpsAPIHttpClient;\nconst mkAuthHeaderProvider = (tp)=>()=>{\n        const token = tp.getToken();\n        return token instanceof Promise ? token.then(mkAuthHeader) : mkAuthHeader(token);\n    };\nconst mkAuthHeader = (token)=>token ? {\n        [constants_1.DEFAULT_DEVOPS_API_AUTH_HEADER]: `Bearer ${token}`\n    } : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/devops-api-http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/http-client.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/clients/http-client.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HttpClient = void 0;\nexports.hrTimeMs = hrTimeMs;\nexports.buildUserAgent = buildUserAgent;\nconst constants_1 = __webpack_require__(/*! ../../api/constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\");\nclass HttpClient {\n    constructor(options, headerProviders){\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"emitter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"monitorCommands\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetchCtx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"baseHeaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headerProviders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.baseUrl = options.baseUrl;\n        this.emitter = options.emitter;\n        this.monitorCommands = options.monitorCommands;\n        this.fetchCtx = options.fetchCtx;\n        if (options.baseApiPath) {\n            this.baseUrl += \"/\" + options.baseApiPath;\n        }\n        this.baseHeaders = {};\n        this.baseHeaders[\"User-Agent\"] = options.userAgent;\n        this.baseHeaders[\"Content-Type\"] = \"application/json\";\n        this.headerProviders = headerProviders;\n    }\n    async _request(info) {\n        if (this.fetchCtx.closed.ref) {\n            throw new Error(\"Can't make requests on a closed client\");\n        }\n        const msRemaining = info.timeoutManager.msRemaining();\n        if (msRemaining <= 0) {\n            throw info.timeoutManager.mkTimeoutError(info);\n        }\n        const params = info.params ?? {};\n        const url = Object.keys(params).length > 0 ? `${info.url}?${new URLSearchParams(params).toString()}` : info.url;\n        const reqHeaders = {\n            ...this.baseHeaders\n        };\n        for (const provider of this.headerProviders){\n            const maybePromise = provider();\n            const newHeaders = \"then\" in maybePromise ? await maybePromise : maybePromise;\n            Object.assign(reqHeaders, newHeaders);\n        }\n        return await this.fetchCtx.ctx.fetch({\n            url: url,\n            body: info.data,\n            method: info.method,\n            headers: reqHeaders,\n            forceHttp1: info.forceHttp1,\n            timeout: msRemaining,\n            mkTimeoutError: ()=>info.timeoutManager.mkTimeoutError(info)\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nfunction hrTimeMs() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nfunction buildUserAgent(caller) {\n    const callers = !caller ? [] : Array.isArray(caller[0]) ? caller : [\n        caller\n    ];\n    const callerString = callers.map((c)=>{\n        return c[1] ? `${c[0]}/${c[1]}` : c[0];\n    }).join(\" \");\n    return `${constants_1.RAGSTACK_REQUESTED_WITH} ${callerString} ${constants_1.CLIENT_USER_AGENT}`.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEFAULT_DATA_API_PATHS = exports.DEFAULT_DEVOPS_API_ENDPOINTS = exports.DEFAULT_DEVOPS_API_AUTH_HEADER = exports.DEFAULT_DATA_API_AUTH_HEADER = exports.DEFAULT_TIMEOUT = exports.DEFAULT_KEYSPACE = exports.HttpMethods = exports.CLIENT_USER_AGENT = exports.RAGSTACK_REQUESTED_WITH = void 0;\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js\");\nexports.RAGSTACK_REQUESTED_WITH = (()=>{\n    try {\n        // Do not use require() here, it will break the build in some environments such as NextJS application\n        // if @datastax/ragstack-ai is not installed (which is perfectly fine).\n        const ragstack = eval(`require('@datastax/ragstack-ai')`);\n        const version = ragstack[\"RAGSTACK_VERSION\"] || \"?\";\n        return `ragstack-ai-ts/${version}`;\n    } catch (_) {\n        return \"\";\n    }\n})();\n/**\n * @internal\n */ exports.CLIENT_USER_AGENT = version_1.LIB_NAME + \"/\" + version_1.LIB_VERSION;\n/**\n * @internal\n */ exports.HttpMethods = {\n    Get: \"GET\",\n    Post: \"POST\",\n    Delete: \"DELETE\"\n};\nexports.DEFAULT_KEYSPACE = \"default_keyspace\";\nexports.DEFAULT_TIMEOUT = 30000;\nexports.DEFAULT_DATA_API_AUTH_HEADER = \"Token\";\nexports.DEFAULT_DEVOPS_API_AUTH_HEADER = \"Authorization\";\nexports.DEFAULT_DEVOPS_API_ENDPOINTS = {\n    prod: \"https://api.astra.datastax.com/v2\",\n    test: \"https://api.test.cloud.datastax.com/v2\",\n    dev: \"https://api.dev.cloud.datastax.com/v2\"\n};\nexports.DEFAULT_DATA_API_PATHS = {\n    astra: \"api/json/v1\",\n    dse: \"v1\",\n    hcd: \"v1\",\n    cassandra: \"v1\",\n    other: \"v1\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw4QkFBOEIsR0FBR0Esb0NBQW9DLEdBQUdBLHNDQUFzQyxHQUFHQSxvQ0FBb0MsR0FBR0EsdUJBQXVCLEdBQUdBLHdCQUF3QixHQUFHQSxtQkFBbUIsR0FBR0EseUJBQXlCLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDdFMsTUFBTVcsWUFBWUMsbUJBQU9BLENBQUMsOEVBQVk7QUFDdENaLCtCQUErQixHQUFHLENBQUM7SUFDL0IsSUFBSTtRQUNBLHFHQUFxRztRQUNyRyx1RUFBdUU7UUFDdkUsTUFBTWEsV0FBV0MsS0FBSyxDQUFDLGdDQUFnQyxDQUFDO1FBQ3hELE1BQU1DLFVBQVVGLFFBQVEsQ0FBQyxtQkFBbUIsSUFBSTtRQUNoRCxPQUFPLENBQUMsZUFBZSxFQUFFRSxRQUFRLENBQUM7SUFDdEMsRUFDQSxPQUFPQyxHQUFHO1FBQ04sT0FBTztJQUNYO0FBQ0o7QUFDQTs7Q0FFQyxHQUNEaEIseUJBQXlCLEdBQUdXLFVBQVVNLFFBQVEsR0FBRyxNQUFNTixVQUFVTyxXQUFXO0FBQzVFOztDQUVDLEdBQ0RsQixtQkFBbUIsR0FBRztJQUNsQm1CLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxRQUFRO0FBQ1o7QUFDQXJCLHdCQUF3QixHQUFHO0FBQzNCQSx1QkFBdUIsR0FBRztBQUMxQkEsb0NBQW9DLEdBQUc7QUFDdkNBLHNDQUFzQyxHQUFHO0FBQ3pDQSxvQ0FBb0MsR0FBRztJQUNuQ3NCLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxLQUFLO0FBQ1Q7QUFDQXhCLDhCQUE4QixHQUFHO0lBQzdCeUIsT0FBTztJQUNQQyxLQUFLO0lBQ0xDLEtBQUs7SUFDTEMsV0FBVztJQUNYQyxPQUFPO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9hcGkvY29uc3RhbnRzLmpzP2ZkZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9QQVRIUyA9IGV4cG9ydHMuREVGQVVMVF9ERVZPUFNfQVBJX0VORFBPSU5UUyA9IGV4cG9ydHMuREVGQVVMVF9ERVZPUFNfQVBJX0FVVEhfSEVBREVSID0gZXhwb3J0cy5ERUZBVUxUX0RBVEFfQVBJX0FVVEhfSEVBREVSID0gZXhwb3J0cy5ERUZBVUxUX1RJTUVPVVQgPSBleHBvcnRzLkRFRkFVTFRfS0VZU1BBQ0UgPSBleHBvcnRzLkh0dHBNZXRob2RzID0gZXhwb3J0cy5DTElFTlRfVVNFUl9BR0VOVCA9IGV4cG9ydHMuUkFHU1RBQ0tfUkVRVUVTVEVEX1dJVEggPSB2b2lkIDA7XG5jb25zdCB2ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi4vdmVyc2lvblwiKTtcbmV4cG9ydHMuUkFHU1RBQ0tfUkVRVUVTVEVEX1dJVEggPSAoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIERvIG5vdCB1c2UgcmVxdWlyZSgpIGhlcmUsIGl0IHdpbGwgYnJlYWsgdGhlIGJ1aWxkIGluIHNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgTmV4dEpTIGFwcGxpY2F0aW9uXG4gICAgICAgIC8vIGlmIEBkYXRhc3RheC9yYWdzdGFjay1haSBpcyBub3QgaW5zdGFsbGVkICh3aGljaCBpcyBwZXJmZWN0bHkgZmluZSkuXG4gICAgICAgIGNvbnN0IHJhZ3N0YWNrID0gZXZhbChgcmVxdWlyZSgnQGRhdGFzdGF4L3JhZ3N0YWNrLWFpJylgKTtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHJhZ3N0YWNrWydSQUdTVEFDS19WRVJTSU9OJ10gfHwgJz8nO1xuICAgICAgICByZXR1cm4gYHJhZ3N0YWNrLWFpLXRzLyR7dmVyc2lvbn1gO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufSkoKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuQ0xJRU5UX1VTRVJfQUdFTlQgPSB2ZXJzaW9uXzEuTElCX05BTUUgKyAnLycgKyB2ZXJzaW9uXzEuTElCX1ZFUlNJT047XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLkh0dHBNZXRob2RzID0ge1xuICAgIEdldDogJ0dFVCcsXG4gICAgUG9zdDogJ1BPU1QnLFxuICAgIERlbGV0ZTogJ0RFTEVURScsXG59O1xuZXhwb3J0cy5ERUZBVUxUX0tFWVNQQUNFID0gJ2RlZmF1bHRfa2V5c3BhY2UnO1xuZXhwb3J0cy5ERUZBVUxUX1RJTUVPVVQgPSAzMDAwMDtcbmV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9BVVRIX0hFQURFUiA9ICdUb2tlbic7XG5leHBvcnRzLkRFRkFVTFRfREVWT1BTX0FQSV9BVVRIX0hFQURFUiA9ICdBdXRob3JpemF0aW9uJztcbmV4cG9ydHMuREVGQVVMVF9ERVZPUFNfQVBJX0VORFBPSU5UUyA9IHtcbiAgICBwcm9kOiAnaHR0cHM6Ly9hcGkuYXN0cmEuZGF0YXN0YXguY29tL3YyJyxcbiAgICB0ZXN0OiAnaHR0cHM6Ly9hcGkudGVzdC5jbG91ZC5kYXRhc3RheC5jb20vdjInLFxuICAgIGRldjogJ2h0dHBzOi8vYXBpLmRldi5jbG91ZC5kYXRhc3RheC5jb20vdjInLFxufTtcbmV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9QQVRIUyA9IHtcbiAgICBhc3RyYTogJ2FwaS9qc29uL3YxJyxcbiAgICBkc2U6ICd2MScsXG4gICAgaGNkOiAndjEnLFxuICAgIGNhc3NhbmRyYTogJ3YxJyxcbiAgICBvdGhlcjogJ3YxJyxcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJERUZBVUxUX0RBVEFfQVBJX1BBVEhTIiwiREVGQVVMVF9ERVZPUFNfQVBJX0VORFBPSU5UUyIsIkRFRkFVTFRfREVWT1BTX0FQSV9BVVRIX0hFQURFUiIsIkRFRkFVTFRfREFUQV9BUElfQVVUSF9IRUFERVIiLCJERUZBVUxUX1RJTUVPVVQiLCJERUZBVUxUX0tFWVNQQUNFIiwiSHR0cE1ldGhvZHMiLCJDTElFTlRfVVNFUl9BR0VOVCIsIlJBR1NUQUNLX1JFUVVFU1RFRF9XSVRIIiwidmVyc2lvbl8xIiwicmVxdWlyZSIsInJhZ3N0YWNrIiwiZXZhbCIsInZlcnNpb24iLCJfIiwiTElCX05BTUUiLCJMSUJfVkVSU0lPTiIsIkdldCIsIlBvc3QiLCJEZWxldGUiLCJwcm9kIiwidGVzdCIsImRldiIsImFzdHJhIiwiZHNlIiwiaGNkIiwiY2Fzc2FuZHJhIiwib3RoZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-h2.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-h2.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchH2 = void 0;\nconst errors_1 = __webpack_require__(/*! ../../client/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/errors.js\");\nclass FetchH2 {\n    constructor(options, preferHttp2){\n        Object.defineProperty(this, \"_http1\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_preferred\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_timeoutErrorCls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        try {\n            const [indirectRequire] = [\n                __webpack_require__(\"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch sync recursive\")\n            ].map((x)=>isNaN(Math.random()) ? null : x);\n            const fetchH2 = validateFetchH2(options?.fetchH2) ?? indirectRequire(\"fetch-h2\");\n            this._http1 = fetchH2.context({\n                http1: {\n                    keepAlive: options?.http1?.keepAlive,\n                    keepAliveMsecs: options?.http1?.keepAliveMS,\n                    maxSockets: options?.http1?.maxSockets,\n                    maxFreeSockets: options?.http1?.maxFreeSockets\n                },\n                httpsProtocols: [\n                    \"http1\"\n                ]\n            });\n            this._preferred = preferHttp2 ? fetchH2.context() : this._http1;\n            this._timeoutErrorCls = fetchH2.TimeoutError;\n        } catch (e) {\n            throw new errors_1.FailedToLoadDefaultClientError(e);\n        }\n    }\n    async fetch(info) {\n        const init = info;\n        try {\n            const resp = info.forceHttp1 ? await this._http1.fetch(info.url, init) : await this._preferred.fetch(info.url, init);\n            return {\n                headers: Object.fromEntries(resp.headers.entries()),\n                body: await resp.text(),\n                status: resp.status,\n                url: resp.url,\n                httpVersion: resp.httpVersion,\n                statusText: resp.statusText\n            };\n        } catch (e) {\n            if (e instanceof this._timeoutErrorCls) {\n                throw info.mkTimeoutError();\n            }\n            throw e;\n        }\n    }\n    async close() {\n        await this._preferred.disconnectAll();\n        await this._http1.disconnectAll();\n    }\n}\nexports.FetchH2 = FetchH2;\nfunction validateFetchH2(fetchH2) {\n    if (fetchH2 === null || fetchH2 === undefined) {\n        return fetchH2;\n    }\n    if (typeof fetchH2 !== \"object\") {\n        throw new TypeError(\"fetchH2 must be an object—did you pass in the module correctly?\");\n    }\n    for (const prop of [\n        \"context\",\n        \"TimeoutError\"\n    ]){\n        if (!(prop in fetchH2)) {\n            throw new TypeError(`fetchH2 missing the required '${prop}' property`);\n        }\n    }\n    return fetchH2;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2ZldGNoL2ZldGNoLWgyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFDeENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2QixNQUFNRyxXQUFXQyxtQkFBT0EsQ0FBQyw2RkFBcUI7QUFDOUMsTUFBTUY7SUFDRkcsWUFBWUMsT0FBTyxFQUFFQyxXQUFXLENBQUU7UUFDOUJULE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ1MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlQsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FILE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q1MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlQsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FILE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CO1lBQzVDUyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWVCxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJO1lBQ1ksTUFBTSxDQUFDVSxnQkFBZ0IsR0FBRztnQkFBQ1AsK0ZBQU9BO2FBQUMsQ0FBQ1EsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQyxNQUFNQyxLQUFLQyxNQUFNLE1BQU0sT0FBT0g7WUFDdkYsTUFBTUksVUFBVUMsZ0JBQWdCWixTQUFTVyxZQUFZTixnQkFBZ0I7WUFDckUsSUFBSSxDQUFDUSxNQUFNLEdBQUdGLFFBQVFHLE9BQU8sQ0FBQztnQkFDMUJDLE9BQU87b0JBQ0hDLFdBQVdoQixTQUFTZSxPQUFPQztvQkFDM0JDLGdCQUFnQmpCLFNBQVNlLE9BQU9HO29CQUNoQ0MsWUFBWW5CLFNBQVNlLE9BQU9JO29CQUM1QkMsZ0JBQWdCcEIsU0FBU2UsT0FBT0s7Z0JBQ3BDO2dCQUNBQyxnQkFBZ0I7b0JBQUM7aUJBQVE7WUFDN0I7WUFDQSxJQUFJLENBQUNDLFVBQVUsR0FBRyxjQUNaWCxRQUFRRyxPQUFPLEtBQ2YsSUFBSSxDQUFDRCxNQUFNO1lBQ2pCLElBQUksQ0FBQ1UsZ0JBQWdCLEdBQUdaLFFBQVFhLFlBQVk7UUFDaEQsRUFDQSxPQUFPQyxHQUFHO1lBQ04sTUFBTSxJQUFJNUIsU0FBUzZCLDhCQUE4QixDQUFDRDtRQUN0RDtJQUNKO0lBQ0ksTUFBTUUsTUFBTUMsSUFBSSxFQUFFO1FBQ2xCLE1BQU1DLE9BQU9EO1FBQ2IsSUFBSTtZQUNBLE1BQU1FLE9BQU8sS0FBTUMsVUFBVSxHQUN2QixNQUFNLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDQyxLQUFLSSxHQUFHLEVBQUVILFFBQ2xDLE1BQU0sSUFBSSxDQUFDUCxVQUFVLENBQUNLLEtBQUssQ0FBQ0MsS0FBS0ksR0FBRyxFQUFFSDtZQUM1QyxPQUFPO2dCQUNISSxTQUFTekMsT0FBTzBDLFdBQVcsQ0FBQ0osS0FBS0csT0FBTyxDQUFDRSxPQUFPO2dCQUNoREMsTUFBTSxNQUFNTixLQUFLTyxJQUFJO2dCQUNyQkMsUUFBUVIsS0FBS1EsTUFBTTtnQkFDbkJOLEtBQUtGLEtBQUtFLEdBQUc7Z0JBQ2JPLGFBQWFULEtBQUtTLFdBQVc7Z0JBQzdCQyxZQUFZVixLQUFLVSxVQUFVO1lBQy9CO1FBQ0osRUFDQSxPQUFPZixHQUFHO1lBQ04sSUFBSUEsYUFBYSxJQUFJLENBQUNGLGdCQUFnQixFQUFFO2dCQUNwQyxNQUFNSyxLQUFLYSxjQUFjO1lBQzdCO1lBQ0EsTUFBTWhCO1FBQ1Y7SUFDSjtJQUNJLE1BQU1pQixRQUFRO1FBQ2QsTUFBTSxJQUFJLENBQUNwQixVQUFVLENBQUNxQixhQUFhO1FBQ25DLE1BQU0sSUFBSSxDQUFDOUIsTUFBTSxDQUFDOEIsYUFBYTtJQUNuQztBQUNKO0FBQ0FqRCxlQUFlLEdBQUdFO0FBQ2xCLFNBQVNnQixnQkFBZ0JELE9BQU87SUFDNUIsSUFBSUEsWUFBWSxRQUFRQSxZQUFZaUMsV0FBVztRQUMzQyxPQUFPakM7SUFDWDtJQUNBLElBQUksT0FBT0EsWUFBWSxVQUFVO1FBQzdCLE1BQU0sSUFBSWtDLFVBQVU7SUFDeEI7SUFDQSxLQUFLLE1BQU1DLFFBQVE7UUFBQztRQUFXO0tBQWUsQ0FBRTtRQUM1QyxJQUFJLENBQUVBLENBQUFBLFFBQVFuQyxPQUFNLEdBQUk7WUFDcEIsTUFBTSxJQUFJa0MsVUFBVSxDQUFDLDhCQUE4QixFQUFFQyxLQUFLLFVBQVUsQ0FBQztRQUN6RTtJQUNKO0lBQ0EsT0FBT25DO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9hcGkvZmV0Y2gvZmV0Y2gtaDIuanM/NGZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gbm9pbnNwZWN0aW9uIEV4Y2VwdGlvbkNhdWdodExvY2FsbHlKU1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GZXRjaEgyID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vLi4vY2xpZW50L2Vycm9yc1wiKTtcbmNsYXNzIEZldGNoSDIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHByZWZlckh0dHAyKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9odHRwMVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcHJlZmVycmVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl90aW1lb3V0RXJyb3JDbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtpbmRpcmVjdFJlcXVpcmVdID0gW3JlcXVpcmVdLm1hcCh4ID0+IGlzTmFOKE1hdGgucmFuZG9tKCkpID8gbnVsbCA6IHgpO1xuICAgICAgICAgICAgY29uc3QgZmV0Y2hIMiA9IHZhbGlkYXRlRmV0Y2hIMihvcHRpb25zPy5mZXRjaEgyKSA/PyBpbmRpcmVjdFJlcXVpcmUoJ2ZldGNoLWgyJyk7XG4gICAgICAgICAgICB0aGlzLl9odHRwMSA9IGZldGNoSDIuY29udGV4dCh7XG4gICAgICAgICAgICAgICAgaHR0cDE6IHtcbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlOiBvcHRpb25zPy5odHRwMT8ua2VlcEFsaXZlLFxuICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVNc2Vjczogb3B0aW9ucz8uaHR0cDE/LmtlZXBBbGl2ZU1TLFxuICAgICAgICAgICAgICAgICAgICBtYXhTb2NrZXRzOiBvcHRpb25zPy5odHRwMT8ubWF4U29ja2V0cyxcbiAgICAgICAgICAgICAgICAgICAgbWF4RnJlZVNvY2tldHM6IG9wdGlvbnM/Lmh0dHAxPy5tYXhGcmVlU29ja2V0cyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGh0dHBzUHJvdG9jb2xzOiBbJ2h0dHAxJ10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3ByZWZlcnJlZCA9IChwcmVmZXJIdHRwMilcbiAgICAgICAgICAgICAgICA/IGZldGNoSDIuY29udGV4dCgpXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9odHRwMTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRFcnJvckNscyA9IGZldGNoSDIuVGltZW91dEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuRmFpbGVkVG9Mb2FkRGVmYXVsdENsaWVudEVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgICBhc3luYyBmZXRjaChpbmZvKSB7XG4gICAgICAgIGNvbnN0IGluaXQgPSBpbmZvO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcCA9IChpbmZvLmZvcmNlSHR0cDEpXG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLl9odHRwMS5mZXRjaChpbmZvLnVybCwgaW5pdClcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMuX3ByZWZlcnJlZC5mZXRjaChpbmZvLnVybCwgaW5pdCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5mcm9tRW50cmllcyhyZXNwLmhlYWRlcnMuZW50cmllcygpKSxcbiAgICAgICAgICAgICAgICBib2R5OiBhd2FpdCByZXNwLnRleHQoKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICAgIHVybDogcmVzcC51cmwsXG4gICAgICAgICAgICAgICAgaHR0cFZlcnNpb246IHJlc3AuaHR0cFZlcnNpb24sXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcC5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiB0aGlzLl90aW1lb3V0RXJyb3JDbHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBpbmZvLm1rVGltZW91dEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgICBhc3luYyBjbG9zZSgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcHJlZmVycmVkLmRpc2Nvbm5lY3RBbGwoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5faHR0cDEuZGlzY29ubmVjdEFsbCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmV0Y2hIMiA9IEZldGNoSDI7XG5mdW5jdGlvbiB2YWxpZGF0ZUZldGNoSDIoZmV0Y2hIMikge1xuICAgIGlmIChmZXRjaEgyID09PSBudWxsIHx8IGZldGNoSDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmV0Y2hIMjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmZXRjaEgyICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmZXRjaEgyIG11c3QgYmUgYW4gb2JqZWN04oCUZGlkIHlvdSBwYXNzIGluIHRoZSBtb2R1bGUgY29ycmVjdGx5PycpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgWydjb250ZXh0JywgJ1RpbWVvdXRFcnJvciddKSB7XG4gICAgICAgIGlmICghKHByb3AgaW4gZmV0Y2hIMikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGZldGNoSDIgbWlzc2luZyB0aGUgcmVxdWlyZWQgJyR7cHJvcH0nIHByb3BlcnR5YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZldGNoSDI7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGZXRjaEgyIiwiZXJyb3JzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicHJlZmVySHR0cDIiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpbmRpcmVjdFJlcXVpcmUiLCJtYXAiLCJ4IiwiaXNOYU4iLCJNYXRoIiwicmFuZG9tIiwiZmV0Y2hIMiIsInZhbGlkYXRlRmV0Y2hIMiIsIl9odHRwMSIsImNvbnRleHQiLCJodHRwMSIsImtlZXBBbGl2ZSIsImtlZXBBbGl2ZU1zZWNzIiwia2VlcEFsaXZlTVMiLCJtYXhTb2NrZXRzIiwibWF4RnJlZVNvY2tldHMiLCJodHRwc1Byb3RvY29scyIsIl9wcmVmZXJyZWQiLCJfdGltZW91dEVycm9yQ2xzIiwiVGltZW91dEVycm9yIiwiZSIsIkZhaWxlZFRvTG9hZERlZmF1bHRDbGllbnRFcnJvciIsImZldGNoIiwiaW5mbyIsImluaXQiLCJyZXNwIiwiZm9yY2VIdHRwMSIsInVybCIsImhlYWRlcnMiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJib2R5IiwidGV4dCIsInN0YXR1cyIsImh0dHBWZXJzaW9uIiwic3RhdHVzVGV4dCIsIm1rVGltZW91dEVycm9yIiwiY2xvc2UiLCJkaXNjb25uZWN0QWxsIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwicHJvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-h2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-native.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-native.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchNative = void 0;\nclass FetchNative {\n    async fetch(info) {\n        try {\n            const init = info;\n            init.keepalive = true;\n            init.signal = AbortSignal.timeout(info.timeout);\n            const resp = await fetch(info.url, init);\n            const headers = {};\n            resp.headers.forEach((value, key)=>{\n                headers[key] = value;\n            });\n            return {\n                url: resp.url,\n                statusText: resp.statusText,\n                httpVersion: 1,\n                headers: headers,\n                body: await resp.text(),\n                status: resp.status\n            };\n        } catch (e) {\n            if (e.name === \"TimeoutError\") {\n                throw info.mkTimeoutError();\n            }\n            if (e instanceof TypeError && e.message === \"fetch failed\" && \"cause\" in e) {\n                throw e.cause;\n            }\n            throw e;\n        }\n    }\n    async close() {}\n}\nexports.FetchNative = FetchNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2ZldGNoL2ZldGNoLW5hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMsd0NBQXdDO0FBQ3hDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRTtJQUNFLE1BQU1DLE1BQU1DLElBQUksRUFBRTtRQUNsQixJQUFJO1lBQ0EsTUFBTUMsT0FBT0Q7WUFDYkMsS0FBS0MsU0FBUyxHQUFHO1lBQ2pCRCxLQUFLRSxNQUFNLEdBQUdDLFlBQVlDLE9BQU8sQ0FBQ0wsS0FBS0ssT0FBTztZQUM5QyxNQUFNQyxPQUFPLE1BQU1QLE1BQU1DLEtBQUtPLEdBQUcsRUFBRU47WUFDbkMsTUFBTU8sVUFBVSxDQUFDO1lBQ2pCRixLQUFLRSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDWixPQUFPYTtnQkFDekJGLE9BQU8sQ0FBQ0UsSUFBSSxHQUFHYjtZQUNuQjtZQUNBLE9BQU87Z0JBQ0hVLEtBQUtELEtBQUtDLEdBQUc7Z0JBQ2JJLFlBQVlMLEtBQUtLLFVBQVU7Z0JBQzNCQyxhQUFhO2dCQUNiSixTQUFTQTtnQkFDVEssTUFBTSxNQUFNUCxLQUFLUSxJQUFJO2dCQUNyQkMsUUFBUVQsS0FBS1MsTUFBTTtZQUN2QjtRQUNKLEVBQ0EsT0FBT0MsR0FBRztZQUNOLElBQUlBLEVBQUVDLElBQUksS0FBSyxnQkFBZ0I7Z0JBQzNCLE1BQU1qQixLQUFLa0IsY0FBYztZQUM3QjtZQUNBLElBQUlGLGFBQWFHLGFBQWFILEVBQUVJLE9BQU8sS0FBSyxrQkFBa0IsV0FBV0osR0FBRztnQkFDeEUsTUFBTUEsRUFBRUssS0FBSztZQUNqQjtZQUNBLE1BQU1MO1FBQ1Y7SUFDSjtJQUNJLE1BQU1NLFFBQVEsQ0FBRTtBQUN4QjtBQUNBMUIsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2ZldGNoL2ZldGNoLW5hdGl2ZS5qcz9lNDk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBub2luc3BlY3Rpb24gRXhjZXB0aW9uQ2F1Z2h0TG9jYWxseUpTXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZldGNoTmF0aXZlID0gdm9pZCAwO1xuY2xhc3MgRmV0Y2hOYXRpdmUge1xuICAgICAgICBhc3luYyBmZXRjaChpbmZvKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbml0ID0gaW5mbztcbiAgICAgICAgICAgIGluaXQua2VlcGFsaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGluaXQuc2lnbmFsID0gQWJvcnRTaWduYWwudGltZW91dChpbmZvLnRpbWVvdXQpO1xuICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKGluZm8udXJsLCBpbml0KTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIHJlc3AuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiByZXNwLnVybCxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgaHR0cFZlcnNpb246IDEsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBhd2FpdCByZXNwLnRleHQoKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1RpbWVvdXRFcnJvcicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBpbmZvLm1rVGltZW91dEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFR5cGVFcnJvciAmJiBlLm1lc3NhZ2UgPT09ICdmZXRjaCBmYWlsZWQnICYmICdjYXVzZScgaW4gZSkge1xuICAgICAgICAgICAgICAgIHRocm93IGUuY2F1c2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgICBhc3luYyBjbG9zZSgpIHsgfVxufVxuZXhwb3J0cy5GZXRjaE5hdGl2ZSA9IEZldGNoTmF0aXZlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmV0Y2hOYXRpdmUiLCJmZXRjaCIsImluZm8iLCJpbml0Iiwia2VlcGFsaXZlIiwic2lnbmFsIiwiQWJvcnRTaWduYWwiLCJ0aW1lb3V0IiwicmVzcCIsInVybCIsImhlYWRlcnMiLCJmb3JFYWNoIiwia2V5Iiwic3RhdHVzVGV4dCIsImh0dHBWZXJzaW9uIiwiYm9keSIsInRleHQiLCJzdGF0dXMiLCJlIiwibmFtZSIsIm1rVGltZW91dEVycm9yIiwiVHlwZUVycm9yIiwibWVzc2FnZSIsImNhdXNlIiwiY2xvc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./clients/http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./clients/data-api-http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/data-api-http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./clients/devops-api-http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/clients/devops-api-http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./fetch/fetch-h2 */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-h2.js\"), exports);\n__exportStar(__webpack_require__(/*! ./fetch/fetch-native */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-native.js\"), exports);\n__exportStar(__webpack_require__(/*! ./timeout-managers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0QyxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHlHQUF1QixHQUFHTjtBQUMvQ0QsYUFBYU8sbUJBQU9BLENBQUMsMkhBQWdDLEdBQUdOO0FBQ3hERCxhQUFhTyxtQkFBT0EsQ0FBQywrSEFBa0MsR0FBR047QUFDMURELGFBQWFPLG1CQUFPQSxDQUFDLCtGQUFrQixHQUFHTjtBQUMxQ0QsYUFBYU8sbUJBQU9BLENBQUMsdUdBQXNCLEdBQUdOO0FBQzlDRCxhQUFhTyxtQkFBT0EsQ0FBQyxtR0FBb0IsR0FBR047QUFDNUNELGFBQWFPLG1CQUFPQSxDQUFDLHFGQUFhLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2luZGV4LmpzP2NiN2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudHMvaHR0cC1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudHMvZGF0YS1hcGktaHR0cC1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudHMvZGV2b3BzLWFwaS1odHRwLWNsaWVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmV0Y2gvZmV0Y2gtaDJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ZldGNoL2ZldGNoLW5hdGl2ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdGltZW91dC1tYW5hZ2Vyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TimeoutManager = void 0;\nclass TimeoutManager {\n    constructor(ms, mkTimeoutError){\n        Object.defineProperty(this, \"mkTimeoutError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: mkTimeoutError\n        });\n        Object.defineProperty(this, \"_deadline\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_started\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ms\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ms = ms || 600000;\n        this._started = false;\n    }\n    msRemaining() {\n        if (!this._started) {\n            this._started = true;\n            this._deadline = Date.now() + this.ms;\n            return this.ms;\n        }\n        return this._deadline - Date.now();\n    }\n}\nexports.TimeoutManager = TimeoutManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL3RpbWVvdXQtbWFuYWdlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRTtJQUNGQyxZQUFZQyxFQUFFLEVBQUVDLGNBQWMsQ0FBRTtRQUM1QlAsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNPLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZQLE9BQU9JO1FBQ1g7UUFDQVAsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDTyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWUCxPQUFPLEtBQUs7UUFDaEI7UUFDQUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDTyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWUCxPQUFPLEtBQUs7UUFDaEI7UUFDQUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNO1lBQzlCTyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWUCxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNHLEVBQUUsR0FBR0EsTUFBTTtRQUNoQixJQUFJLENBQUNLLFFBQVEsR0FBRztJQUNwQjtJQUNBQyxjQUFjO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ0QsUUFBUSxFQUFFO1lBQ2hCLElBQUksQ0FBQ0EsUUFBUSxHQUFHO1lBQ2hCLElBQUksQ0FBQ0UsU0FBUyxHQUFHQyxLQUFLQyxHQUFHLEtBQUssSUFBSSxDQUFDVCxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDQSxFQUFFO1FBQ2xCO1FBQ0EsT0FBTyxJQUFJLENBQUNPLFNBQVMsR0FBR0MsS0FBS0MsR0FBRztJQUNwQztBQUNKO0FBQ0FiLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2FwaS90aW1lb3V0LW1hbmFnZXJzLmpzPzU1ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGltZW91dE1hbmFnZXIgPSB2b2lkIDA7XG5jbGFzcyBUaW1lb3V0TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IobXMsIG1rVGltZW91dEVycm9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1rVGltZW91dEVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBta1RpbWVvdXRFcnJvclxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2RlYWRsaW5lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdGFydGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1zXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubXMgPSBtcyB8fCA2MDAwMDA7XG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgbXNSZW1haW5pbmcoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9kZWFkbGluZSA9IERhdGUubm93KCkgKyB0aGlzLm1zO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlYWRsaW5lIC0gRGF0ZS5ub3coKTtcbiAgICB9XG59XG5leHBvcnRzLlRpbWVvdXRNYW5hZ2VyID0gVGltZW91dE1hbmFnZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUaW1lb3V0TWFuYWdlciIsImNvbnN0cnVjdG9yIiwibXMiLCJta1RpbWVvdXRFcnJvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9zdGFydGVkIiwibXNSZW1haW5pbmciLCJfZGVhZGxpbmUiLCJEYXRlIiwibm93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection JSDeprecatedSymbols\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DataAPIClient_options, _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIClient = exports.DataAPIClientEventEmitterBase = void 0;\nconst db_1 = __webpack_require__(/*! ../data-api/db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\nconst astra_admin_1 = __webpack_require__(/*! ../devops/astra-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst fetch_native_1 = __webpack_require__(/*! ../api/fetch/fetch-native */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch/fetch-native.js\");\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst utils_2 = __webpack_require__(/*! ../devops/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js\");\nexports.DataAPIClientEventEmitterBase = (()=>{\n    try {\n        return (__webpack_require__(/*! events */ \"events\").EventEmitter);\n    } catch (_) {\n        throw new Error(`\\`${version_1.LIB_NAME}\\` requires the \\`events\\` module to be available for usage. Please provide a polyfill (e.g. the \\`events\\` package) or use a compatible environment.`);\n    }\n})();\nclass DataAPIClient extends exports.DataAPIClientEventEmitterBase {\n    constructor(tokenOrOptions, maybeOptions){\n        super();\n        _DataAPIClient_options.set(this, void 0);\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const tokenPassed = typeof tokenOrOptions === \"string\" || tokenOrOptions instanceof common_1.TokenProvider || arguments.length > 1;\n        const token = tokenPassed ? tokenOrOptions : undefined;\n        const options = tokenPassed ? maybeOptions : tokenOrOptions;\n        validateRootOpts(options);\n        __classPrivateFieldSet(this, _DataAPIClient_options, {\n            environment: options?.environment ?? \"astra\",\n            fetchCtx: buildFetchCtx(options || undefined),\n            dbOptions: {\n                monitorCommands: false,\n                ...options?.dbOptions,\n                token: common_1.TokenProvider.parseToken(options?.dbOptions?.token ?? token)\n            },\n            adminOptions: {\n                monitorCommands: false,\n                ...options?.adminOptions,\n                adminToken: common_1.TokenProvider.parseToken(options?.dbOptions?.token ?? token)\n            },\n            emitter: this,\n            userAgent: (0, api_1.buildUserAgent)(options?.caller)\n        }, \"f\");\n        if (Symbol.asyncDispose) {\n            this[Symbol.asyncDispose] = ()=>this.close();\n        }\n    }\n    db(endpointOrId, regionOrOptions, maybeOptions) {\n        return (0, db_1.mkDb)(__classPrivateFieldGet(this, _DataAPIClient_options, \"f\"), endpointOrId, regionOrOptions, maybeOptions);\n    }\n    admin(options) {\n        return new astra_admin_1.AstraAdmin(__classPrivateFieldGet(this, _DataAPIClient_options, \"f\"), options);\n    }\n    async close() {\n        await __classPrivateFieldGet(this, _DataAPIClient_options, \"f\").fetchCtx.ctx.close?.();\n        __classPrivateFieldGet(this, _DataAPIClient_options, \"f\").fetchCtx.closed.ref = true;\n    }\n}\nexports.DataAPIClient = DataAPIClient;\n_DataAPIClient_options = new WeakMap(), _a = Symbol.asyncDispose;\nfunction buildFetchCtx(options) {\n    const clientType = options?.httpOptions || getDeprecatedPrefersHttp2(options) ? options?.httpOptions?.client ?? \"default\" : undefined;\n    const ctx = clientType === \"fetch\" ? new fetch_native_1.FetchNative() : clientType === \"custom\" ? options.httpOptions.fetcher : tryLoadFetchH2(clientType, options);\n    return {\n        ctx: ctx,\n        closed: {\n            ref: false\n        },\n        maxTimeMS: options?.httpOptions?.maxTimeMS\n    };\n}\nfunction tryLoadFetchH2(clientType, options) {\n    try {\n        const httpOptions = options?.httpOptions;\n        const preferHttp2 = httpOptions?.preferHttp2 ?? getDeprecatedPrefersHttp2(options) ?? true;\n        return new api_1.FetchH2(httpOptions, preferHttp2);\n    } catch (e) {\n        if ((0, common_1.isNullish)(clientType)) {\n            return new fetch_native_1.FetchNative();\n        } else {\n            throw e;\n        }\n    }\n}\n// Shuts the linter up about 'preferHttp2' being deprecated\nfunction getDeprecatedPrefersHttp2(opts) {\n    return opts?.[\"preferHttp2\"];\n}\nfunction validateRootOpts(opts) {\n    (0, utils_1.validateOption)(\"DataAPIClientOptions\", opts, \"object\");\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)(\"caller\", opts.caller, \"object\", false, validateCaller);\n    (0, utils_1.validateOption)(\"preferHttp2 option\", getDeprecatedPrefersHttp2(opts), \"boolean\");\n    (0, db_1.validateDbOpts)(opts.dbOptions);\n    (0, utils_2.validateAdminOpts)(opts.adminOptions);\n    validateHttpOpts(opts.httpOptions);\n    (0, common_1.validateDataAPIEnv)(opts.environment);\n}\nfunction validateHttpOpts(opts) {\n    (0, utils_1.validateOption)(\"httpOptions\", opts, \"object\");\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)(\"httpOptions.client\", opts.client, \"string\", false, (client)=>{\n        if (![\n            \"fetch\",\n            \"default\",\n            \"custom\"\n        ].includes(client)) {\n            throw new Error(\"Invalid httpOptions.client; expected 'fetch', 'default', 'custom', or undefined\");\n        }\n    });\n    (0, utils_1.validateOption)(\"httpOptions.maxTimeMS\", opts.maxTimeMS, \"number\");\n    if (opts.client === \"default\" || !opts.client) {\n        (0, utils_1.validateOption)(\"httpOptions.preferHttp2\", opts.preferHttp2, \"boolean\");\n        (0, utils_1.validateOption)(\"httpOptions.http1 options\", opts.http1, \"object\", false, (http1)=>{\n            (0, utils_1.validateOption)(\"http1.keepAlive\", http1.keepAlive, \"boolean\");\n            (0, utils_1.validateOption)(\"http1.keepAliveMS\", http1.keepAliveMS, \"number\");\n            (0, utils_1.validateOption)(\"http1.maxSockets\", http1.maxSockets, \"number\");\n            (0, utils_1.validateOption)(\"http1.maxFreeSockets\", http1.maxFreeSockets, \"number\");\n        });\n    }\n    if (opts.client === \"custom\") {\n        (0, utils_1.validateOption)(\"httpOptions.fetcher option\", opts.fetcher, \"object\", true, (fetcher)=>{\n            (0, utils_1.validateOption)(\"fetcher.fetch option\", fetcher.fetch, \"function\", true);\n            (0, utils_1.validateOption)(\"fetcher.close option\", fetcher.close, \"function\");\n        });\n    }\n}\nfunction validateCaller(caller) {\n    if (!Array.isArray(caller)) {\n        throw new TypeError(\"Invalid caller; expected an array, or undefined/null\");\n    }\n    const isCallerArr = Array.isArray(caller[0]);\n    const callers = isCallerArr ? caller : [\n        caller\n    ];\n    callers.forEach((c, i)=>{\n        const idxMessage = isCallerArr ? ` at index ${i}` : \"\";\n        if (!Array.isArray(c)) {\n            throw new TypeError(`Invalid caller; expected [name, version?], or an array of such${idxMessage}`);\n        }\n        if (c.length < 1 || 2 < c.length) {\n            throw new Error(`Invalid caller; expected [name, version?], or an array of such${idxMessage}`);\n        }\n        if (typeof c[0] !== \"string\") {\n            throw new Error(`Invalid caller; expected a string name${idxMessage}`);\n        }\n        if (c.length === 2 && typeof c[1] !== \"string\") {\n            throw new Error(`Invalid caller; expected a string version${idxMessage}`);\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/client/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection DuplicatedCode\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FailedToLoadDefaultClientError = void 0;\nclass FailedToLoadDefaultClientError extends Error {\n    constructor(rootCause){\n        super('Error loading the fetch-h2 client for the DataAPIClient... please check the \"Non-standard environment support\" section of https://github.com/datastax/astra-db-ts for more information.');\n        Object.defineProperty(this, \"rootCause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.rootCause = rootCause;\n        this.name = \"FailedToLoadDefaultClientError\";\n    }\n}\nexports.FailedToLoadDefaultClientError = FailedToLoadDefaultClientError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMsOEJBQThCO0FBQzlCQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0NBQXNDLEdBQUcsS0FBSztBQUM5QyxNQUFNRSx1Q0FBdUNDO0lBQ3JDQyxZQUFZQyxTQUFTLENBQUU7UUFDdkIsS0FBSyxDQUFDO1FBQ0VQLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUM3Q08sWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlAsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDSSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0ksSUFBSSxHQUFHO0lBQ2hCO0FBQ0o7QUFDQVQsc0NBQXNDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2Vycm9ycy5qcz9kZGM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBub2luc3BlY3Rpb24gRHVwbGljYXRlZENvZGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmFpbGVkVG9Mb2FkRGVmYXVsdENsaWVudEVycm9yID0gdm9pZCAwO1xuY2xhc3MgRmFpbGVkVG9Mb2FkRGVmYXVsdENsaWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgICAgICBjb25zdHJ1Y3Rvcihyb290Q2F1c2UpIHtcbiAgICAgICAgc3VwZXIoJ0Vycm9yIGxvYWRpbmcgdGhlIGZldGNoLWgyIGNsaWVudCBmb3IgdGhlIERhdGFBUElDbGllbnQuLi4gcGxlYXNlIGNoZWNrIHRoZSBcIk5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudCBzdXBwb3J0XCIgc2VjdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vZGF0YXN0YXgvYXN0cmEtZGItdHMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdENhdXNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucm9vdENhdXNlID0gcm9vdENhdXNlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnRmFpbGVkVG9Mb2FkRGVmYXVsdENsaWVudEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLkZhaWxlZFRvTG9hZERlZmF1bHRDbGllbnRFcnJvciA9IEZhaWxlZFRvTG9hZERlZmF1bHRDbGllbnRFcnJvcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZhaWxlZFRvTG9hZERlZmF1bHRDbGllbnRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyb290Q2F1c2UiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/client/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection DuplicatedCode\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./data-api-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/errors.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Qyw4QkFBOEI7QUFDOUIsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyxvR0FBbUIsR0FBR047QUFDM0NELGFBQWFPLG1CQUFPQSxDQUFDLGtGQUFVLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2luZGV4LmpzPzJjYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbi8vIG5vaW5zcGVjdGlvbiBEdXBsaWNhdGVkQ29kZVxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGF0YS1hcGktY2xpZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lcnJvcnNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIEnvironments = void 0;\nexports.DataAPIEnvironments = [\n    \"astra\",\n    \"dse\",\n    \"hcd\",\n    \"cassandra\",\n    \"other\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBRyxLQUFLO0FBQ25DQSwyQkFBMkIsR0FBRztJQUFDO0lBQVM7SUFBTztJQUFPO0lBQWE7Q0FBUSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2NvbW1vbi9jb25zdGFudHMuanM/YTI0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYXRhQVBJRW52aXJvbm1lbnRzID0gdm9pZCAwO1xuZXhwb3J0cy5EYXRhQVBJRW52aXJvbm1lbnRzID0gWydhc3RyYScsICdkc2UnLCAnaGNkJywgJ2Nhc3NhbmRyYScsICdvdGhlciddO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGF0YUFQSUVudmlyb25tZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/utils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token-providers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0QyxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLGdGQUFTLEdBQUdOO0FBQ2pDRCxhQUFhTyxtQkFBT0EsQ0FBQyx3RkFBYSxHQUFHTjtBQUNyQ0QsYUFBYU8sbUJBQU9BLENBQUMsMEdBQW1CLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL2luZGV4LmpzP2E1OWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuLXByb3ZpZGVyc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/token-providers/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./userpass-token-providers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/userpass-token-providers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./static-token-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/static-token-provider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3Rva2VuLXByb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyxzSUFBNEIsR0FBR047QUFDcERELGFBQWFPLG1CQUFPQSxDQUFDLGdJQUF5QixHQUFHTjtBQUNqREQsYUFBYU8sbUJBQU9BLENBQUMsa0hBQWtCLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3Rva2VuLXByb3ZpZGVycy9pbmRleC5qcz9kMWU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VycGFzcy10b2tlbi1wcm92aWRlcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0YXRpYy10b2tlbi1wcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW4tcHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/static-token-provider.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/token-providers/static-token-provider.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StaticTokenProvider_token;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StaticTokenProvider = void 0;\nconst token_provider_1 = __webpack_require__(/*! ../../common/token-providers/token-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js\");\nclass StaticTokenProvider extends token_provider_1.TokenProvider {\n    constructor(token){\n        super();\n        _StaticTokenProvider_token.set(this, void 0);\n        __classPrivateFieldSet(this, _StaticTokenProvider_token, token, \"f\");\n    }\n    getToken() {\n        return __classPrivateFieldGet(this, _StaticTokenProvider_token, \"f\");\n    }\n}\nexports.StaticTokenProvider = StaticTokenProvider;\n_StaticTokenProvider_token = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3Rva2VuLXByb3ZpZGVycy9zdGF0aWMtdG9rZW4tcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLHlCQUF5QixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUMzRyxJQUFJRCxTQUFTLEtBQUssTUFBTSxJQUFJRSxVQUFVO0lBQ3RDLElBQUlGLFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBTyxTQUFVLE1BQU1ELEVBQUVHLElBQUksQ0FBQ1AsVUFBVUUsU0FBU0UsSUFBSUEsRUFBRUYsS0FBSyxHQUFHQSxRQUFRRCxNQUFNTyxHQUFHLENBQUNSLFVBQVVFLFFBQVNBO0FBQ3hHO0FBQ0EsSUFBSU8seUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQztJQUNwRyxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFlBQVlJLElBQUlBLEVBQUVGLEtBQUssR0FBR0QsTUFBTVMsR0FBRyxDQUFDVjtBQUN4RjtBQUNBLElBQUlXO0FBQ0pDLDhDQUE2QztJQUFFVixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEWSwyQkFBMkIsR0FBRyxLQUFLO0FBQ25DLE1BQU1FLG1CQUFtQkMsbUJBQU9BLENBQUMsNklBQTZDO0FBQzlFLE1BQU1GLDRCQUE0QkMsaUJBQWlCRSxhQUFhO0lBQ3hEQyxZQUFZQyxLQUFLLENBQUU7UUFDbkIsS0FBSztRQUNMVCwyQkFBMkJILEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUMxQ1QsdUJBQXVCLElBQUksRUFBRVksNEJBQTRCUyxPQUFPO0lBQ3BFO0lBQ0lDLFdBQVc7UUFDWCxPQUFPWix1QkFBdUIsSUFBSSxFQUFFRSw0QkFBNEI7SUFDcEU7QUFDSjtBQUNBRywyQkFBMkIsR0FBR0M7QUFDOUJKLDZCQUE2QixJQUFJVyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2NvbW1vbi90b2tlbi1wcm92aWRlcnMvc3RhdGljLXRva2VuLXByb3ZpZGVyLmpzPzEwYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RhdGljVG9rZW5Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IHRva2VuX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3Rva2VuLXByb3ZpZGVycy90b2tlbi1wcm92aWRlclwiKTtcbmNsYXNzIFN0YXRpY1Rva2VuUHJvdmlkZXIgZXh0ZW5kcyB0b2tlbl9wcm92aWRlcl8xLlRva2VuUHJvdmlkZXIge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0b2tlbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbiwgdG9rZW4sIFwiZlwiKTtcbiAgICB9XG4gICAgICAgIGdldFRva2VuKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbiwgXCJmXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RhdGljVG9rZW5Qcm92aWRlciA9IFN0YXRpY1Rva2VuUHJvdmlkZXI7XG5fU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbiA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfU3RhdGljVG9rZW5Qcm92aWRlcl90b2tlbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlN0YXRpY1Rva2VuUHJvdmlkZXIiLCJ0b2tlbl9wcm92aWRlcl8xIiwicmVxdWlyZSIsIlRva2VuUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsInRva2VuIiwiZ2V0VG9rZW4iLCJXZWFrTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/static-token-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenProvider = void 0;\nconst common_1 = __webpack_require__(/*! ../../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nclass TokenProvider {\n    static parseToken(token) {\n        if (typeof token === \"string\" || (0, common_1.isNullish)(token)) {\n            return new common_1.StaticTokenProvider(token);\n        }\n        if (token instanceof TokenProvider) {\n            return token;\n        }\n        throw new TypeError(\"Expected token to be type string | TokenProvider | nullish\");\n    }\n}\nexports.TokenProvider = TokenProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3Rva2VuLXByb3ZpZGVycy90b2tlbi1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHFGQUFjO0FBQ3ZDLE1BQU1GO0lBQ0UsT0FBT0csV0FBV0MsS0FBSyxFQUFFO1FBQ3pCLElBQUksT0FBT0EsVUFBVSxZQUFZLENBQUMsR0FBR0gsU0FBU0ksU0FBUyxFQUFFRCxRQUFRO1lBQzdELE9BQU8sSUFBSUgsU0FBU0ssbUJBQW1CLENBQUNGO1FBQzVDO1FBQ0EsSUFBSUEsaUJBQWlCSixlQUFlO1lBQ2hDLE9BQU9JO1FBQ1g7UUFDQSxNQUFNLElBQUlHLFVBQVU7SUFDeEI7QUFDSjtBQUNBVCxxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9jb21tb24vdG9rZW4tcHJvdmlkZXJzL3Rva2VuLXByb3ZpZGVyLmpzP2JlMGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vblwiKTtcbmNsYXNzIFRva2VuUHJvdmlkZXIge1xuICAgICAgICBzdGF0aWMgcGFyc2VUb2tlbih0b2tlbikge1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJyB8fCAoMCwgY29tbW9uXzEuaXNOdWxsaXNoKSh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY29tbW9uXzEuU3RhdGljVG9rZW5Qcm92aWRlcih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgVG9rZW5Qcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRva2VuIHRvIGJlIHR5cGUgc3RyaW5nIHwgVG9rZW5Qcm92aWRlciB8IG51bGxpc2gnKTtcbiAgICB9XG59XG5leHBvcnRzLlRva2VuUHJvdmlkZXIgPSBUb2tlblByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVG9rZW5Qcm92aWRlciIsImNvbW1vbl8xIiwicmVxdWlyZSIsInBhcnNlVG9rZW4iLCJ0b2tlbiIsImlzTnVsbGlzaCIsIlN0YXRpY1Rva2VuUHJvdmlkZXIiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/userpass-token-providers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/token-providers/userpass-token-providers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _UsernamePasswordTokenProvider_token;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UsernamePasswordTokenProvider = void 0;\nconst token_provider_1 = __webpack_require__(/*! ../../common/token-providers/token-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/token-provider.js\");\nclass UsernamePasswordTokenProvider extends token_provider_1.TokenProvider {\n    constructor(username, password){\n        super();\n        _UsernamePasswordTokenProvider_token.set(this, void 0);\n        __classPrivateFieldSet(this, _UsernamePasswordTokenProvider_token, `Cassandra:${this._encodeB64(username)}:${this._encodeB64(password)}`, \"f\");\n    }\n    getToken() {\n        return __classPrivateFieldGet(this, _UsernamePasswordTokenProvider_token, \"f\");\n    }\n    _encodeB64(input) {\n        if (false) {} else if (typeof Buffer === \"function\") {\n            return Buffer.from(input, \"utf-8\").toString(\"base64\");\n        } else {\n            throw new Error('Unable to encode username/password to base64... please provide the \"Cassandra:[username_b64]:[password_b64]\" token manually');\n        }\n    }\n}\nexports.UsernamePasswordTokenProvider = UsernamePasswordTokenProvider;\n_UsernamePasswordTokenProvider_token = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3Rva2VuLXByb3ZpZGVycy91c2VycGFzcy10b2tlbi1wcm92aWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLHlCQUF5QixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUMzRyxJQUFJRCxTQUFTLEtBQUssTUFBTSxJQUFJRSxVQUFVO0lBQ3RDLElBQUlGLFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBTyxTQUFVLE1BQU1ELEVBQUVHLElBQUksQ0FBQ1AsVUFBVUUsU0FBU0UsSUFBSUEsRUFBRUYsS0FBSyxHQUFHQSxRQUFRRCxNQUFNTyxHQUFHLENBQUNSLFVBQVVFLFFBQVNBO0FBQ3hHO0FBQ0EsSUFBSU8seUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQztJQUNwRyxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFlBQVlJLElBQUlBLEVBQUVGLEtBQUssR0FBR0QsTUFBTVMsR0FBRyxDQUFDVjtBQUN4RjtBQUNBLElBQUlXO0FBQ0pDLDhDQUE2QztJQUFFVixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEWSxxQ0FBcUMsR0FBRyxLQUFLO0FBQzdDLE1BQU1FLG1CQUFtQkMsbUJBQU9BLENBQUMsNklBQTZDO0FBQzlFLE1BQU1GLHNDQUFzQ0MsaUJBQWlCRSxhQUFhO0lBQ2xFQyxZQUFZQyxRQUFRLEVBQUVDLFFBQVEsQ0FBRTtRQUNoQyxLQUFLO1FBQ0xWLHFDQUFxQ0gsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLO1FBQ3BEVCx1QkFBdUIsSUFBSSxFQUFFWSxzQ0FBc0MsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDVyxVQUFVLENBQUNGLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQ0UsVUFBVSxDQUFDRCxVQUFVLENBQUMsRUFBRTtJQUM5STtJQUNJRSxXQUFXO1FBQ1gsT0FBT2QsdUJBQXVCLElBQUksRUFBRUUsc0NBQXNDO0lBQzlFO0lBQ0FXLFdBQVdFLEtBQUssRUFBRTtRQUNkLElBQUksS0FBd0QsRUFBWSxFQUV2RSxNQUNJLElBQUksT0FBT0csV0FBVyxZQUFZO1lBQ25DLE9BQU9BLE9BQU9DLElBQUksQ0FBQ0osT0FBTyxTQUFTSyxRQUFRLENBQUM7UUFDaEQsT0FDSztZQUNELE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtJQUNKO0FBQ0o7QUFDQWhCLHFDQUFxQyxHQUFHQztBQUN4Q0osdUNBQXVDLElBQUlvQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2NvbW1vbi90b2tlbi1wcm92aWRlcnMvdXNlcnBhc3MtdG9rZW4tcHJvdmlkZXJzLmpzPzhjZmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfVXNlcm5hbWVQYXNzd29yZFRva2VuUHJvdmlkZXJfdG9rZW47XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVzZXJuYW1lUGFzc3dvcmRUb2tlblByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgdG9rZW5fcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdG9rZW4tcHJvdmlkZXJzL3Rva2VuLXByb3ZpZGVyXCIpO1xuY2xhc3MgVXNlcm5hbWVQYXNzd29yZFRva2VuUHJvdmlkZXIgZXh0ZW5kcyB0b2tlbl9wcm92aWRlcl8xLlRva2VuUHJvdmlkZXIge1xuICAgICAgICBjb25zdHJ1Y3Rvcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1VzZXJuYW1lUGFzc3dvcmRUb2tlblByb3ZpZGVyX3Rva2VuLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Vc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlcl90b2tlbiwgYENhc3NhbmRyYToke3RoaXMuX2VuY29kZUI2NCh1c2VybmFtZSl9OiR7dGhpcy5fZW5jb2RlQjY0KHBhc3N3b3JkKX1gLCBcImZcIik7XG4gICAgfVxuICAgICAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VzZXJuYW1lUGFzc3dvcmRUb2tlblByb3ZpZGVyX3Rva2VuLCBcImZcIik7XG4gICAgfVxuICAgIF9lbmNvZGVCNjQoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5idG9hKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsICd1dGYtOCcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGVuY29kZSB1c2VybmFtZS9wYXNzd29yZCB0byBiYXNlNjQuLi4gcGxlYXNlIHByb3ZpZGUgdGhlIFwiQ2Fzc2FuZHJhOlt1c2VybmFtZV9iNjRdOltwYXNzd29yZF9iNjRdXCIgdG9rZW4gbWFudWFsbHknKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVXNlcm5hbWVQYXNzd29yZFRva2VuUHJvdmlkZXIgPSBVc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlcjtcbl9Vc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlcl90b2tlbiA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfVXNlcm5hbWVQYXNzd29yZFRva2VuUHJvdmlkZXJfdG9rZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJVc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlciIsInRva2VuX3Byb3ZpZGVyXzEiLCJyZXF1aXJlIiwiVG9rZW5Qcm92aWRlciIsImNvbnN0cnVjdG9yIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIl9lbmNvZGVCNjQiLCJnZXRUb2tlbiIsImlucHV0Iiwid2luZG93IiwiYnRvYSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsIkVycm9yIiwiV2Vha01hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/token-providers/userpass-token-providers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isNullish = isNullish;\nexports.validateDataAPIEnv = validateDataAPIEnv;\nexports.jsonTryParse = jsonTryParse;\nexports.resolveKeyspace = resolveKeyspace;\nconst constants_1 = __webpack_require__(/*! ../common/constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/constants.js\");\nfunction isNullish(t) {\n    return t === null || t === undefined;\n}\nfunction validateDataAPIEnv(env) {\n    if (!isNullish(env) && !constants_1.DataAPIEnvironments.includes(env)) {\n        throw new Error(`Given environment is invalid (must be ${constants_1.DataAPIEnvironments.map((e)=>`\"${e}\"`).join(\", \")}, or nullish to default to \"astra\".`);\n    }\n}\nfunction jsonTryParse(json, otherwise, reviver) {\n    try {\n        return JSON.parse(json, reviver);\n    } catch (_) {\n        return otherwise;\n    }\n}\nfunction resolveKeyspace(obj, nullBypass) {\n    return nullBypass ? obj?.keyspace !== undefined ? obj?.keyspace : obj?.namespace : obj?.keyspace ?? obj?.namespace ?? undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Q0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHRTtBQUNwQkYsMEJBQTBCLEdBQUdHO0FBQzdCSCxvQkFBb0IsR0FBR0k7QUFDdkJKLHVCQUF1QixHQUFHSztBQUMxQixNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQyxnR0FBcUI7QUFDakQsU0FBU0wsVUFBVU0sQ0FBQztJQUNoQixPQUFPQSxNQUFNLFFBQVFBLE1BQU1DO0FBQy9CO0FBQ0EsU0FBU04sbUJBQW1CTyxHQUFHO0lBQzNCLElBQUksQ0FBQ1IsVUFBVVEsUUFBUSxDQUFDSixZQUFZSyxtQkFBbUIsQ0FBQ0MsUUFBUSxDQUFDRixNQUFNO1FBQ25FLE1BQU0sSUFBSUcsTUFBTSxDQUFDLHNDQUFzQyxFQUFFUCxZQUFZSyxtQkFBbUIsQ0FBQ0csR0FBRyxDQUFDQyxDQUFBQSxJQUFLLENBQUMsQ0FBQyxFQUFFQSxFQUFFLENBQUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsTUFBTSxtQ0FBbUMsQ0FBQztJQUMvSjtBQUNKO0FBQ0EsU0FBU1osYUFBYWEsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLE9BQU87SUFDMUMsSUFBSTtRQUNBLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0osTUFBTUU7SUFDNUIsRUFDQSxPQUFPRyxHQUFHO1FBQ04sT0FBT0o7SUFDWDtBQUNKO0FBQ0EsU0FBU2IsZ0JBQWdCa0IsR0FBRyxFQUFFQyxVQUFVO0lBQ3BDLE9BQU8sYUFDRCxLQUFNQyxhQUFhaEIsWUFBYWMsS0FBS0UsV0FBV0YsS0FBS0csWUFDckRILEtBQUtFLFlBQVlGLEtBQUtHLGFBQWFqQjtBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2NvbW1vbi91dGlscy5qcz8zN2E5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzTnVsbGlzaCA9IGlzTnVsbGlzaDtcbmV4cG9ydHMudmFsaWRhdGVEYXRhQVBJRW52ID0gdmFsaWRhdGVEYXRhQVBJRW52O1xuZXhwb3J0cy5qc29uVHJ5UGFyc2UgPSBqc29uVHJ5UGFyc2U7XG5leHBvcnRzLnJlc29sdmVLZXlzcGFjZSA9IHJlc29sdmVLZXlzcGFjZTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb25zdGFudHNcIik7XG5mdW5jdGlvbiBpc051bGxpc2godCkge1xuICAgIHJldHVybiB0ID09PSBudWxsIHx8IHQgPT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0YUFQSUVudihlbnYpIHtcbiAgICBpZiAoIWlzTnVsbGlzaChlbnYpICYmICFjb25zdGFudHNfMS5EYXRhQVBJRW52aXJvbm1lbnRzLmluY2x1ZGVzKGVudikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHaXZlbiBlbnZpcm9ubWVudCBpcyBpbnZhbGlkIChtdXN0IGJlICR7Y29uc3RhbnRzXzEuRGF0YUFQSUVudmlyb25tZW50cy5tYXAoZSA9PiBgXCIke2V9XCJgKS5qb2luKCcsICcpfSwgb3IgbnVsbGlzaCB0byBkZWZhdWx0IHRvIFwiYXN0cmFcIi5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBqc29uVHJ5UGFyc2UoanNvbiwgb3RoZXJ3aXNlLCByZXZpdmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbiwgcmV2aXZlcik7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBvdGhlcndpc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNwYWNlKG9iaiwgbnVsbEJ5cGFzcykge1xuICAgIHJldHVybiAobnVsbEJ5cGFzcylcbiAgICAgICAgPyAob2JqPy5rZXlzcGFjZSAhPT0gdW5kZWZpbmVkKSA/IG9iaj8ua2V5c3BhY2UgOiBvYmo/Lm5hbWVzcGFjZVxuICAgICAgICA6IG9iaj8ua2V5c3BhY2UgPz8gb2JqPy5uYW1lc3BhY2UgPz8gdW5kZWZpbmVkO1xufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNOdWxsaXNoIiwidmFsaWRhdGVEYXRhQVBJRW52IiwianNvblRyeVBhcnNlIiwicmVzb2x2ZUtleXNwYWNlIiwiY29uc3RhbnRzXzEiLCJyZXF1aXJlIiwidCIsInVuZGVmaW5lZCIsImVudiIsIkRhdGFBUElFbnZpcm9ubWVudHMiLCJpbmNsdWRlcyIsIkVycm9yIiwibWFwIiwiZSIsImpvaW4iLCJqc29uIiwib3RoZXJ3aXNlIiwicmV2aXZlciIsIkpTT04iLCJwYXJzZSIsIl8iLCJvYmoiLCJudWxsQnlwYXNzIiwia2V5c3BhY2UiLCJuYW1lc3BhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js":
/*!************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _Collection_httpClient, _Collection_db;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Collection = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst cursor_1 = __webpack_require__(/*! ../data-api/cursor */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\");\nconst errors_1 = __webpack_require__(/*! ../data-api/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\nconst safe_stable_stringify_1 = __importDefault(__webpack_require__(/*! safe-stable-stringify */ \"(rsc)/./node_modules/safe-stable-stringify/index.js\"));\nconst types_1 = __webpack_require__(/*! ../data-api/types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nclass Collection {\n    constructor(db, httpClient, name, opts){\n        _Collection_httpClient.set(this, void 0);\n        _Collection_db.set(this, void 0);\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"collectionName\", {\n            value: name,\n            writable: false\n        });\n        Object.defineProperty(this, \"keyspace\", {\n            value: (0, common_1.resolveKeyspace)(opts) ?? db.keyspace,\n            writable: false\n        });\n        Object.defineProperty(this, \"namespace\", {\n            value: this.keyspace,\n            writable: false\n        });\n        __classPrivateFieldSet(this, _Collection_httpClient, httpClient.forCollection(this.keyspace, this.collectionName, opts), \"f\");\n        __classPrivateFieldSet(this, _Collection_db, db, \"f\");\n    }\n    async insertOne(document, options) {\n        const command = {\n            insertOne: {\n                document\n            }\n        };\n        const { vector, vectorize } = options ?? {};\n        if (vector) {\n            command.insertOne.document = {\n                ...command.insertOne.document,\n                $vector: vector\n            };\n        }\n        if (vectorize) {\n            command.insertOne.document = {\n                ...command.insertOne.document,\n                $vectorize: vectorize\n            };\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        return {\n            insertedId: resp.status?.insertedIds[0]\n        };\n    }\n    async insertMany(documents, options) {\n        const chunkSize = options?.chunkSize ?? 50;\n        const { vectors, vectorize } = options ?? {};\n        if (vectors) {\n            if (vectors.length !== documents.length) {\n                throw new Error(\"The number of vectors must match the number of documents\");\n            }\n            for(let i = 0, n = documents.length; i < n; i++){\n                if (vectors[i]) {\n                    documents[i] = {\n                        ...documents[i],\n                        $vector: vectors[i]\n                    };\n                }\n            }\n        }\n        if (vectorize) {\n            if (vectorize.length !== documents.length) {\n                throw new Error(\"The number of vectors must match the number of documents\");\n            }\n            for(let i = 0, n = documents.length; i < n; i++){\n                if (vectorize[i]) {\n                    documents[i] = {\n                        ...documents[i],\n                        $vectorize: vectorize[i]\n                    };\n                }\n            }\n        }\n        const timeoutManager = __classPrivateFieldGet(this, _Collection_httpClient, \"f\").timeoutManager(options?.maxTimeMS);\n        const insertedIds = (options?.ordered) ? await insertManyOrdered(__classPrivateFieldGet(this, _Collection_httpClient, \"f\"), documents, chunkSize, timeoutManager) : await insertManyUnordered(__classPrivateFieldGet(this, _Collection_httpClient, \"f\"), documents, options?.concurrency ?? 8, chunkSize, timeoutManager);\n        return {\n            insertedCount: insertedIds.length,\n            insertedIds: insertedIds\n        };\n    }\n    async updateOne(filter, update, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            updateOne: {\n                filter,\n                update,\n                options: {\n                    upsert: options?.upsert\n                }\n            }\n        };\n        if (options?.sort) {\n            command.updateOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        const commonResult = {\n            modifiedCount: resp.status?.modifiedCount,\n            matchedCount: resp.status?.matchedCount\n        };\n        return (resp.status?.upsertedId) ? {\n            ...commonResult,\n            upsertedId: resp.status.upsertedId,\n            upsertedCount: 1\n        } : {\n            ...commonResult,\n            upsertedCount: 0\n        };\n    }\n    async updateMany(filter, update, options) {\n        const command = {\n            updateMany: {\n                filter,\n                update,\n                options: {\n                    upsert: options?.upsert\n                }\n            }\n        };\n        const timeoutManager = __classPrivateFieldGet(this, _Collection_httpClient, \"f\").timeoutManager(options?.maxTimeMS);\n        const commonResult = {\n            modifiedCount: 0,\n            matchedCount: 0,\n            upsertedCount: 0\n        };\n        let resp;\n        try {\n            while(!resp || resp.status?.nextPageState){\n                resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, {\n                    timeoutManager\n                });\n                command.updateMany.options.pageState = resp.status?.nextPageState;\n                commonResult.modifiedCount += resp.status?.modifiedCount ?? 0;\n                commonResult.matchedCount += resp.status?.matchedCount ?? 0;\n            }\n        } catch (e) {\n            if (!(e instanceof errors_1.DataAPIResponseError)) {\n                throw e;\n            }\n            const desc = e.detailedErrorDescriptors[0];\n            commonResult.modifiedCount += desc.rawResponse.status?.modifiedCount ?? 0;\n            commonResult.matchedCount += desc.rawResponse.status?.matchedCount ?? 0;\n            commonResult.upsertedCount = desc.rawResponse.status?.upsertedCount ?? 0;\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.UpdateManyError, command, desc.rawResponse, {\n                partialResult: commonResult\n            });\n        }\n        return (resp.status?.upsertedId) ? {\n            ...commonResult,\n            upsertedId: resp.status.upsertedId,\n            upsertedCount: 1\n        } : commonResult;\n    }\n    async replaceOne(filter, replacement, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndReplace: {\n                filter,\n                replacement,\n                options: {\n                    returnDocument: \"before\",\n                    upsert: options?.upsert\n                },\n                projection: {\n                    \"*\": 0\n                }\n            }\n        };\n        if (options?.sort) {\n            command.findOneAndReplace.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        const commonResult = {\n            modifiedCount: resp.status?.modifiedCount,\n            matchedCount: resp.status?.matchedCount\n        };\n        return (resp.status?.upsertedId) ? {\n            ...commonResult,\n            upsertedId: resp.status.upsertedId,\n            upsertedCount: 1\n        } : {\n            ...commonResult,\n            upsertedCount: 0\n        };\n    }\n    async deleteOne(filter = {}, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            deleteOne: {\n                filter\n            }\n        };\n        if (options?.sort) {\n            command.deleteOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const deleteOneResp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        return {\n            deletedCount: deleteOneResp.status?.deletedCount\n        };\n    }\n    async deleteMany(filter, options) {\n        const command = {\n            deleteMany: {\n                filter\n            }\n        };\n        const timeoutManager = __classPrivateFieldGet(this, _Collection_httpClient, \"f\").timeoutManager(options?.maxTimeMS);\n        let resp;\n        let numDeleted = 0;\n        try {\n            while(!resp || resp.status?.moreData){\n                resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, {\n                    timeoutManager\n                });\n                numDeleted += resp.status?.deletedCount ?? 0;\n            }\n        } catch (e) {\n            if (!(e instanceof errors_1.DataAPIResponseError)) {\n                throw e;\n            }\n            const desc = e.detailedErrorDescriptors[0];\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.DeleteManyError, command, desc.rawResponse, {\n                partialResult: {\n                    deletedCount: numDeleted + (desc.rawResponse.status?.deletedCount ?? 0)\n                }\n            });\n        }\n        return {\n            deletedCount: numDeleted\n        };\n    }\n    async deleteAll(options) {\n        await this.deleteMany({}, options);\n    }\n    find(filter, options) {\n        return new cursor_1.FindCursor(this.keyspace, __classPrivateFieldGet(this, _Collection_httpClient, \"f\"), filter, coalesceVectorSpecialsIntoSort(options));\n    }\n    async findOne(filter, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOne: {\n                filter,\n                options: {\n                    includeSimilarity: options?.includeSimilarity\n                }\n            }\n        };\n        if (options?.sort) {\n            command.findOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOne.projection = options.projection;\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        return resp.data?.document;\n    }\n    async distinct(key, filter = {}) {\n        const projection = pullSafeProjection4Distinct(key);\n        const cursor = this.find(filter, {\n            projection: {\n                _id: 0,\n                [projection]: 1\n            }\n        });\n        const seen = new Set();\n        const ret = [];\n        const extract = mkDistinctPathExtractor(key);\n        for await (const doc of cursor){\n            const values = extract(doc);\n            for(let i = 0, n = values.length; i < n; i++){\n                const value = values[i];\n                const key = typeof value === \"object\" ? (0, safe_stable_stringify_1.default)(value) : value;\n                if (!seen.has(key)) {\n                    ret.push(value);\n                    seen.add(key);\n                }\n            }\n        }\n        return ret;\n    }\n    async countDocuments(filter, upperBound, options) {\n        const command = {\n            countDocuments: {\n                filter\n            }\n        };\n        if (!upperBound) {\n            throw new Error(\"upperBound is required\");\n        }\n        if (upperBound < 0) {\n            throw new Error(\"upperBound must be >= 0\");\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        if (resp.status?.moreData) {\n            throw new errors_1.TooManyDocumentsToCountError(resp.status.count, true);\n        }\n        if (resp.status?.count > upperBound) {\n            throw new errors_1.TooManyDocumentsToCountError(upperBound, false);\n        }\n        return resp.status?.count;\n    }\n    async estimatedDocumentCount(options) {\n        const command = {\n            estimatedDocumentCount: {}\n        };\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        return resp.status?.count;\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndReplace: {\n                filter,\n                replacement,\n                options: {\n                    returnDocument: options?.returnDocument,\n                    upsert: options?.upsert\n                }\n            }\n        };\n        if (options?.sort) {\n            command.findOneAndReplace.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndReplace.projection = options.projection;\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options?.includeResultMetadata) ? {\n            value: document,\n            ok: 1\n        } : document;\n    }\n    async findOneAndDelete(filter, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndDelete: {\n                filter\n            }\n        };\n        if (options?.sort) {\n            command.findOneAndDelete.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndDelete.projection = options.projection;\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options?.includeResultMetadata) ? {\n            value: document,\n            ok: 1\n        } : document;\n    }\n    async findOneAndUpdate(filter, update, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndUpdate: {\n                filter,\n                update,\n                options: {\n                    returnDocument: options?.returnDocument,\n                    upsert: options?.upsert\n                }\n            }\n        };\n        if (options?.sort) {\n            command.findOneAndUpdate.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndUpdate.projection = options.projection;\n        }\n        const resp = await __classPrivateFieldGet(this, _Collection_httpClient, \"f\").executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options?.includeResultMetadata) ? {\n            value: document,\n            ok: 1\n        } : document;\n    }\n    async bulkWrite(operations, options) {\n        const timeoutManager = __classPrivateFieldGet(this, _Collection_httpClient, \"f\").timeoutManager(options?.maxTimeMS);\n        return (options?.ordered) ? await bulkWriteOrdered(__classPrivateFieldGet(this, _Collection_httpClient, \"f\"), operations, timeoutManager) : await bulkWriteUnordered(__classPrivateFieldGet(this, _Collection_httpClient, \"f\"), operations, options?.concurrency ?? 8, timeoutManager);\n    }\n    async options(options) {\n        const results = await __classPrivateFieldGet(this, _Collection_db, \"f\").listCollections({\n            nameOnly: false,\n            maxTimeMS: options?.maxTimeMS\n        });\n        const collection = results.find((c)=>c.name === this.collectionName);\n        if (!collection) {\n            throw new errors_1.CollectionNotFoundError(this.keyspace, this.collectionName);\n        }\n        return collection.options;\n    }\n    async drop(options) {\n        return await __classPrivateFieldGet(this, _Collection_db, \"f\").dropCollection(this.collectionName, {\n            keyspace: this.keyspace,\n            ...options\n        });\n    }\n    get _httpClient() {\n        return __classPrivateFieldGet(this, _Collection_httpClient, \"f\");\n    }\n}\nexports.Collection = Collection;\n_Collection_httpClient = new WeakMap(), _Collection_db = new WeakMap();\nconst coalesceVectorSpecialsIntoSort = (options)=>{\n    if (options?.vector && options.vectorize) {\n        throw new Error(\"Cannot set both vectors and vectorize options\");\n    }\n    if (options?.vector) {\n        if (options.sort) {\n            throw new Error(\"Can't use both `sort` and `vector` options at once; if you need both, include a $vector key in the sort object\");\n        }\n        return {\n            ...options,\n            sort: {\n                $vector: options.vector\n            }\n        };\n    }\n    if (options?.vectorize) {\n        if (options.sort) {\n            throw new Error(\"Can't use both `sort` and `vectorize` options at once; if you need both, include a $vectorize key in the sort object\");\n        }\n        return {\n            ...options,\n            sort: {\n                $vectorize: options.vectorize\n            }\n        };\n    }\n    return options;\n};\n// -- Insert Many ------------------------------------------------------------------------------------------\nconst insertManyOrdered = async (httpClient, documents, chunkSize, timeoutManager)=>{\n    const insertedIds = [];\n    for(let i = 0, n = documents.length; i < n; i += chunkSize){\n        const slice = documents.slice(i, i + chunkSize);\n        const [_docResp, inserted, errDesc] = await insertMany(httpClient, slice, true, timeoutManager);\n        insertedIds.push(...inserted);\n        if (errDesc) {\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.InsertManyError, errDesc.command, errDesc.rawResponse, {\n                partialResult: {\n                    insertedIds: insertedIds,\n                    insertedCount: insertedIds.length\n                }\n            });\n        }\n    }\n    return insertedIds;\n};\nconst insertManyUnordered = async (httpClient, documents, concurrency, chunkSize, timeoutManager)=>{\n    const insertedIds = [];\n    let masterIndex = 0;\n    const failCommands = [];\n    const failRaw = [];\n    const docResps = [];\n    const workers = Array.from({\n        length: concurrency\n    }, async ()=>{\n        while(masterIndex < documents.length){\n            const localI = masterIndex;\n            const endIdx = Math.min(localI + chunkSize, documents.length);\n            masterIndex += chunkSize;\n            if (localI >= endIdx) {\n                break;\n            }\n            const slice = documents.slice(localI, endIdx);\n            const [docResp, inserted, errDesc] = await insertMany(httpClient, slice, false, timeoutManager);\n            insertedIds.push(...inserted);\n            docResps.push(...docResp);\n            if (errDesc) {\n                failCommands.push(errDesc.command);\n                failRaw.push(errDesc.rawResponse);\n            }\n        }\n    });\n    await Promise.all(workers);\n    if (failCommands.length > 0) {\n        throw (0, errors_1.mkRespErrorFromResponses)(errors_1.InsertManyError, failCommands, failRaw, {\n            partialResult: {\n                insertedIds: insertedIds,\n                insertedCount: insertedIds.length\n            }\n        });\n    }\n    return insertedIds;\n};\nconst insertMany = async (httpClient, documents, ordered, timeoutManager)=>{\n    const command = {\n        insertMany: {\n            documents,\n            options: {\n                returnDocumentResponses: true,\n                ordered\n            }\n        }\n    };\n    let resp, err;\n    try {\n        resp = await httpClient.executeCommand(command, {\n            timeoutManager\n        });\n    } catch (e) {\n        if (!(e instanceof errors_1.DataAPIResponseError)) {\n            throw e;\n        }\n        resp = e.detailedErrorDescriptors[0].rawResponse;\n        err = e;\n    }\n    const documentResponses = resp.status?.documentResponses ?? [];\n    const errors = resp.errors;\n    const insertedIds = [];\n    for(let i = 0, n = documentResponses.length; i < n; i++){\n        const resp = documentResponses[i];\n        if (resp.status === \"OK\") {\n            insertedIds.push(resp._id);\n        } else if (resp.errorIdx) {\n            resp.error = errors[resp.errorIdx];\n            delete resp.errorIdx;\n        }\n    }\n    return [\n        documentResponses,\n        insertedIds,\n        err?.detailedErrorDescriptors[0]\n    ];\n};\n// -- Bulk Write ------------------------------------------------------------------------------------------\nconst bulkWriteOrdered = async (httpClient, operations, timeoutManager)=>{\n    const results = new types_1.BulkWriteResult();\n    let i = 0;\n    try {\n        for(let n = operations.length; i < n; i++){\n            await bulkWrite(httpClient, operations[i], results, i, timeoutManager);\n        }\n    } catch (e) {\n        if (!(e instanceof errors_1.DataAPIResponseError)) {\n            throw e;\n        }\n        const desc = e.detailedErrorDescriptors[0];\n        if (desc.rawResponse.status) {\n            addToBulkWriteResult(results, desc.rawResponse.status, i);\n        }\n        throw (0, errors_1.mkRespErrorFromResponse)(errors_1.BulkWriteError, desc.command, desc.rawResponse, {\n            partialResult: results\n        });\n    }\n    return results;\n};\nconst bulkWriteUnordered = async (httpClient, operations, concurrency, timeoutManager)=>{\n    const results = new types_1.BulkWriteResult();\n    let masterIndex = 0;\n    const failCommands = [];\n    const failRaw = [];\n    const workers = Array.from({\n        length: concurrency\n    }, async ()=>{\n        while(masterIndex < operations.length){\n            const localI = masterIndex;\n            masterIndex++;\n            try {\n                await bulkWrite(httpClient, operations[localI], results, localI, timeoutManager);\n            } catch (e) {\n                if (!(e instanceof errors_1.DataAPIResponseError)) {\n                    throw e;\n                }\n                const desc = e.detailedErrorDescriptors[0];\n                if (desc.rawResponse.status) {\n                    addToBulkWriteResult(results, desc.rawResponse.status, localI);\n                }\n                failCommands.push(desc.command);\n                failRaw.push(desc.rawResponse);\n            }\n        }\n    });\n    await Promise.all(workers);\n    if (failCommands.length > 0) {\n        throw (0, errors_1.mkRespErrorFromResponses)(errors_1.BulkWriteError, failCommands, failRaw, {\n            partialResult: results\n        });\n    }\n    return results;\n};\nconst bulkWrite = async (httpClient, operation, results, i, timeoutManager)=>{\n    const command = buildBulkWriteCommand(operation);\n    const resp = await httpClient.executeCommand(command, {\n        timeoutManager\n    });\n    addToBulkWriteResult(results, resp, i);\n};\nconst buildBulkWriteCommand = (operation)=>{\n    switch(true){\n        case \"insertOne\" in operation:\n            return {\n                insertOne: {\n                    document: operation.insertOne.document\n                }\n            };\n        case \"updateOne\" in operation:\n            return {\n                updateOne: {\n                    filter: operation.updateOne.filter,\n                    update: operation.updateOne.update,\n                    options: {\n                        upsert: operation.updateOne.upsert ?? false\n                    }\n                }\n            };\n        case \"updateMany\" in operation:\n            return {\n                updateMany: {\n                    filter: operation.updateMany.filter,\n                    update: operation.updateMany.update,\n                    options: {\n                        upsert: operation.updateMany.upsert ?? false\n                    }\n                }\n            };\n        case \"replaceOne\" in operation:\n            return {\n                findOneAndReplace: {\n                    filter: operation.replaceOne.filter,\n                    replacement: operation.replaceOne.replacement,\n                    options: {\n                        upsert: operation.replaceOne.upsert ?? false\n                    }\n                }\n            };\n        case \"deleteOne\" in operation:\n            return {\n                deleteOne: {\n                    filter: operation.deleteOne.filter\n                }\n            };\n        case \"deleteMany\" in operation:\n            return {\n                deleteMany: {\n                    filter: operation.deleteMany.filter\n                }\n            };\n        default:\n            throw new Error(`Unknown bulk write operation: ${JSON.stringify(operation)}`);\n    }\n};\nconst addToBulkWriteResult = (result, resp, i)=>{\n    const asMutable = result;\n    const status = resp.status;\n    if (status) {\n        asMutable.insertedCount += status.insertedIds?.length ?? 0;\n        asMutable.modifiedCount += status.modifiedCount ?? 0;\n        asMutable.matchedCount += status.matchedCount ?? 0;\n        asMutable.deletedCount += status.deletedCount ?? 0;\n        if (status.upsertedId) {\n            asMutable.upsertedCount++;\n            asMutable.upsertedIds[i] = status.upsertedId;\n        }\n    }\n    asMutable.getRawResponse().push(resp);\n};\n// -- Distinct --------------------------------------------------------------------------------------------\nconst pullSafeProjection4Distinct = (path)=>{\n    const split = path.split(\".\");\n    if (split.some((p)=>!p)) {\n        throw new Error(\"Path cannot contain empty segments\");\n    }\n    let i, n;\n    for(i = 0, n = split.length; i < n && isNaN(+split[i]); i++){}\n    split.length = i;\n    return split.join(\".\");\n};\nconst mkDistinctPathExtractor = (path)=>{\n    const values = [];\n    const extract = (path, index, value)=>{\n        if (value === undefined) {\n            return;\n        }\n        if (index === path.length) {\n            if (Array.isArray(value)) {\n                values.push(...value);\n            } else {\n                values.push(value);\n            }\n            return;\n        }\n        const prop = path[index];\n        if (Array.isArray(value)) {\n            const asInt = parseInt(prop, 10);\n            if (isNaN(asInt)) {\n                for(let i = 0, n = value.length; i < n; i++){\n                    extract(path, index, value[i]);\n                }\n            } else if (asInt < value.length) {\n                extract(path, index + 1, value[asInt]);\n            }\n        } else if (value && typeof value === \"object\") {\n            extract(path, index + 1, value[prop]);\n        }\n    };\n    return (doc)=>{\n        extract(path.split(\".\"), 0, doc);\n        return values;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindCursor = void 0;\nconst data_api_1 = __webpack_require__(/*! ../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nclass FindCursor {\n    constructor(keyspace, httpClient, filter, options){\n        Object.defineProperty(this, \"_keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_mapping\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"_nextPageState\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"_sortVector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._keyspace = keyspace;\n        this._httpClient = httpClient;\n        this._filter = filter;\n        this._options = structuredClone(options ?? {});\n        if (options?.sort) {\n            this._options.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n    }\n    get keyspace() {\n        return this._keyspace;\n    }\n    get namespace() {\n        return this._keyspace;\n    }\n    get closed() {\n        return this._state === 2;\n    }\n    bufferedCount() {\n        return this._buffer.length;\n    }\n    filter(filter) {\n        this._assertUninitialized();\n        this._filter = filter;\n        return this;\n    }\n    sort(sort) {\n        this._assertUninitialized();\n        this._options.sort = (0, utils_1.normalizeSort)(sort);\n        return this;\n    }\n    limit(limit) {\n        this._assertUninitialized();\n        this._options.limit = limit || Infinity;\n        return this;\n    }\n    skip(skip) {\n        this._assertUninitialized();\n        this._options.skip = skip;\n        return this;\n    }\n    project(projection) {\n        this._assertUninitialized();\n        this._options.projection = projection;\n        return this;\n    }\n    includeSimilarity(includeSimilarity = true) {\n        this._assertUninitialized();\n        this._options.includeSimilarity = includeSimilarity;\n        return this;\n    }\n    includeSortVector(includeSortVector = true) {\n        this._assertUninitialized();\n        this._options.includeSortVector = includeSortVector;\n        return this;\n    }\n    map(mapping) {\n        this._assertUninitialized();\n        if (this._mapping) {\n            const oldMapping = this._mapping;\n            this._mapping = (doc)=>mapping(oldMapping(doc));\n        } else {\n            this._mapping = mapping;\n        }\n        return this;\n    }\n    clone() {\n        return new FindCursor(this._keyspace, this._httpClient, this._filter, this._options);\n    }\n    readBufferedDocuments(max) {\n        const toRead = Math.min(max ?? this._buffer.length, this._buffer.length);\n        return this._buffer.splice(0, toRead);\n    }\n    rewind() {\n        this._buffer.length = 0;\n        this._nextPageState = undefined;\n        this._state = 0;\n    }\n    async next() {\n        return this._next(false);\n    }\n    async hasNext() {\n        if (this._buffer.length > 0) {\n            return true;\n        }\n        const doc = await this._next(true);\n        if (doc !== null) {\n            this._buffer.push(doc);\n            return true;\n        }\n        return false;\n    }\n    async getSortVector() {\n        if (this._sortVector === undefined) {\n            if (this._options.includeSortVector) {\n                await this.hasNext();\n            } else {\n                return null;\n            }\n        }\n        return this._sortVector;\n    }\n    async *[Symbol.asyncIterator]() {\n        try {\n            while(true){\n                const doc = await this.next();\n                if (doc === null) {\n                    break;\n                }\n                yield doc;\n            }\n        } finally{\n            this.close();\n        }\n    }\n    async forEach(consumer) {\n        for await (const doc of this){\n            if (consumer(doc) === false) {\n                break;\n            }\n        }\n    }\n    async toArray() {\n        const docs = [];\n        for await (const doc of this){\n            docs.push(doc);\n        }\n        return docs;\n    }\n    close() {\n        this._state = 2;\n        this._buffer = [];\n    }\n    _assertUninitialized() {\n        if (this._state !== 0) {\n            throw new data_api_1.CursorIsStartedError(\"Cursor is already initialized/in use; cannot perform options modification. Rewind or clone the cursor.\");\n        }\n    }\n    async _next(raw) {\n        if (this._state === 2) {\n            return null;\n        }\n        do {\n            const doc = this._buffer.shift();\n            if (doc) {\n                try {\n                    return !raw && this._mapping ? this._mapping(doc) : doc;\n                } catch (err) {\n                    this.close();\n                    throw err;\n                }\n            }\n            if (this._nextPageState === null) {\n                return null;\n            }\n            try {\n                await this._getMore();\n            } catch (err) {\n                this.close();\n                throw err;\n            }\n        }while (this._buffer.length !== 0);\n        return null;\n    }\n    async _getMore() {\n        this._state = 1;\n        const options = {};\n        if (this._options.limit !== Infinity) {\n            options.limit = this._options.limit;\n        }\n        if (this._nextPageState) {\n            options.pageState = this._nextPageState;\n        }\n        if (this._options.skip) {\n            options.skip = this._options.skip;\n        }\n        if (this._options.includeSimilarity) {\n            options.includeSimilarity = this._options.includeSimilarity;\n        }\n        if (this._options.includeSortVector) {\n            options.includeSortVector = this._options.includeSortVector;\n        }\n        const command = {\n            find: {\n                filter: this._filter\n            }\n        };\n        if (this._options.sort) {\n            command.find.sort = this._options.sort;\n        }\n        if (this._options.projection) {\n            command.find.projection = this._options.projection;\n        }\n        if (Object.keys(options).length > 0) {\n            command.find.options = options;\n        }\n        const resp = await this._httpClient.executeCommand(command, {});\n        this._nextPageState = resp.data?.nextPageState || null;\n        this._buffer = resp.data?.documents ?? [];\n        this._sortVector ?? (this._sortVector = resp.status?.sortVector);\n        this._options.includeSortVector = false;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js":
/*!****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/db.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Db_defaultOpts, _Db_token, _Db_httpClient, _Db_endpoint;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Db = void 0;\nexports.mkDb = mkDb;\nexports.validateDbOpts = validateDbOpts;\nconst data_api_1 = __webpack_require__(/*! ../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst astra_db_admin_1 = __webpack_require__(/*! ../devops/astra-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst data_api_db_admin_1 = __webpack_require__(/*! ../devops/data-api-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/data-api-db-admin.js\");\nclass Db {\n    constructor(endpoint, rootOpts, dbOpts){\n        _Db_defaultOpts.set(this, void 0);\n        _Db_token.set(this, void 0);\n        _Db_httpClient.set(this, void 0);\n        _Db_endpoint.set(this, void 0);\n        Object.defineProperty(this, \"_keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        __classPrivateFieldSet(this, _Db_defaultOpts, rootOpts, \"f\");\n        __classPrivateFieldSet(this, _Db_token, common_1.TokenProvider.parseToken(dbOpts?.token ?? rootOpts.dbOptions.token), \"f\");\n        const combinedDbOpts = {\n            ...rootOpts.dbOptions,\n            ...dbOpts\n        };\n        this._keyspace = {\n            ref: rootOpts.environment === \"astra\" ? (0, common_1.resolveKeyspace)(combinedDbOpts) ?? api_1.DEFAULT_KEYSPACE : (0, common_1.resolveKeyspace)(combinedDbOpts)\n        };\n        __classPrivateFieldSet(this, _Db_httpClient, new api_1.DataAPIHttpClient({\n            baseUrl: endpoint,\n            tokenProvider: __classPrivateFieldGet(this, _Db_token, \"f\"),\n            embeddingHeaders: data_api_1.EmbeddingHeadersProvider.parseHeaders(null),\n            baseApiPath: combinedDbOpts.dataApiPath || api_1.DEFAULT_DATA_API_PATHS[rootOpts.environment],\n            emitter: rootOpts.emitter,\n            monitorCommands: combinedDbOpts.monitorCommands,\n            fetchCtx: rootOpts.fetchCtx,\n            keyspace: this._keyspace,\n            userAgent: rootOpts.userAgent,\n            emissionStrategy: api_1.EmissionStrategy.Normal\n        }), \"f\");\n        this._id = (0, utils_1.extractDbIdFromUrl)(endpoint);\n        __classPrivateFieldSet(this, _Db_endpoint, endpoint, \"f\");\n    }\n    get keyspace() {\n        if (!this._keyspace.ref) {\n            throw new Error(\"No keyspace set for DB (can't do db.keyspace, or perform any operation requiring it). Use `db.useKeyspace`, or pass the keyspace as an option parameter explicitly.\");\n        }\n        return this._keyspace.ref;\n    }\n    get namespace() {\n        if (!this._keyspace.ref) {\n            throw new Error(\"No keyspace set for DB (can't do db.namespace, or perform any operation requiring it). Use `db.useKeyspace`, or pass the keyspace as an option parameter explicitly.\");\n        }\n        return this._keyspace.ref;\n    }\n    get id() {\n        if (!this._id) {\n            throw new Error(\"Non-Astra databases do not have an appropriate ID\");\n        }\n        return this._id;\n    }\n    useKeyspace(keyspace) {\n        this._keyspace.ref = keyspace;\n    }\n    useNamespace(keyspace) {\n        this._keyspace.ref = keyspace;\n    }\n    admin(options) {\n        const environment = options?.environment ?? \"astra\";\n        (0, common_1.validateDataAPIEnv)(environment);\n        if (__classPrivateFieldGet(this, _Db_defaultOpts, \"f\").environment !== environment) {\n            throw new Error(\"Mismatching environment—environment option is not the same as set in the DataAPIClient\");\n        }\n        if (environment === \"astra\") {\n            return new astra_db_admin_1.AstraDbAdmin(this, __classPrivateFieldGet(this, _Db_defaultOpts, \"f\"), options, __classPrivateFieldGet(this, _Db_token, \"f\"), __classPrivateFieldGet(this, _Db_endpoint, \"f\"));\n        }\n        return new data_api_db_admin_1.DataAPIDbAdmin(this, __classPrivateFieldGet(this, _Db_httpClient, \"f\"), options);\n    }\n    async info(options) {\n        return await this.admin().info(options).then((i)=>i.info);\n    }\n    collection(name, options) {\n        return new data_api_1.Collection(this, __classPrivateFieldGet(this, _Db_httpClient, \"f\"), name, options);\n    }\n    async collections(options) {\n        const collections = await this.listCollections({\n            keyspace: (0, common_1.resolveKeyspace)(options),\n            maxTimeMS: options?.maxTimeMS,\n            nameOnly: true\n        });\n        return collections.map((c)=>this.collection(c, options));\n    }\n    async createCollection(collectionName, options) {\n        const command = {\n            createCollection: {\n                name: collectionName,\n                options: {\n                    defaultId: options?.defaultId,\n                    indexing: options?.indexing,\n                    vector: options?.vector\n                }\n            }\n        };\n        const timeoutManager = __classPrivateFieldGet(this, _Db_httpClient, \"f\").timeoutManager(options?.maxTimeMS);\n        const keyspace = (0, common_1.resolveKeyspace)(options) ?? this.keyspace;\n        if (options?.checkExists !== false) {\n            const collections = await this.listCollections({\n                keyspace: keyspace,\n                maxTimeMS: timeoutManager.msRemaining()\n            });\n            if (collections.some((c)=>c.name === collectionName)) {\n                throw new data_api_1.CollectionAlreadyExistsError((0, common_1.resolveKeyspace)(options) ?? this.keyspace, collectionName);\n            }\n        }\n        await __classPrivateFieldGet(this, _Db_httpClient, \"f\").executeCommand(command, {\n            keyspace: keyspace,\n            timeoutManager\n        });\n        return this.collection(collectionName, options);\n    }\n    async dropCollection(name, options) {\n        const command = {\n            deleteCollection: {\n                name\n            }\n        };\n        const resp = await __classPrivateFieldGet(this, _Db_httpClient, \"f\").executeCommand(command, options);\n        return resp.status?.ok === 1;\n    }\n    async listCollections(options) {\n        const command = {\n            findCollections: {\n                options: {\n                    explain: options?.nameOnly !== true\n                }\n            }\n        };\n        const resp = await __classPrivateFieldGet(this, _Db_httpClient, \"f\").executeCommand(command, options);\n        return resp.status.collections;\n    }\n    async command(command, options) {\n        return await __classPrivateFieldGet(this, _Db_httpClient, \"f\").executeCommand(command, options);\n    }\n    get _httpClient() {\n        return __classPrivateFieldGet(this, _Db_httpClient, \"f\");\n    }\n}\nexports.Db = Db;\n_Db_defaultOpts = new WeakMap(), _Db_token = new WeakMap(), _Db_httpClient = new WeakMap(), _Db_endpoint = new WeakMap();\nfunction mkDb(rootOpts, endpointOrId, regionOrOptions, maybeOptions) {\n    const dbOpts = typeof regionOrOptions === \"string\" ? maybeOptions : regionOrOptions;\n    validateDbOpts(dbOpts);\n    if (typeof regionOrOptions === \"string\" && (endpointOrId.startsWith(\"https://\") || endpointOrId.startsWith(\"http://\"))) {\n        throw new Error('Unexpected db() argument: database id can\\'t start with \"http(s)://\". Did you mean to call `.db(endpoint, { keyspace })`?');\n    }\n    const endpoint = typeof regionOrOptions === \"string\" ? \"https://\" + endpointOrId + \"-\" + regionOrOptions + \".apps.astra.datastax.com\" : endpointOrId;\n    return new Db(endpoint, rootOpts, dbOpts);\n}\nfunction validateDbOpts(opts) {\n    (0, utils_1.validateOption)(\"dbOptions\", opts, \"object\");\n    if (!opts) {\n        return;\n    }\n    for (const prop of [\n        \"keyspace\",\n        \"namespace\"\n    ]){\n        (0, utils_1.validateOption)(`dbOptions.${prop}`, opts[prop], \"string\", false, (keyspace)=>{\n            if (!keyspace.match(/^\\w{1,48}$/)) {\n                throw new Error(`Invalid ${prop} option; expected a string of 1-48 alphanumeric characters`);\n            }\n        });\n    }\n    (0, utils_1.validateOption)(\"dbOptions.monitorCommands\", opts.monitorCommands, \"boolean\");\n    (0, utils_1.validateOption)(\"dbOptions.dataApiPath\", opts.dataApiPath, \"string\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/aws-embedding-headers-provider.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/aws-embedding-headers-provider.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AWSEmbeddingHeadersProvider_headers;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AWSEmbeddingHeadersProvider = void 0;\nconst embedding_headers_provider_1 = __webpack_require__(/*! ../../data-api/embedding-providers/embedding-headers-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js\");\nclass AWSEmbeddingHeadersProvider extends embedding_headers_provider_1.EmbeddingHeadersProvider {\n    constructor(accessKeyId, secretAccessKey){\n        super();\n        _AWSEmbeddingHeadersProvider_headers.set(this, void 0);\n        __classPrivateFieldSet(this, _AWSEmbeddingHeadersProvider_headers, {\n            \"x-embedding-access-id\": accessKeyId,\n            \"x-embedding-secret-id\": secretAccessKey\n        }, \"f\");\n    }\n    getHeaders() {\n        return __classPrivateFieldGet(this, _AWSEmbeddingHeadersProvider_headers, \"f\");\n    }\n}\nexports.AWSEmbeddingHeadersProvider = AWSEmbeddingHeadersProvider;\n_AWSEmbeddingHeadersProvider_headers = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9hd3MtZW1iZWRkaW5nLWhlYWRlcnMtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLHlCQUF5QixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUMzRyxJQUFJRCxTQUFTLEtBQUssTUFBTSxJQUFJRSxVQUFVO0lBQ3RDLElBQUlGLFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBTyxTQUFVLE1BQU1ELEVBQUVHLElBQUksQ0FBQ1AsVUFBVUUsU0FBU0UsSUFBSUEsRUFBRUYsS0FBSyxHQUFHQSxRQUFRRCxNQUFNTyxHQUFHLENBQUNSLFVBQVVFLFFBQVNBO0FBQ3hHO0FBQ0EsSUFBSU8seUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQztJQUNwRyxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFlBQVlJLElBQUlBLEVBQUVGLEtBQUssR0FBR0QsTUFBTVMsR0FBRyxDQUFDVjtBQUN4RjtBQUNBLElBQUlXO0FBQ0pDLDhDQUE2QztJQUFFVixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEWSxtQ0FBbUMsR0FBRyxLQUFLO0FBQzNDLE1BQU1FLCtCQUErQkMsbUJBQU9BLENBQUMsaUxBQStEO0FBQzVHLE1BQU1GLG9DQUFvQ0MsNkJBQTZCRSx3QkFBd0I7SUFDdkZDLFlBQVlDLFdBQVcsRUFBRUMsZUFBZSxDQUFFO1FBQzFDLEtBQUs7UUFDTFYscUNBQXFDSCxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDcERULHVCQUF1QixJQUFJLEVBQUVZLHNDQUFzQztZQUMvRCx5QkFBeUJTO1lBQ3pCLHlCQUF5QkM7UUFDN0IsR0FBRztJQUNQO0lBQ0lDLGFBQWE7UUFDYixPQUFPYix1QkFBdUIsSUFBSSxFQUFFRSxzQ0FBc0M7SUFDOUU7QUFDSjtBQUNBRyxtQ0FBbUMsR0FBR0M7QUFDdENKLHVDQUF1QyxJQUFJWSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL2VtYmVkZGluZy1wcm92aWRlcnMvYXdzLWVtYmVkZGluZy1oZWFkZXJzLXByb3ZpZGVyLmpzPzYyYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQVdTRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyX2hlYWRlcnM7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFXU0VtYmVkZGluZ0hlYWRlcnNQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGVtYmVkZGluZ19oZWFkZXJzX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctaGVhZGVycy1wcm92aWRlclwiKTtcbmNsYXNzIEFXU0VtYmVkZGluZ0hlYWRlcnNQcm92aWRlciBleHRlbmRzIGVtYmVkZGluZ19oZWFkZXJzX3Byb3ZpZGVyXzEuRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyIHtcbiAgICAgICAgY29uc3RydWN0b3IoYWNjZXNzS2V5SWQsIHNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfQVdTRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyX2hlYWRlcnMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FXU0VtYmVkZGluZ0hlYWRlcnNQcm92aWRlcl9oZWFkZXJzLCB7XG4gICAgICAgICAgICAneC1lbWJlZGRpbmctYWNjZXNzLWlkJzogYWNjZXNzS2V5SWQsXG4gICAgICAgICAgICAneC1lbWJlZGRpbmctc2VjcmV0LWlkJzogc2VjcmV0QWNjZXNzS2V5LFxuICAgICAgICB9LCBcImZcIik7XG4gICAgfVxuICAgICAgICBnZXRIZWFkZXJzKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQVdTRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyX2hlYWRlcnMsIFwiZlwiKTtcbiAgICB9XG59XG5leHBvcnRzLkFXU0VtYmVkZGluZ0hlYWRlcnNQcm92aWRlciA9IEFXU0VtYmVkZGluZ0hlYWRlcnNQcm92aWRlcjtcbl9BV1NFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXJfaGVhZGVycyA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfQVdTRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyX2hlYWRlcnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJBV1NFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIiLCJlbWJlZGRpbmdfaGVhZGVyc19wcm92aWRlcl8xIiwicmVxdWlyZSIsIkVtYmVkZGluZ0hlYWRlcnNQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYWNjZXNzS2V5SWQiLCJzZWNyZXRBY2Nlc3NLZXkiLCJnZXRIZWFkZXJzIiwiV2Vha01hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/aws-embedding-headers-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-api-key-header-provider.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-api-key-header-provider.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _EmbeddingAPIKeyHeaderProvider_headers;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EmbeddingAPIKeyHeaderProvider = void 0;\nconst embedding_headers_provider_1 = __webpack_require__(/*! ../../data-api/embedding-providers/embedding-headers-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js\");\nclass EmbeddingAPIKeyHeaderProvider extends embedding_headers_provider_1.EmbeddingHeadersProvider {\n    constructor(apiKey){\n        super();\n        _EmbeddingAPIKeyHeaderProvider_headers.set(this, void 0);\n        __classPrivateFieldSet(this, _EmbeddingAPIKeyHeaderProvider_headers, apiKey ? {\n            \"x-embedding-api-key\": apiKey\n        } : {}, \"f\");\n    }\n    getHeaders() {\n        return __classPrivateFieldGet(this, _EmbeddingAPIKeyHeaderProvider_headers, \"f\");\n    }\n}\nexports.EmbeddingAPIKeyHeaderProvider = EmbeddingAPIKeyHeaderProvider;\n_EmbeddingAPIKeyHeaderProvider_headers = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctYXBpLWtleS1oZWFkZXItcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLHlCQUF5QixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUMzRyxJQUFJRCxTQUFTLEtBQUssTUFBTSxJQUFJRSxVQUFVO0lBQ3RDLElBQUlGLFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBTyxTQUFVLE1BQU1ELEVBQUVHLElBQUksQ0FBQ1AsVUFBVUUsU0FBU0UsSUFBSUEsRUFBRUYsS0FBSyxHQUFHQSxRQUFRRCxNQUFNTyxHQUFHLENBQUNSLFVBQVVFLFFBQVNBO0FBQ3hHO0FBQ0EsSUFBSU8seUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQztJQUNwRyxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNQLFlBQVlJLElBQUlBLEVBQUVGLEtBQUssR0FBR0QsTUFBTVMsR0FBRyxDQUFDVjtBQUN4RjtBQUNBLElBQUlXO0FBQ0pDLDhDQUE2QztJQUFFVixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEWSxxQ0FBcUMsR0FBRyxLQUFLO0FBQzdDLE1BQU1FLCtCQUErQkMsbUJBQU9BLENBQUMsaUxBQStEO0FBQzVHLE1BQU1GLHNDQUFzQ0MsNkJBQTZCRSx3QkFBd0I7SUFDekZDLFlBQVlDLE1BQU0sQ0FBRTtRQUNwQixLQUFLO1FBQ0xULHVDQUF1Q0gsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLO1FBQ3REVCx1QkFBdUIsSUFBSSxFQUFFWSx3Q0FBd0MsU0FDL0Q7WUFBRSx1QkFBdUJTO1FBQU8sSUFDaEMsQ0FBQyxHQUFHO0lBQ2Q7SUFDSUMsYUFBYTtRQUNiLE9BQU9aLHVCQUF1QixJQUFJLEVBQUVFLHdDQUF3QztJQUNoRjtBQUNKO0FBQ0FHLHFDQUFxQyxHQUFHQztBQUN4Q0oseUNBQXlDLElBQUlXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctYXBpLWtleS1oZWFkZXItcHJvdmlkZXIuanM/MWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9FbWJlZGRpbmdBUElLZXlIZWFkZXJQcm92aWRlcl9oZWFkZXJzO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbWJlZGRpbmdBUElLZXlIZWFkZXJQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGVtYmVkZGluZ19oZWFkZXJzX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctaGVhZGVycy1wcm92aWRlclwiKTtcbmNsYXNzIEVtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyIGV4dGVuZHMgZW1iZWRkaW5nX2hlYWRlcnNfcHJvdmlkZXJfMS5FbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIge1xuICAgICAgICBjb25zdHJ1Y3RvcihhcGlLZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX0VtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyX2hlYWRlcnMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0VtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyX2hlYWRlcnMsIChhcGlLZXkpXG4gICAgICAgICAgICA/IHsgJ3gtZW1iZWRkaW5nLWFwaS1rZXknOiBhcGlLZXkgfVxuICAgICAgICAgICAgOiB7fSwgXCJmXCIpO1xuICAgIH1cbiAgICAgICAgZ2V0SGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0VtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyX2hlYWRlcnMsIFwiZlwiKTtcbiAgICB9XG59XG5leHBvcnRzLkVtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyID0gRW1iZWRkaW5nQVBJS2V5SGVhZGVyUHJvdmlkZXI7XG5fRW1iZWRkaW5nQVBJS2V5SGVhZGVyUHJvdmlkZXJfaGVhZGVycyA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfRW1iZWRkaW5nQVBJS2V5SGVhZGVyUHJvdmlkZXJfaGVhZGVycyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIkVtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyIiwiZW1iZWRkaW5nX2hlYWRlcnNfcHJvdmlkZXJfMSIsInJlcXVpcmUiLCJFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsImFwaUtleSIsImdldEhlYWRlcnMiLCJXZWFrTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-api-key-header-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EmbeddingHeadersProvider = void 0;\nconst common_1 = __webpack_require__(/*! ../../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst embedding_providers_1 = __webpack_require__(/*! ../../data-api/embedding-providers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js\");\nclass EmbeddingHeadersProvider {\n    static parseHeaders(token) {\n        if (typeof token === \"string\" || (0, common_1.isNullish)(token)) {\n            return new embedding_providers_1.EmbeddingAPIKeyHeaderProvider(token);\n        }\n        if (token instanceof EmbeddingHeadersProvider) {\n            return token;\n        }\n        throw new TypeError(\"Expected embeddingApiKey to be type string | EmbeddingHeadersProvider | nullish\");\n    }\n}\nexports.EmbeddingHeadersProvider = EmbeddingHeadersProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctaGVhZGVycy1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHFGQUFjO0FBQ3ZDLE1BQU1DLHdCQUF3QkQsbUJBQU9BLENBQUMsaUlBQW9DO0FBQzFFLE1BQU1GO0lBQ0UsT0FBT0ksYUFBYUMsS0FBSyxFQUFFO1FBQzNCLElBQUksT0FBT0EsVUFBVSxZQUFZLENBQUMsR0FBR0osU0FBU0ssU0FBUyxFQUFFRCxRQUFRO1lBQzdELE9BQU8sSUFBSUYsc0JBQXNCSSw2QkFBNkIsQ0FBQ0Y7UUFDbkU7UUFDQSxJQUFJQSxpQkFBaUJMLDBCQUEwQjtZQUMzQyxPQUFPSztRQUNYO1FBQ0EsTUFBTSxJQUFJRyxVQUFVO0lBQ3hCO0FBQ0o7QUFDQVYsZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9lbWJlZGRpbmctaGVhZGVycy1wcm92aWRlci5qcz9lYjYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVtYmVkZGluZ0hlYWRlcnNQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vblwiKTtcbmNvbnN0IGVtYmVkZGluZ19wcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhLWFwaS9lbWJlZGRpbmctcHJvdmlkZXJzXCIpO1xuY2xhc3MgRW1iZWRkaW5nSGVhZGVyc1Byb3ZpZGVyIHtcbiAgICAgICAgc3RhdGljIHBhcnNlSGVhZGVycyh0b2tlbikge1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJyB8fCAoMCwgY29tbW9uXzEuaXNOdWxsaXNoKSh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZW1iZWRkaW5nX3Byb3ZpZGVyc18xLkVtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBlbWJlZGRpbmdBcGlLZXkgdG8gYmUgdHlwZSBzdHJpbmcgfCBFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIgfCBudWxsaXNoJyk7XG4gICAgfVxufVxuZXhwb3J0cy5FbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIgPSBFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFbWJlZGRpbmdIZWFkZXJzUHJvdmlkZXIiLCJjb21tb25fMSIsInJlcXVpcmUiLCJlbWJlZGRpbmdfcHJvdmlkZXJzXzEiLCJwYXJzZUhlYWRlcnMiLCJ0b2tlbiIsImlzTnVsbGlzaCIsIkVtYmVkZGluZ0FQSUtleUhlYWRlclByb3ZpZGVyIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./aws-embedding-headers-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/aws-embedding-headers-provider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./embedding-api-key-header-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-api-key-header-provider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./embedding-headers-provider */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/embedding-headers-provider.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyx3SkFBa0MsR0FBR047QUFDMURELGFBQWFPLG1CQUFPQSxDQUFDLDhKQUFxQyxHQUFHTjtBQUM3REQsYUFBYU8sbUJBQU9BLENBQUMsZ0pBQThCLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZW1iZWRkaW5nLXByb3ZpZGVycy9pbmRleC5qcz85MTE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hd3MtZW1iZWRkaW5nLWhlYWRlcnMtcHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VtYmVkZGluZy1hcGkta2V5LWhlYWRlci1wcm92aWRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW1iZWRkaW5nLWhlYWRlcnMtcHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.mkRespErrorFromResponses = exports.mkRespErrorFromResponse = exports.BulkWriteError = exports.UpdateManyError = exports.DeleteManyError = exports.InsertManyError = exports.CumulativeDataAPIError = exports.DataAPIResponseError = exports.CollectionAlreadyExistsError = exports.CollectionNotFoundError = exports.CursorIsStartedError = exports.TooManyDocumentsToCountError = exports.DataAPITimeoutError = exports.DataAPIHttpError = exports.DataAPIError = void 0;\nclass DataAPIError extends Error {\n}\nexports.DataAPIError = DataAPIError;\nclass DataAPIHttpError extends DataAPIError {\n    constructor(resp){\n        super(`HTTP error (${resp.status}): ${resp.body ? resp.body : resp.statusText}`);\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.status = resp.status;\n        this.body = resp.body;\n        this.raw = resp;\n        this.name = \"DataAPIHttpError\";\n    }\n}\nexports.DataAPIHttpError = DataAPIHttpError;\nclass DataAPITimeoutError extends DataAPIError {\n    constructor(timeout){\n        super(`Command timed out after ${timeout}ms`);\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = timeout;\n        this.name = \"DataAPITimeoutError\";\n    }\n}\nexports.DataAPITimeoutError = DataAPITimeoutError;\nclass TooManyDocumentsToCountError extends DataAPIError {\n    constructor(limit, hitServerLimit){\n        const message = hitServerLimit ? `Too many documents to count (server limit of ${limit} reached)` : `Too many documents to count (provided limit is ${limit})`;\n        super(message);\n        Object.defineProperty(this, \"limit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hitServerLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.limit = limit;\n        this.hitServerLimit = hitServerLimit;\n        this.name = \"TooManyDocumentsToCountError\";\n    }\n}\nexports.TooManyDocumentsToCountError = TooManyDocumentsToCountError;\nclass CursorIsStartedError extends DataAPIError {\n    constructor(message){\n        super(message);\n        this.name = \"CursorIsStartedError\";\n    }\n}\nexports.CursorIsStartedError = CursorIsStartedError;\nclass CollectionNotFoundError extends DataAPIError {\n    constructor(keyspace, collectionName){\n        super(`Collection '${keyspace}.${collectionName}' not found`);\n        Object.defineProperty(this, \"keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyspace = this.namespace = keyspace;\n        this.collectionName = collectionName;\n        this.name = \"CollectionNotFoundError\";\n    }\n}\nexports.CollectionNotFoundError = CollectionNotFoundError;\nclass CollectionAlreadyExistsError extends DataAPIError {\n    constructor(keyspace, collectionName){\n        super(`Collection '${keyspace}.${collectionName}' already exists`);\n        Object.defineProperty(this, \"keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyspace = this.namespace = keyspace;\n        this.collectionName = collectionName;\n        this.name = \"CollectionAlreadyExistsError\";\n    }\n}\nexports.CollectionAlreadyExistsError = CollectionAlreadyExistsError;\nclass DataAPIResponseError extends DataAPIError {\n    constructor(detailedErrDescriptors){\n        const errorDescriptors = detailedErrDescriptors.flatMap((d)=>d.errorDescriptors);\n        const message = (errorDescriptors[0]?.message) ? `${errorDescriptors[0].message}${errorDescriptors.length > 1 ? ` (+ ${errorDescriptors.length - 1} more errors)` : \"\"}` : `Something went wrong (${errorDescriptors.length} errors)`;\n        super(message);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"errorDescriptors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"detailedErrorDescriptors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = message;\n        this.errorDescriptors = errorDescriptors;\n        this.detailedErrorDescriptors = detailedErrDescriptors;\n        this.name = \"DataAPIResponseError\";\n    }\n}\nexports.DataAPIResponseError = DataAPIResponseError;\nclass CumulativeDataAPIError extends DataAPIResponseError {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"partialResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n}\nexports.CumulativeDataAPIError = CumulativeDataAPIError;\nclass InsertManyError extends CumulativeDataAPIError {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InsertManyError\"\n        });\n    //\n    //         // declare public readonly documentResponses: InsertManyDocumentResponse<SomeDoc>[];\n    //\n    //         // declare public readonly failedCount: number;\n    }\n}\nexports.InsertManyError = InsertManyError;\nclass DeleteManyError extends CumulativeDataAPIError {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"DeleteManyError\"\n        });\n    }\n}\nexports.DeleteManyError = DeleteManyError;\nclass UpdateManyError extends CumulativeDataAPIError {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"UpdateManyError\"\n        });\n    }\n}\nexports.UpdateManyError = UpdateManyError;\nclass BulkWriteError extends CumulativeDataAPIError {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"BulkWriteError\"\n        });\n    }\n}\nexports.BulkWriteError = BulkWriteError;\nconst mkRespErrorFromResponse = (err, command, raw, attributes)=>{\n    return (0, exports.mkRespErrorFromResponses)(err, [\n        command\n    ], [\n        raw\n    ], attributes);\n};\nexports.mkRespErrorFromResponse = mkRespErrorFromResponse;\nconst mkRespErrorFromResponses = (err, commands, raw, attributes)=>{\n    const detailedErrDescriptors = [];\n    for(let i = 0, n = commands.length; i < n; i++){\n        const command = commands[i], response = raw[i];\n        if (response.errors) {\n            const descriptors = response.errors.map((error)=>{\n                const attributes = {\n                    ...error\n                };\n                delete attributes.message;\n                delete attributes.errorCode;\n                return {\n                    errorCode: error.errorCode,\n                    message: error.message,\n                    attributes\n                };\n            });\n            const detailedErrDescriptor = {\n                errorDescriptors: descriptors,\n                command,\n                rawResponse: response\n            };\n            detailedErrDescriptors.push(detailedErrDescriptor);\n        }\n    }\n    const instance = new err(detailedErrDescriptors);\n    Object.assign(instance, attributes ?? {});\n    return instance;\n};\nexports.mkRespErrorFromResponses = mkRespErrorFromResponses;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandEvent = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nclass CommandEvent {\n    constructor(info){\n        Object.defineProperty(this, \"command\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyspace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"commandName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.command = info.command;\n        this.keyspace = this.namespace = info.keyspace || api_1.DEFAULT_KEYSPACE;\n        this.collection = info.collection;\n        this.commandName = Object.keys(info.command)[0];\n        this.url = info.url;\n    }\n}\nexports.CommandEvent = CommandEvent;\nclass CommandStartedEvent extends CommandEvent {\n    constructor(info){\n        super(info);\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = info.timeoutManager.ms;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\nclass CommandSucceededEvent extends CommandEvent {\n    constructor(info, reply, warnings, started){\n        super(info);\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resp\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"warnings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.warnings = warnings;\n        this.resp = reply;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\nclass CommandFailedEvent extends CommandEvent {\n    constructor(info, error, started){\n        super(info);\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.error = error;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ObjectId = exports.UUID = void 0;\nconst uuidv7_1 = __webpack_require__(/*! uuidv7 */ \"(rsc)/./node_modules/uuidv7/dist/index.cjs\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst uuidRegex = new RegExp(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\nclass UUID {\n    constructor(uuid, validate = true){\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (validate) {\n            if (typeof uuid !== \"string\") {\n                throw new Error(\"UUID must be a string\");\n            }\n            if (uuid.length !== 36 || !uuidRegex.test(uuid)) {\n                throw new Error(\"UUID must be a 36-character hex string\");\n            }\n        }\n        Object.defineProperty(this, \"_raw\", {\n            value: uuid.toLowerCase(),\n            writable: false\n        });\n        Object.defineProperty(this, \"version\", {\n            value: parseInt(this._raw[14], 16),\n            writable: false\n        });\n    }\n    equals(other) {\n        if (typeof other === \"string\") {\n            return this._raw === other;\n        }\n        if (other instanceof UUID) {\n            return this._raw === other._raw;\n        }\n        return false;\n    }\n    getTimestamp() {\n        return timestampFromUUID(this);\n    }\n    toString() {\n        return this._raw;\n    }\n    static v4() {\n        return new UUID((0, uuidv7_1.uuidv4)(), false);\n    }\n    static v7() {\n        return new UUID((0, uuidv7_1.uuidv7)(), false);\n    }\n    inspect() {\n        return `UUID(\"${this.toString()}\")`;\n    }\n    toJSON() {\n        return {\n            $uuid: this.toString()\n        };\n    }\n}\nexports.UUID = UUID;\nconst objectIdRegex = new RegExp(\"^[0-9a-fA-F]{24}$\");\nclass ObjectId {\n    constructor(id, validate = true){\n        Object.defineProperty(this, \"_raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (validate) {\n            if (typeof id === \"string\") {\n                if (id.length !== 24 || !objectIdRegex.test(id)) {\n                    throw new Error(\"ObjectId must be a 24-character hex string\");\n                }\n            } else if (typeof id !== \"number\" && !(0, common_1.isNullish)(id)) {\n                throw new Error(\"ObjectId must be a string, number, or nullish\");\n            }\n        }\n        Object.defineProperty(this, \"_raw\", {\n            value: typeof id === \"string\" ? id.toLowerCase() : genObjectId(id),\n            writable: false\n        });\n    }\n    equals(other) {\n        if (typeof other === \"string\") {\n            return this._raw.localeCompare(other, undefined, {\n                sensitivity: \"accent\"\n            }) === 0;\n        }\n        if (other instanceof ObjectId) {\n            return this._raw.localeCompare(other._raw, undefined, {\n                sensitivity: \"accent\"\n            }) === 0;\n        }\n        return false;\n    }\n    getTimestamp() {\n        const time = parseInt(this._raw.slice(0, 8), 16);\n        return new Date(~~time * 1000);\n    }\n    toString() {\n        return this._raw;\n    }\n    inspect() {\n        return `ObjectId(\"${this.toString()}\")`;\n    }\n    toJSON() {\n        return {\n            $objectId: this.toString()\n        };\n    }\n}\nexports.ObjectId = ObjectId;\nconst RAND_ID = ~~(Math.random() * 0xFFFFFF);\nconst PID = (typeof process === \"undefined\" || typeof process.pid !== \"number\" ? ~~(Math.random() * 100000) : process.pid) % 0xFFFF;\nconst hexTable = Array.from({\n    length: 256\n}, (_, i)=>{\n    return (i <= 15 ? \"0\" : \"\") + i.toString(16);\n});\nlet index = ~~(Math.random() * 0xFFFFFF);\nfunction genObjectId(time) {\n    time ?? (time = ~~(Date.now() / 1000));\n    time = time % 0xFFFFFFFF;\n    index = (index + 1) % 0xFFFFFF;\n    let hexString = \"\";\n    hexString += hexTable[time >> 24 & 0xFF];\n    hexString += hexTable[time >> 16 & 0xFF];\n    hexString += hexTable[time >> 8 & 0xFF];\n    hexString += hexTable[time & 0xFF];\n    hexString += hexTable[RAND_ID >> 16 & 0xFF];\n    hexString += hexTable[RAND_ID >> 8 & 0xFF];\n    hexString += hexTable[RAND_ID & 0xFF];\n    hexString += hexTable[PID >> 8 & 0xFF];\n    hexString += hexTable[PID & 0xFF];\n    hexString += hexTable[index >> 16 & 0xFF];\n    hexString += hexTable[index >> 8 & 0xFF];\n    hexString += hexTable[index & 0xFF];\n    return hexString;\n}\nfunction timestampFromUUID(uuid) {\n    if (uuid.version !== 7) {\n        return undefined;\n    }\n    const timestampBytes = new Uint8Array(8);\n    timestampBytes.set(new Uint8Array(uuidv7_1.UUID.parse(uuid.toString()).bytes.buffer.slice(0, 6)), 2);\n    const timestampMs = new DataView(timestampBytes.buffer).getBigUint64(0);\n    return new Date(Number(timestampMs));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection DuplicatedCode\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIHttpError = exports.CollectionNotFoundError = exports.UpdateManyError = exports.CursorIsStartedError = exports.BulkWriteError = exports.InsertManyError = exports.TooManyDocumentsToCountError = exports.DeleteManyError = exports.CollectionAlreadyExistsError = exports.DataAPIError = exports.CumulativeDataAPIError = exports.DataAPIResponseError = exports.DataAPITimeoutError = exports.Db = exports.FindCursor = exports.Collection = void 0;\nvar collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({\n    enumerable: true,\n    get: function() {\n        return collection_1.Collection;\n    }\n}));\nvar cursor_1 = __webpack_require__(/*! ./cursor */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({\n    enumerable: true,\n    get: function() {\n        return cursor_1.FindCursor;\n    }\n}));\nvar db_1 = __webpack_require__(/*! ./db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\nObject.defineProperty(exports, \"Db\", ({\n    enumerable: true,\n    get: function() {\n        return db_1.Db;\n    }\n}));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\nObject.defineProperty(exports, \"DataAPITimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.DataAPITimeoutError;\n    }\n}));\nObject.defineProperty(exports, \"DataAPIResponseError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.DataAPIResponseError;\n    }\n}));\nObject.defineProperty(exports, \"CumulativeDataAPIError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.CumulativeDataAPIError;\n    }\n}));\nObject.defineProperty(exports, \"DataAPIError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.DataAPIError;\n    }\n}));\nObject.defineProperty(exports, \"CollectionAlreadyExistsError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.CollectionAlreadyExistsError;\n    }\n}));\nObject.defineProperty(exports, \"DeleteManyError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.DeleteManyError;\n    }\n}));\nObject.defineProperty(exports, \"TooManyDocumentsToCountError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.TooManyDocumentsToCountError;\n    }\n}));\nObject.defineProperty(exports, \"InsertManyError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.InsertManyError;\n    }\n}));\nObject.defineProperty(exports, \"BulkWriteError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.BulkWriteError;\n    }\n}));\nObject.defineProperty(exports, \"CursorIsStartedError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.CursorIsStartedError;\n    }\n}));\nObject.defineProperty(exports, \"UpdateManyError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.UpdateManyError;\n    }\n}));\nObject.defineProperty(exports, \"CollectionNotFoundError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.CollectionNotFoundError;\n    }\n}));\nObject.defineProperty(exports, \"DataAPIHttpError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.DataAPIHttpError;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ids */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./embedding-providers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/embedding-providers/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./misc/bulk-write */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsNEdBQW1CLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvaW5kZXguanM/ZDQ5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzYy9idWxrLXdyaXRlXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection DuplicatedCode\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkWriteResult = void 0;\nclass BulkWriteResult {\n    constructor(deletedCount = 0, insertedCount = 0, matchedCount = 0, modifiedCount = 0, upsertedCount = 0, upsertedIds = {}, _raw = []){\n        Object.defineProperty(this, \"deletedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: deletedCount\n        });\n        Object.defineProperty(this, \"insertedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: insertedCount\n        });\n        Object.defineProperty(this, \"matchedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: matchedCount\n        });\n        Object.defineProperty(this, \"modifiedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: modifiedCount\n        });\n        Object.defineProperty(this, \"upsertedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: upsertedCount\n        });\n        Object.defineProperty(this, \"upsertedIds\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: upsertedIds\n        });\n        Object.defineProperty(this, \"_raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _raw\n        });\n    }\n    getRawResponse() {\n        return this._raw;\n    }\n    getUpsertedIdAt(index) {\n        return this.upsertedIds[index];\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvbWlzYy9idWxrLXdyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Qyw4QkFBOEI7QUFDOUJBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBRyxLQUFLO0FBQy9CLE1BQU1FO0lBQ0VDLFlBQ0FDLGVBQWUsQ0FBQyxFQUNoQkMsZ0JBQWdCLENBQUMsRUFDakJDLGVBQWUsQ0FBQyxFQUNoQkMsZ0JBQWdCLENBQUMsRUFDakJDLGdCQUFnQixDQUFDLEVBQ2pCQyxjQUFjLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUM3QlosT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENZLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZaLE9BQU9HO1FBQ1g7UUFDQU4sT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUI7WUFDekNZLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZaLE9BQU9JO1FBQ1g7UUFDQVAsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENZLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZaLE9BQU9LO1FBQ1g7UUFDQVIsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUI7WUFDekNZLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZaLE9BQU9NO1FBQ1g7UUFDQVQsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUI7WUFDekNZLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZaLE9BQU9PO1FBQ1g7UUFDQVYsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDWSxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWixPQUFPUTtRQUNYO1FBQ0FYLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ1ksWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlosT0FBT1M7UUFDWDtJQUNKO0lBQ0lJLGlCQUFpQjtRQUNqQixPQUFPLElBQUksQ0FBQ0osSUFBSTtJQUNwQjtJQUNJSyxnQkFBZ0JDLEtBQUssRUFBRTtRQUN2QixPQUFPLElBQUksQ0FBQ1AsV0FBVyxDQUFDTyxNQUFNO0lBQ2xDO0FBQ0o7QUFDQWhCLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL3R5cGVzL21pc2MvYnVsay13cml0ZS5qcz85OWJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBub2luc3BlY3Rpb24gRHVwbGljYXRlZENvZGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVsa1dyaXRlUmVzdWx0ID0gdm9pZCAwO1xuY2xhc3MgQnVsa1dyaXRlUmVzdWx0IHtcbiAgICAgICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRlbGV0ZWRDb3VudCA9IDAsIFxuICAgICAgICBpbnNlcnRlZENvdW50ID0gMCwgXG4gICAgICAgIG1hdGNoZWRDb3VudCA9IDAsIFxuICAgICAgICBtb2RpZmllZENvdW50ID0gMCwgXG4gICAgICAgIHVwc2VydGVkQ291bnQgPSAwLCBcbiAgICAgICAgdXBzZXJ0ZWRJZHMgPSB7fSwgX3JhdyA9IFtdKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlbGV0ZWRDb3VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZGVsZXRlZENvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnNlcnRlZENvdW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBpbnNlcnRlZENvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXRjaGVkQ291bnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG1hdGNoZWRDb3VudFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibW9kaWZpZWRDb3VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbW9kaWZpZWRDb3VudFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXBzZXJ0ZWRDb3VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdXBzZXJ0ZWRDb3VudFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXBzZXJ0ZWRJZHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVwc2VydGVkSWRzXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcmF3XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBfcmF3XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAgICAgZ2V0UmF3UmVzcG9uc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXc7XG4gICAgfVxuICAgICAgICBnZXRVcHNlcnRlZElkQXQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBzZXJ0ZWRJZHNbaW5kZXhdO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVsa1dyaXRlUmVzdWx0ID0gQnVsa1dyaXRlUmVzdWx0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQnVsa1dyaXRlUmVzdWx0IiwiY29uc3RydWN0b3IiLCJkZWxldGVkQ291bnQiLCJpbnNlcnRlZENvdW50IiwibWF0Y2hlZENvdW50IiwibW9kaWZpZWRDb3VudCIsInVwc2VydGVkQ291bnQiLCJ1cHNlcnRlZElkcyIsIl9yYXciLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJnZXRSYXdSZXNwb25zZSIsImdldFVwc2VydGVkSWRBdCIsImluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.normalizeSort = void 0;\nexports.extractDbIdFromUrl = extractDbIdFromUrl;\nexports.replaceAstraUrlIdAndRegion = replaceAstraUrlIdAndRegion;\nexports.validateOption = validateOption;\nfunction extractDbIdFromUrl(uri) {\n    return new URL(uri).hostname.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/)?.[0];\n}\nfunction replaceAstraUrlIdAndRegion(uri, id, region) {\n    const url = new URL(uri);\n    const parts = url.hostname.split(\".\");\n    parts[0] = id + \"-\" + region;\n    url.hostname = parts.join(\".\");\n    return url.toString().slice(0, -1);\n}\nfunction validateOption(name, obj, types, require = false, test) {\n    types = Array.isArray(types) ? types : [\n        types\n    ];\n    const typesString = `[${types.join(\", \")}]`;\n    if (obj === null || obj === undefined) {\n        if (require) {\n            throw new Error(`Missing required ${name}; expected a value of some type in ${typesString}`);\n        }\n        return;\n    }\n    if (!types.some((t)=>t === typeof obj)) {\n        throw new TypeError(`Invalid ${name}; expected a value of some type in ${typesString}, or undefined/null`);\n    }\n    test?.(obj);\n}\nconst normalizeSort = (sort)=>{\n    const ret = {};\n    for(const key in sort){\n        switch(sort[key]){\n            case 1:\n            case \"asc\":\n            case \"ascending\":\n                ret[key] = 1;\n                break;\n            case -1:\n            case \"desc\":\n            case \"descending\":\n                ret[key] = -1;\n                break;\n            default:\n                ret[key] = sort[key];\n        }\n    }\n    return ret;\n};\nexports.normalizeSort = normalizeSort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QkEsMEJBQTBCLEdBQUdHO0FBQzdCSCxrQ0FBa0MsR0FBR0k7QUFDckNKLHNCQUFzQixHQUFHSztBQUN6QixTQUFTRixtQkFBbUJHLEdBQUc7SUFDM0IsT0FBTyxJQUFJQyxJQUFJRCxLQUFLRSxRQUFRLENBQUNDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxFQUFFO0FBQ3pGO0FBQ0EsU0FBU0wsMkJBQTJCRSxHQUFHLEVBQUVJLEVBQUUsRUFBRUMsTUFBTTtJQUMvQyxNQUFNQyxNQUFNLElBQUlMLElBQUlEO0lBQ3BCLE1BQU1PLFFBQVFELElBQUlKLFFBQVEsQ0FBQ00sS0FBSyxDQUFDO0lBQ2pDRCxLQUFLLENBQUMsRUFBRSxHQUFHSCxLQUFLLE1BQU1DO0lBQ3RCQyxJQUFJSixRQUFRLEdBQUdLLE1BQU1FLElBQUksQ0FBQztJQUMxQixPQUFPSCxJQUFJSSxRQUFRLEdBQUdDLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDcEM7QUFDQSxTQUFTWixlQUFlYSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxVQUFVLEtBQUssRUFBRUMsSUFBSTtJQUMzREYsUUFBUUcsTUFBTUMsT0FBTyxDQUFDSixTQUFTQSxRQUFRO1FBQUNBO0tBQU07SUFDOUMsTUFBTUssY0FBYyxDQUFDLENBQUMsRUFBRUwsTUFBTUwsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLElBQUlJLFFBQVEsUUFBUUEsUUFBUU8sV0FBVztRQUNuQyxJQUFJTCxTQUFTO1lBQ1QsTUFBTSxJQUFJTSxNQUFNLENBQUMsaUJBQWlCLEVBQUVULEtBQUssbUNBQW1DLEVBQUVPLFlBQVksQ0FBQztRQUMvRjtRQUNBO0lBQ0o7SUFDQSxJQUFJLENBQUNMLE1BQU1RLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsTUFBTSxPQUFPVixNQUFNO1FBQ3BDLE1BQU0sSUFBSVcsVUFBVSxDQUFDLFFBQVEsRUFBRVosS0FBSyxtQ0FBbUMsRUFBRU8sWUFBWSxtQkFBbUIsQ0FBQztJQUM3RztJQUNBSCxPQUFPSDtBQUNYO0FBQ0EsTUFBTWpCLGdCQUFnQixDQUFDNkI7SUFDbkIsTUFBTUMsTUFBTSxDQUFDO0lBQ2IsSUFBSyxNQUFNQyxPQUFPRixLQUFNO1FBQ3BCLE9BQVFBLElBQUksQ0FBQ0UsSUFBSTtZQUNiLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztnQkFDREQsR0FBRyxDQUFDQyxJQUFJLEdBQUc7Z0JBQ1g7WUFDSixLQUFLLENBQUM7WUFDTixLQUFLO1lBQ0wsS0FBSztnQkFDREQsR0FBRyxDQUFDQyxJQUFJLEdBQUcsQ0FBQztnQkFDWjtZQUNKO2dCQUNJRCxHQUFHLENBQUNDLElBQUksR0FBR0YsSUFBSSxDQUFDRSxJQUFJO1FBQzVCO0lBQ0o7SUFDQSxPQUFPRDtBQUNYO0FBQ0FoQyxxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS91dGlscy5qcz81N2RiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vcm1hbGl6ZVNvcnQgPSB2b2lkIDA7XG5leHBvcnRzLmV4dHJhY3REYklkRnJvbVVybCA9IGV4dHJhY3REYklkRnJvbVVybDtcbmV4cG9ydHMucmVwbGFjZUFzdHJhVXJsSWRBbmRSZWdpb24gPSByZXBsYWNlQXN0cmFVcmxJZEFuZFJlZ2lvbjtcbmV4cG9ydHMudmFsaWRhdGVPcHRpb24gPSB2YWxpZGF0ZU9wdGlvbjtcbmZ1bmN0aW9uIGV4dHJhY3REYklkRnJvbVVybCh1cmkpIHtcbiAgICByZXR1cm4gbmV3IFVSTCh1cmkpLmhvc3RuYW1lLm1hdGNoKC9eWzAtOWEtZl17OH0tKFswLTlhLWZdezR9LSl7M31bMC05YS1mXXsxMn0vKT8uWzBdO1xufVxuZnVuY3Rpb24gcmVwbGFjZUFzdHJhVXJsSWRBbmRSZWdpb24odXJpLCBpZCwgcmVnaW9uKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCh1cmkpO1xuICAgIGNvbnN0IHBhcnRzID0gdXJsLmhvc3RuYW1lLnNwbGl0KCcuJyk7XG4gICAgcGFydHNbMF0gPSBpZCArICctJyArIHJlZ2lvbjtcbiAgICB1cmwuaG9zdG5hbWUgPSBwYXJ0cy5qb2luKCcuJyk7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpLnNsaWNlKDAsIC0xKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uKG5hbWUsIG9iaiwgdHlwZXMsIHJlcXVpcmUgPSBmYWxzZSwgdGVzdCkge1xuICAgIHR5cGVzID0gQXJyYXkuaXNBcnJheSh0eXBlcykgPyB0eXBlcyA6IFt0eXBlc107XG4gICAgY29uc3QgdHlwZXNTdHJpbmcgPSBgWyR7dHlwZXMuam9pbignLCAnKX1dYDtcbiAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChyZXF1aXJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgJHtuYW1lfTsgZXhwZWN0ZWQgYSB2YWx1ZSBvZiBzb21lIHR5cGUgaW4gJHt0eXBlc1N0cmluZ31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdHlwZXMuc29tZSh0ID0+IHQgPT09IHR5cGVvZiBvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgJHtuYW1lfTsgZXhwZWN0ZWQgYSB2YWx1ZSBvZiBzb21lIHR5cGUgaW4gJHt0eXBlc1N0cmluZ30sIG9yIHVuZGVmaW5lZC9udWxsYCk7XG4gICAgfVxuICAgIHRlc3Q/LihvYmopO1xufVxuY29uc3Qgbm9ybWFsaXplU29ydCA9IChzb3J0KSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc29ydCkge1xuICAgICAgICBzd2l0Y2ggKHNvcnRba2V5XSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FzZSAnYXNjJzpcbiAgICAgICAgICAgIGNhc2UgJ2FzY2VuZGluZyc6XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICAgIGNhc2UgJ2Rlc2MnOlxuICAgICAgICAgICAgY2FzZSAnZGVzY2VuZGluZyc6XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSAtMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSBzb3J0W2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5leHBvcnRzLm5vcm1hbGl6ZVNvcnQgPSBub3JtYWxpemVTb3J0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9ybWFsaXplU29ydCIsImV4dHJhY3REYklkRnJvbVVybCIsInJlcGxhY2VBc3RyYVVybElkQW5kUmVnaW9uIiwidmFsaWRhdGVPcHRpb24iLCJ1cmkiLCJVUkwiLCJob3N0bmFtZSIsIm1hdGNoIiwiaWQiLCJyZWdpb24iLCJ1cmwiLCJwYXJ0cyIsInNwbGl0Iiwiam9pbiIsInRvU3RyaW5nIiwic2xpY2UiLCJuYW1lIiwib2JqIiwidHlwZXMiLCJyZXF1aXJlIiwidGVzdCIsIkFycmF5IiwiaXNBcnJheSIsInR5cGVzU3RyaW5nIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJzb21lIiwidCIsIlR5cGVFcnJvciIsInNvcnQiLCJyZXQiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AstraAdmin_defaultOpts, _AstraAdmin_httpClient;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AstraAdmin = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst db_1 = __webpack_require__(/*! ../data-api/db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst utils_1 = __webpack_require__(/*! ../devops/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js\");\nclass AstraAdmin {\n    constructor(rootOpts, adminOpts){\n        _AstraAdmin_defaultOpts.set(this, void 0);\n        _AstraAdmin_httpClient.set(this, void 0);\n        (0, utils_1.validateAdminOpts)(adminOpts);\n        __classPrivateFieldSet(this, _AstraAdmin_defaultOpts, rootOpts, \"f\");\n        const combinedAdminOpts = {\n            ...rootOpts.adminOptions,\n            ...adminOpts,\n            adminToken: common_1.TokenProvider.parseToken(adminOpts?.adminToken ?? rootOpts.adminOptions.adminToken)\n        };\n        __classPrivateFieldSet(this, _AstraAdmin_httpClient, new api_1.DevOpsAPIHttpClient({\n            baseUrl: combinedAdminOpts.endpointUrl || api_1.DEFAULT_DEVOPS_API_ENDPOINTS.prod,\n            monitorCommands: combinedAdminOpts.monitorCommands,\n            emitter: rootOpts.emitter,\n            fetchCtx: rootOpts.fetchCtx,\n            userAgent: rootOpts.userAgent,\n            tokenProvider: combinedAdminOpts.adminToken\n        }), \"f\");\n    }\n    db(endpointOrId, regionOrOptions, maybeOptions) {\n        return (0, db_1.mkDb)(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\"), endpointOrId, regionOrOptions, maybeOptions);\n    }\n    dbAdmin(endpointOrId, regionOrOptions, maybeOptions) {\n        return this.db(endpointOrId, regionOrOptions, maybeOptions).admin(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\").adminOptions);\n    }\n    async dbInfo(id, options) {\n        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, \"f\").request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases/${id}`\n        }, options);\n        return resp.data;\n    }\n    async listDatabases(options) {\n        const params = {};\n        if (typeof options?.include === \"string\") {\n            params[\"include\"] = options.include;\n        }\n        if (typeof options?.provider === \"string\") {\n            params[\"provider\"] = options.provider;\n        }\n        if (typeof options?.limit === \"number\") {\n            params[\"limit\"] = String(options.skip);\n        }\n        if (typeof options?.skip === \"number\") {\n            params[\"starting_after\"] = String(options.skip);\n        }\n        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, \"f\").request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases`,\n            params: params\n        }, options);\n        return resp.data;\n    }\n    async createDatabase(config, options) {\n        const definition = {\n            capacityUnits: 1,\n            tier: \"serverless\",\n            dbType: \"vector\",\n            keyspace: (0, common_1.resolveKeyspace)(config) || api_1.DEFAULT_KEYSPACE,\n            ...config\n        };\n        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, \"f\").requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: \"/databases\",\n            data: definition\n        }, {\n            id: (resp)=>resp.headers.location,\n            target: \"ACTIVE\",\n            legalStates: [\n                \"INITIALIZING\",\n                \"PENDING\"\n            ],\n            defaultPollInterval: 10000,\n            options\n        });\n        const db = (0, db_1.mkDb)(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\"), resp.headers.location, definition.region, {\n            ...options?.dbOptions,\n            keyspace: definition.keyspace\n        });\n        return db.admin(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\").adminOptions);\n    }\n    async dropDatabase(db, options) {\n        const id = typeof db === \"string\" ? db : db.id;\n        await __classPrivateFieldGet(this, _AstraAdmin_httpClient, \"f\").requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${id}/terminate`\n        }, {\n            id: id,\n            target: \"TERMINATED\",\n            legalStates: [\n                \"TERMINATING\"\n            ],\n            defaultPollInterval: 10000,\n            options\n        });\n    }\n    get _httpClient() {\n        return __classPrivateFieldGet(this, _AstraAdmin_httpClient, \"f\");\n    }\n}\nexports.AstraAdmin = AstraAdmin;\n_AstraAdmin_defaultOpts = new WeakMap(), _AstraAdmin_httpClient = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AstraDbAdmin_httpClient, _AstraDbAdmin_db;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AstraDbAdmin = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst db_admin_1 = __webpack_require__(/*! ../devops/db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nconst utils_1 = __webpack_require__(/*! ../devops/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js\");\nclass AstraDbAdmin extends db_admin_1.DbAdmin {\n    constructor(db, rootOpts, adminOpts, dbToken, endpoint){\n        super();\n        _AstraDbAdmin_httpClient.set(this, void 0);\n        _AstraDbAdmin_db.set(this, void 0);\n        (0, utils_1.validateAdminOpts)(adminOpts);\n        const combinedAdminOpts = {\n            ...rootOpts.adminOptions,\n            ...adminOpts\n        };\n        const _adminToken = common_1.TokenProvider.parseToken(adminOpts?.adminToken ?? rootOpts.adminOptions.adminToken);\n        const adminToken = _adminToken instanceof common_1.StaticTokenProvider && (0, common_1.isNullish)(_adminToken.getToken()) ? dbToken : _adminToken;\n        const environment = (0, utils_1.extractAstraEnvironment)(endpoint);\n        __classPrivateFieldSet(this, _AstraDbAdmin_httpClient, new api_1.DevOpsAPIHttpClient({\n            baseUrl: combinedAdminOpts.endpointUrl ?? api_1.DEFAULT_DEVOPS_API_ENDPOINTS[environment],\n            monitorCommands: combinedAdminOpts.monitorCommands,\n            fetchCtx: rootOpts.fetchCtx,\n            emitter: rootOpts.emitter,\n            userAgent: rootOpts.userAgent,\n            tokenProvider: adminToken\n        }), \"f\");\n        __classPrivateFieldSet(this, _AstraDbAdmin_db, db, \"f\");\n    }\n    get id() {\n        return __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id;\n    }\n    db() {\n        return __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\");\n    }\n    async findEmbeddingProviders(options) {\n        const resp = await __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").command({\n            findEmbeddingProviders: {}\n        }, {\n            keyspace: null,\n            maxTimeMS: options?.maxTimeMS\n        });\n        return resp.status;\n    }\n    async info(options) {\n        const resp = await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, \"f\").request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id}`\n        }, options);\n        return resp.data;\n    }\n    async listKeyspaces(options) {\n        return this.info(options).then((i)=>[\n                i.info.keyspace,\n                ...i.info.additionalKeyspaces ?? []\n            ].filter(Boolean));\n    }\n    async listNamespaces(options) {\n        return this.listKeyspaces(options);\n    }\n    async createKeyspace(keyspace, options) {\n        if (options?.updateDbKeyspace) {\n            __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").useKeyspace(keyspace);\n        }\n        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, \"f\").requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id}/keyspaces/${keyspace}`\n        }, {\n            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id,\n            target: \"ACTIVE\",\n            legalStates: [\n                \"MAINTENANCE\"\n            ],\n            defaultPollInterval: 1000,\n            options\n        });\n    }\n    async createNamespace(keyspace, options) {\n        return this.createKeyspace(keyspace, {\n            ...options,\n            updateDbKeyspace: options?.updateDbNamespace\n        });\n    }\n    async dropKeyspace(keyspace, options) {\n        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, \"f\").requestLongRunning({\n            method: api_1.HttpMethods.Delete,\n            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id}/keyspaces/${keyspace}`\n        }, {\n            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id,\n            target: \"ACTIVE\",\n            legalStates: [\n                \"MAINTENANCE\"\n            ],\n            defaultPollInterval: 1000,\n            options\n        });\n    }\n    async dropNamespace(keyspace, options) {\n        return this.dropKeyspace(keyspace, options);\n    }\n    async drop(options) {\n        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, \"f\").requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id}/terminate`\n        }, {\n            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, \"f\").id,\n            target: \"TERMINATED\",\n            legalStates: [\n                \"TERMINATING\"\n            ],\n            defaultPollInterval: 10000,\n            options\n        });\n    }\n    get _httpClient() {\n        return __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, \"f\");\n    }\n}\nexports.AstraDbAdmin = AstraDbAdmin;\n_AstraDbAdmin_httpClient = new WeakMap(), _AstraDbAdmin_db = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/data-api-db-admin.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/data-api-db-admin.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DataAPIDbAdmin_httpClient, _DataAPIDbAdmin_db;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIDbAdmin = void 0;\nconst db_admin_1 = __webpack_require__(/*! ../devops/db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\");\nconst utils_1 = __webpack_require__(/*! ../devops/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js\");\nclass DataAPIDbAdmin extends db_admin_1.DbAdmin {\n    constructor(db, httpClient, adminOpts){\n        super();\n        _DataAPIDbAdmin_httpClient.set(this, void 0);\n        _DataAPIDbAdmin_db.set(this, void 0);\n        (0, utils_1.validateAdminOpts)(adminOpts);\n        __classPrivateFieldSet(this, _DataAPIDbAdmin_httpClient, httpClient.forDbAdmin(adminOpts), \"f\");\n        __classPrivateFieldSet(this, _DataAPIDbAdmin_db, db, \"f\");\n    }\n    db() {\n        return __classPrivateFieldGet(this, _DataAPIDbAdmin_db, \"f\");\n    }\n    async findEmbeddingProviders(options) {\n        const resp = await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            findEmbeddingProviders: {}\n        }, {\n            keyspace: null,\n            maxTimeMS: options?.maxTimeMS\n        });\n        return resp.status;\n    }\n    async listKeyspaces(options) {\n        const resp = await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            findKeyspaces: {}\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n        return resp.status.keyspaces;\n    }\n    async listNamespaces(options) {\n        const resp = await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            findNamespaces: {}\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n        return resp.status.namespaces;\n    }\n    async createKeyspace(keyspace, options) {\n        if (options?.updateDbKeyspace) {\n            __classPrivateFieldGet(this, _DataAPIDbAdmin_db, \"f\").useKeyspace(keyspace);\n        }\n        const replication = options?.replication ?? {\n            class: \"SimpleStrategy\",\n            replicationFactor: 1\n        };\n        await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            createKeyspace: {\n                name: keyspace,\n                options: {\n                    replication\n                }\n            }\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n    }\n    async createNamespace(keyspace, options) {\n        if (options?.updateDbNamespace) {\n            __classPrivateFieldGet(this, _DataAPIDbAdmin_db, \"f\").useKeyspace(keyspace);\n        }\n        const replication = options?.replication ?? {\n            class: \"SimpleStrategy\",\n            replicationFactor: 1\n        };\n        await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            createNamespace: {\n                name: keyspace,\n                options: {\n                    replication\n                }\n            }\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n    }\n    async dropKeyspace(keyspace, options) {\n        await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            dropKeyspace: {\n                name: keyspace\n            }\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n    }\n    async dropNamespace(keyspace, options) {\n        await __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\").executeCommand({\n            dropNamespace: {\n                name: keyspace\n            }\n        }, {\n            maxTimeMS: options?.maxTimeMS,\n            keyspace: null\n        });\n    }\n    get _httpClient() {\n        return __classPrivateFieldGet(this, _DataAPIDbAdmin_httpClient, \"f\");\n    }\n}\nexports.DataAPIDbAdmin = DataAPIDbAdmin;\n_DataAPIDbAdmin_httpClient = new WeakMap(), _DataAPIDbAdmin_db = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/data-api-db-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection ExceptionCaughtLocallyJS\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DbAdmin = void 0;\nclass DbAdmin {\n}\nexports.DbAdmin = DbAdmin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2RiLWFkbWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFDeENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2QixNQUFNRTtBQUNOO0FBQ0FGLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kZXZvcHMvZGItYWRtaW4uanM/NDlmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gbm9pbnNwZWN0aW9uIEV4Y2VwdGlvbkNhdWdodExvY2FsbHlKU1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYkFkbWluID0gdm9pZCAwO1xuY2xhc3MgRGJBZG1pbiB7XG59XG5leHBvcnRzLkRiQWRtaW4gPSBEYkFkbWluO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGJBZG1pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DevOpsUnexpectedStateError = exports.DevOpsAPIResponseError = exports.DevOpsAPITimeoutError = exports.DevOpsAPIError = void 0;\nclass DevOpsAPIError extends Error {\n}\nexports.DevOpsAPIError = DevOpsAPIError;\nclass DevOpsAPITimeoutError extends DevOpsAPIError {\n    constructor(url, timeout){\n        super(`Command timed out after ${timeout}ms`);\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.url = url;\n        this.timeout = timeout;\n        this.name = \"DevOpsAPITimeoutError\";\n    }\n}\nexports.DevOpsAPITimeoutError = DevOpsAPITimeoutError;\nclass DevOpsAPIResponseError extends DevOpsAPIError {\n    constructor(resp, data){\n        const errors = data?.errors ?? [];\n        const maybeMsg = errors.find((e)=>e.message)?.message;\n        const message = maybeMsg ? `${maybeMsg}${errors.length > 1 ? ` (+ ${errors.length - 1} more errors)` : \"\"}` : `Something went wrong (${errors.length} errors)`;\n        super(message);\n        Object.defineProperty(this, \"errors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.errors = extractErrorDescriptors(data);\n        this.status = resp.status;\n        this.raw = resp;\n        this.name = \"DevOpsAPIResponseError\";\n    }\n}\nexports.DevOpsAPIResponseError = DevOpsAPIResponseError;\nclass DevOpsUnexpectedStateError extends DevOpsAPIError {\n    constructor(message, expected, data){\n        super(message);\n        Object.defineProperty(this, \"expected\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"dbInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.expected = expected;\n        this.dbInfo = data;\n        this.name = \"DevOpsUnexpectedStateError\";\n    }\n}\nexports.DevOpsUnexpectedStateError = DevOpsUnexpectedStateError;\nfunction extractErrorDescriptors(data) {\n    const errors = data?.errors || [];\n    return errors.map((e)=>({\n            id: e.ID,\n            message: e.message\n        }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQ0FBa0MsR0FBR0EsOEJBQThCLEdBQUdBLDZCQUE2QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ3BJLE1BQU1LLHVCQUF1QkM7QUFDN0I7QUFDQU4sc0JBQXNCLEdBQUdLO0FBQ3pCLE1BQU1ELDhCQUE4QkM7SUFDNUJFLFlBQVlDLEdBQUcsRUFBRUMsT0FBTyxDQUFFO1FBQzFCLEtBQUssQ0FBQyxDQUFDLHdCQUF3QixFQUFFQSxRQUFRLEVBQUUsQ0FBQztRQUNwQ1gsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPO1lBQ3ZDVyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWCxPQUFPLEtBQUs7UUFDaEI7UUFDUUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQzNDVyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWCxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNPLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNJLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0FiLDZCQUE2QixHQUFHSTtBQUNoQyxNQUFNRCwrQkFBK0JFO0lBQzdCRSxZQUFZTyxJQUFJLEVBQUVDLElBQUksQ0FBRTtRQUN4QixNQUFNQyxTQUFTRCxNQUFNQyxVQUFVLEVBQUU7UUFDakMsTUFBTUMsV0FBV0QsT0FBT0UsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLE9BQU8sR0FBR0E7UUFDaEQsTUFBTUEsVUFBVSxXQUNWLENBQUMsRUFBRUgsU0FBUyxFQUFFRCxPQUFPSyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRUwsT0FBT0ssTUFBTSxHQUFHLEVBQUUsYUFBYSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQ2hGLENBQUMsc0JBQXNCLEVBQUVMLE9BQU9LLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDdEQsS0FBSyxDQUFDRDtRQUNFdEIsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQzFDVyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWCxPQUFPLEtBQUs7UUFDaEI7UUFDUUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQzFDVyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWCxPQUFPLEtBQUs7UUFDaEI7UUFDUUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPO1lBQ3ZDVyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWWCxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNlLE1BQU0sR0FBR00sd0JBQXdCUDtRQUN0QyxJQUFJLENBQUNRLE1BQU0sR0FBR1QsS0FBS1MsTUFBTTtRQUN6QixJQUFJLENBQUNDLEdBQUcsR0FBR1Y7UUFDWCxJQUFJLENBQUNELElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0FiLDhCQUE4QixHQUFHRztBQUNqQyxNQUFNRCxtQ0FBbUNHO0lBQ2pDRSxZQUFZYSxPQUFPLEVBQUVLLFFBQVEsRUFBRVYsSUFBSSxDQUFFO1FBQ3JDLEtBQUssQ0FBQ0s7UUFDRXRCLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUM1Q1csWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlgsT0FBTyxLQUFLO1FBQ2hCO1FBQ1FILE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUMxQ1csWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVlgsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDd0IsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR1g7UUFDZCxJQUFJLENBQUNGLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0FiLGtDQUFrQyxHQUFHRTtBQUNyQyxTQUFTb0Isd0JBQXdCUCxJQUFJO0lBQ2pDLE1BQU1DLFNBQVNELE1BQU1DLFVBQVUsRUFBRTtJQUNqQyxPQUFPQSxPQUFPVyxHQUFHLENBQUMsQ0FBQ1IsSUFBTztZQUN0QlMsSUFBSVQsRUFBRVUsRUFBRTtZQUNSVCxTQUFTRCxFQUFFQyxPQUFPO1FBQ3RCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kZXZvcHMvZXJyb3JzLmpzP2VhMmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGV2T3BzVW5leHBlY3RlZFN0YXRlRXJyb3IgPSBleHBvcnRzLkRldk9wc0FQSVJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLkRldk9wc0FQSVRpbWVvdXRFcnJvciA9IGV4cG9ydHMuRGV2T3BzQVBJRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBEZXZPcHNBUElFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmV4cG9ydHMuRGV2T3BzQVBJRXJyb3IgPSBEZXZPcHNBUElFcnJvcjtcbmNsYXNzIERldk9wc0FQSVRpbWVvdXRFcnJvciBleHRlbmRzIERldk9wc0FQSUVycm9yIHtcbiAgICAgICAgY29uc3RydWN0b3IodXJsLCB0aW1lb3V0KSB7XG4gICAgICAgIHN1cGVyKGBDb21tYW5kIHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXNgKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1cmxcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0aW1lb3V0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICB0aGlzLm5hbWUgPSAnRGV2T3BzQVBJVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLkRldk9wc0FQSVRpbWVvdXRFcnJvciA9IERldk9wc0FQSVRpbWVvdXRFcnJvcjtcbmNsYXNzIERldk9wc0FQSVJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBEZXZPcHNBUElFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJlc3AsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gZGF0YT8uZXJyb3JzID8/IFtdO1xuICAgICAgICBjb25zdCBtYXliZU1zZyA9IGVycm9ycy5maW5kKChlKSA9PiBlLm1lc3NhZ2UpPy5tZXNzYWdlO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKG1heWJlTXNnKVxuICAgICAgICAgICAgPyBgJHttYXliZU1zZ30ke2Vycm9ycy5sZW5ndGggPiAxID8gYCAoKyAke2Vycm9ycy5sZW5ndGggLSAxfSBtb3JlIGVycm9ycylgIDogJyd9YFxuICAgICAgICAgICAgOiBgU29tZXRoaW5nIHdlbnQgd3JvbmcgKCR7ZXJyb3JzLmxlbmd0aH0gZXJyb3JzKWA7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVycm9yc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YXR1c1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJhd1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGV4dHJhY3RFcnJvckRlc2NyaXB0b3JzKGRhdGEpO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHJlc3Auc3RhdHVzO1xuICAgICAgICB0aGlzLnJhdyA9IHJlc3A7XG4gICAgICAgIHRoaXMubmFtZSA9ICdEZXZPcHNBUElSZXNwb25zZUVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLkRldk9wc0FQSVJlc3BvbnNlRXJyb3IgPSBEZXZPcHNBUElSZXNwb25zZUVycm9yO1xuY2xhc3MgRGV2T3BzVW5leHBlY3RlZFN0YXRlRXJyb3IgZXh0ZW5kcyBEZXZPcHNBUElFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGV4cGVjdGVkLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4cGVjdGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGJJbmZvXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgICAgdGhpcy5kYkluZm8gPSBkYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSAnRGV2T3BzVW5leHBlY3RlZFN0YXRlRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuRGV2T3BzVW5leHBlY3RlZFN0YXRlRXJyb3IgPSBEZXZPcHNVbmV4cGVjdGVkU3RhdGVFcnJvcjtcbmZ1bmN0aW9uIGV4dHJhY3RFcnJvckRlc2NyaXB0b3JzKGRhdGEpIHtcbiAgICBjb25zdCBlcnJvcnMgPSBkYXRhPy5lcnJvcnMgfHwgW107XG4gICAgcmV0dXJuIGVycm9ycy5tYXAoKGUpID0+ICh7XG4gICAgICAgIGlkOiBlLklELFxuICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgfSkpO1xufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGV2T3BzVW5leHBlY3RlZFN0YXRlRXJyb3IiLCJEZXZPcHNBUElSZXNwb25zZUVycm9yIiwiRGV2T3BzQVBJVGltZW91dEVycm9yIiwiRGV2T3BzQVBJRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwidXJsIiwidGltZW91dCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm5hbWUiLCJyZXNwIiwiZGF0YSIsImVycm9ycyIsIm1heWJlTXNnIiwiZmluZCIsImUiLCJtZXNzYWdlIiwibGVuZ3RoIiwiZXh0cmFjdEVycm9yRGVzY3JpcHRvcnMiLCJzdGF0dXMiLCJyYXciLCJleHBlY3RlZCIsImRiSW5mbyIsIm1hcCIsImlkIiwiSUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/events.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AdminCommandFailedEvent = exports.AdminCommandSucceededEvent = exports.AdminCommandPollingEvent = exports.AdminCommandStartedEvent = exports.AdminCommandEvent = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nclass AdminCommandEvent {\n    constructor(info, longRunning){\n        Object.defineProperty(this, \"path\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"method\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reqBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"longRunning\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.path = info.path;\n        this.method = info.method;\n        this.reqBody = info.data;\n        this.params = info.params;\n        this.longRunning = longRunning;\n    }\n}\nexports.AdminCommandEvent = AdminCommandEvent;\nclass AdminCommandStartedEvent extends AdminCommandEvent {\n    constructor(info, longRunning, timeout){\n        super(info, longRunning);\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = timeout;\n    }\n}\nexports.AdminCommandStartedEvent = AdminCommandStartedEvent;\nclass AdminCommandPollingEvent extends AdminCommandEvent {\n    constructor(info, started, interval){\n        super(info, true);\n        Object.defineProperty(this, \"elapsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"interval\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.elapsed = (0, api_1.hrTimeMs)() - started;\n        this.interval = interval;\n    }\n}\nexports.AdminCommandPollingEvent = AdminCommandPollingEvent;\nclass AdminCommandSucceededEvent extends AdminCommandEvent {\n    constructor(info, longRunning, data, warnings, started){\n        super(info, longRunning);\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"warnings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.warnings = warnings;\n        this.resBody = data || undefined;\n    }\n}\nexports.AdminCommandSucceededEvent = AdminCommandSucceededEvent;\nclass AdminCommandFailedEvent extends AdminCommandEvent {\n    constructor(info, longRunning, error, started){\n        super(info, longRunning);\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.error = error;\n    }\n}\nexports.AdminCommandFailedEvent = AdminCommandFailedEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\n// noinspection DuplicatedCode\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./astra-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./astra-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./data-api-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/data-api-db-admin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Qyw4QkFBOEI7QUFDOUIsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyw0RkFBZSxHQUFHTjtBQUN2Q0QsYUFBYU8sbUJBQU9BLENBQUMsa0dBQWtCLEdBQUdOO0FBQzFDRCxhQUFhTyxtQkFBT0EsQ0FBQyx3R0FBcUIsR0FBR047QUFDN0NELGFBQWFPLG1CQUFPQSxDQUFDLHNGQUFZLEdBQUdOO0FBQ3BDRCxhQUFhTyxtQkFBT0EsQ0FBQyxrRkFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMsa0ZBQVUsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlyc3RfY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kZXZvcHMvaW5kZXguanM/NDcyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gbm9pbnNwZWN0aW9uIER1cGxpY2F0ZWRDb2RlXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hc3RyYS1hZG1pblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXN0cmEtZGItYWRtaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RhdGEtYXBpLWRiLWFkbWluXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kYi1hZG1pblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldmVudHNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateAdminOpts = validateAdminOpts;\nexports.extractAstraEnvironment = extractAstraEnvironment;\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nfunction validateAdminOpts(opts) {\n    (0, utils_1.validateOption)(\"adminOptions\", opts, \"object\", false, (opts)=>{\n        (0, utils_1.validateOption)(\"adminOptions.monitorCommands\", opts.monitorCommands, \"boolean\");\n        (0, utils_1.validateOption)(\"adminOptions.endpointUrl\", opts.endpointUrl, \"string\");\n    });\n}\nfunction extractAstraEnvironment(endpoint) {\n    switch(true){\n        case endpoint.includes(\"apps.astra-dev.datastax.com\"):\n            return \"dev\";\n        case endpoint.includes(\"apps.astra-test.datastax.com\"):\n            return \"test\";\n        case endpoint.includes(\"apps.astra.datastax.com\"):\n            return \"prod\";\n        default:\n            throw new Error(`Cannot extract astra environment for endpoint '${endpoint}'`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0Q0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHRTtBQUM1QkYsK0JBQStCLEdBQUdHO0FBQ2xDLE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLDRGQUFtQjtBQUMzQyxTQUFTSCxrQkFBa0JJLElBQUk7SUFDMUIsSUFBR0YsUUFBUUcsY0FBYyxFQUFFLGdCQUFnQkQsTUFBTSxVQUFVLE9BQU8sQ0FBQ0E7UUFDL0QsSUFBR0YsUUFBUUcsY0FBYyxFQUFFLGdDQUFnQ0QsS0FBS0UsZUFBZSxFQUFFO1FBQ2pGLElBQUdKLFFBQVFHLGNBQWMsRUFBRSw0QkFBNEJELEtBQUtHLFdBQVcsRUFBRTtJQUM5RTtBQUNKO0FBQ0EsU0FBU04sd0JBQXdCTyxRQUFRO0lBQ3JDLE9BQVE7UUFDSixLQUFLQSxTQUFTQyxRQUFRLENBQUM7WUFDbkIsT0FBTztRQUNYLEtBQUtELFNBQVNDLFFBQVEsQ0FBQztZQUNuQixPQUFPO1FBQ1gsS0FBS0QsU0FBU0MsUUFBUSxDQUFDO1lBQ25CLE9BQU87UUFDWDtZQUNJLE1BQU0sSUFBSUMsTUFBTSxDQUFDLCtDQUErQyxFQUFFRixTQUFTLENBQUMsQ0FBQztJQUNyRjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3V0aWxzLmpzP2MzNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YXN0YXgsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVBZG1pbk9wdHMgPSB2YWxpZGF0ZUFkbWluT3B0cztcbmV4cG9ydHMuZXh0cmFjdEFzdHJhRW52aXJvbm1lbnQgPSBleHRyYWN0QXN0cmFFbnZpcm9ubWVudDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vZGF0YS1hcGkvdXRpbHNcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUFkbWluT3B0cyhvcHRzKSB7XG4gICAgKDAsIHV0aWxzXzEudmFsaWRhdGVPcHRpb24pKCdhZG1pbk9wdGlvbnMnLCBvcHRzLCAnb2JqZWN0JywgZmFsc2UsIChvcHRzKSA9PiB7XG4gICAgICAgICgwLCB1dGlsc18xLnZhbGlkYXRlT3B0aW9uKSgnYWRtaW5PcHRpb25zLm1vbml0b3JDb21tYW5kcycsIG9wdHMubW9uaXRvckNvbW1hbmRzLCAnYm9vbGVhbicpO1xuICAgICAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ2FkbWluT3B0aW9ucy5lbmRwb2ludFVybCcsIG9wdHMuZW5kcG9pbnRVcmwsICdzdHJpbmcnKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RBc3RyYUVudmlyb25tZW50KGVuZHBvaW50KSB7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2UgZW5kcG9pbnQuaW5jbHVkZXMoJ2FwcHMuYXN0cmEtZGV2LmRhdGFzdGF4LmNvbScpOlxuICAgICAgICAgICAgcmV0dXJuICdkZXYnO1xuICAgICAgICBjYXNlIGVuZHBvaW50LmluY2x1ZGVzKCdhcHBzLmFzdHJhLXRlc3QuZGF0YXN0YXguY29tJyk6XG4gICAgICAgICAgICByZXR1cm4gJ3Rlc3QnO1xuICAgICAgICBjYXNlIGVuZHBvaW50LmluY2x1ZGVzKCdhcHBzLmFzdHJhLmRhdGFzdGF4LmNvbScpOlxuICAgICAgICAgICAgcmV0dXJuICdwcm9kJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGV4dHJhY3QgYXN0cmEgZW52aXJvbm1lbnQgZm9yIGVuZHBvaW50ICcke2VuZHBvaW50fSdgKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZUFkbWluT3B0cyIsImV4dHJhY3RBc3RyYUVudmlyb25tZW50IiwidXRpbHNfMSIsInJlcXVpcmUiLCJvcHRzIiwidmFsaWRhdGVPcHRpb24iLCJtb25pdG9yQ29tbWFuZHMiLCJlbmRwb2ludFVybCIsImVuZHBvaW50IiwiaW5jbHVkZXMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataAPIEnvironments = exports.UsernamePasswordTokenProvider = exports.StaticTokenProvider = exports.TokenProvider = exports.DEFAULT_KEYSPACE = exports.FetchH2 = exports.FetchNative = void 0;\nvar api_1 = __webpack_require__(/*! ./api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nObject.defineProperty(exports, \"FetchNative\", ({\n    enumerable: true,\n    get: function() {\n        return api_1.FetchNative;\n    }\n}));\nObject.defineProperty(exports, \"FetchH2\", ({\n    enumerable: true,\n    get: function() {\n        return api_1.FetchH2;\n    }\n}));\nObject.defineProperty(exports, \"DEFAULT_KEYSPACE\", ({\n    enumerable: true,\n    get: function() {\n        return api_1.DEFAULT_KEYSPACE;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./devops */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\"), exports);\nvar common_1 = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\");\nObject.defineProperty(exports, \"TokenProvider\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.TokenProvider;\n    }\n}));\nObject.defineProperty(exports, \"StaticTokenProvider\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.StaticTokenProvider;\n    }\n}));\nObject.defineProperty(exports, \"UsernamePasswordTokenProvider\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.UsernamePasswordTokenProvider;\n    }\n}));\nObject.defineProperty(exports, \"DataAPIEnvironments\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.DataAPIEnvironments;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REwsMkJBQTJCLEdBQUdBLHFDQUFxQyxHQUFHQSwyQkFBMkIsR0FBR0EscUJBQXFCLEdBQUdBLHdCQUF3QixHQUFHQSxlQUFlLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDcE0sSUFBSWEsUUFBUUMsbUJBQU9BLENBQUMsMkVBQU87QUFDM0I5QiwrQ0FBOEM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2dCLE1BQU1ELFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSDVCLDJDQUEwQztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPZ0IsTUFBTUYsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNHM0Isb0RBQW1EO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9nQixNQUFNSCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SFgsYUFBYWUsbUJBQU9BLENBQUMscUZBQVksR0FBR2Q7QUFDcENELGFBQWFlLG1CQUFPQSxDQUFDLGlGQUFVLEdBQUdkO0FBQ2xDRCxhQUFhZSxtQkFBT0EsQ0FBQyxpRkFBVSxHQUFHZDtBQUNsQyxJQUFJZSxXQUFXRCxtQkFBT0EsQ0FBQyxpRkFBVTtBQUNqQzlCLGlEQUFnRDtJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPa0IsU0FBU04sYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFIekIsdURBQXNEO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9rQixTQUFTUCxtQkFBbUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SXhCLGlFQUFnRTtJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPa0IsU0FBU1IsNkJBQTZCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUp2Qix1REFBc0Q7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2tCLFNBQVNULG1CQUFtQjtJQUFFO0FBQUUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvaW5kZXguanM/MWE4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhc3RheCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRhdGFBUElFbnZpcm9ubWVudHMgPSBleHBvcnRzLlVzZXJuYW1lUGFzc3dvcmRUb2tlblByb3ZpZGVyID0gZXhwb3J0cy5TdGF0aWNUb2tlblByb3ZpZGVyID0gZXhwb3J0cy5Ub2tlblByb3ZpZGVyID0gZXhwb3J0cy5ERUZBVUxUX0tFWVNQQUNFID0gZXhwb3J0cy5GZXRjaEgyID0gZXhwb3J0cy5GZXRjaE5hdGl2ZSA9IHZvaWQgMDtcbnZhciBhcGlfMSA9IHJlcXVpcmUoXCIuL2FwaVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZldGNoTmF0aXZlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhcGlfMS5GZXRjaE5hdGl2ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZldGNoSDJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFwaV8xLkZldGNoSDI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJERUZBVUxUX0tFWVNQQUNFXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhcGlfMS5ERUZBVUxUX0tFWVNQQUNFOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RhdGEtYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Rldm9wc1wiKSwgZXhwb3J0cyk7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb2tlblByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21tb25fMS5Ub2tlblByb3ZpZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RhdGljVG9rZW5Qcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tbW9uXzEuU3RhdGljVG9rZW5Qcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVzZXJuYW1lUGFzc3dvcmRUb2tlblByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21tb25fMS5Vc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGFBUElFbnZpcm9ubWVudHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW1vbl8xLkRhdGFBUElFbnZpcm9ubWVudHM7IH0gfSk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsIkRhdGFBUElFbnZpcm9ubWVudHMiLCJVc2VybmFtZVBhc3N3b3JkVG9rZW5Qcm92aWRlciIsIlN0YXRpY1Rva2VuUHJvdmlkZXIiLCJUb2tlblByb3ZpZGVyIiwiREVGQVVMVF9LRVlTUEFDRSIsIkZldGNoSDIiLCJGZXRjaE5hdGl2ZSIsImFwaV8xIiwicmVxdWlyZSIsImNvbW1vbl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright Datastax, Inc\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LIB_VERSION = exports.LIB_NAME = void 0;\nexports.LIB_NAME = \"astra-db-ts\";\nexports.LIB_VERSION = \"1.5.0\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdENBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUM5Q0EsZ0JBQWdCLEdBQUc7QUFDbkJBLG1CQUFtQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvdmVyc2lvbi5qcz8wYTE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFzdGF4LCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxJQl9WRVJTSU9OID0gZXhwb3J0cy5MSUJfTkFNRSA9IHZvaWQgMDtcbmV4cG9ydHMuTElCX05BTUUgPSAnYXN0cmEtZGItdHMnO1xuZXhwb3J0cy5MSUJfVkVSU0lPTiA9ICcxLjUuMCc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMSUJfVkVSU0lPTiIsIkxJQl9OQU1FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js\n");

/***/ })

};
;