"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/encoding";
exports.ids = ["vendor-chunks/encoding"];
exports.modules = {

/***/ "(rsc)/./node_modules/encoding/lib/encoding.js":
/*!***********************************************!*\
  !*** ./node_modules/encoding/lib/encoding.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar iconvLite = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\n// Expose to the world\nmodule.exports.convert = convert;\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */ function convert(str, to, from) {\n    from = checkEncoding(from || \"UTF-8\");\n    to = checkEncoding(to || \"UTF-8\");\n    str = str || \"\";\n    var result;\n    if (from !== \"UTF-8\" && typeof str === \"string\") {\n        str = Buffer.from(str, \"binary\");\n    }\n    if (from === to) {\n        if (typeof str === \"string\") {\n            result = Buffer.from(str);\n        } else {\n            result = str;\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n    if (typeof result === \"string\") {\n        result = Buffer.from(result, \"utf-8\");\n    }\n    return result;\n}\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */ function convertIconvLite(str, to, from) {\n    if (to === \"UTF-8\") {\n        return iconvLite.decode(str, from);\n    } else if (from === \"UTF-8\") {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */ function checkEncoding(name) {\n    return (name || \"\").toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, \"ISO-8859-$1\").replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, \"WINDOWS-$1\").replace(/^utf[\\-_]?(\\d+)$/i, \"UTF-$1\").replace(/^ks_c_5601\\-1987$/i, \"CP949\").replace(/^us[\\-_]?ascii$/i, \"ASCII\").toUpperCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZW5jb2RpbmcvbGliL2VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFeEIsc0JBQXNCO0FBQ3RCQyxzQkFBc0IsR0FBR0U7QUFFekI7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsRUFBRSxFQUFFQyxJQUFJO0lBQzFCQSxPQUFPQyxjQUFjRCxRQUFRO0lBQzdCRCxLQUFLRSxjQUFjRixNQUFNO0lBQ3pCRCxNQUFNQSxPQUFPO0lBRWIsSUFBSUk7SUFFSixJQUFJRixTQUFTLFdBQVcsT0FBT0YsUUFBUSxVQUFVO1FBQzdDQSxNQUFNSyxPQUFPSCxJQUFJLENBQUNGLEtBQUs7SUFDM0I7SUFFQSxJQUFJRSxTQUFTRCxJQUFJO1FBQ2IsSUFBSSxPQUFPRCxRQUFRLFVBQVU7WUFDekJJLFNBQVNDLE9BQU9ILElBQUksQ0FBQ0Y7UUFDekIsT0FBTztZQUNISSxTQUFTSjtRQUNiO0lBQ0osT0FBTztRQUNILElBQUk7WUFDQUksU0FBU0UsaUJBQWlCTixLQUFLQyxJQUFJQztRQUN2QyxFQUFFLE9BQU9LLEdBQUc7WUFDUkMsUUFBUUMsS0FBSyxDQUFDRjtZQUNkSCxTQUFTSjtRQUNiO0lBQ0o7SUFFQSxJQUFJLE9BQU9JLFdBQVcsVUFBVTtRQUM1QkEsU0FBU0MsT0FBT0gsSUFBSSxDQUFDRSxRQUFRO0lBQ2pDO0lBRUEsT0FBT0E7QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRSxpQkFBaUJOLEdBQUcsRUFBRUMsRUFBRSxFQUFFQyxJQUFJO0lBQ25DLElBQUlELE9BQU8sU0FBUztRQUNoQixPQUFPTixVQUFVZSxNQUFNLENBQUNWLEtBQUtFO0lBQ2pDLE9BQU8sSUFBSUEsU0FBUyxTQUFTO1FBQ3pCLE9BQU9QLFVBQVVnQixNQUFNLENBQUNYLEtBQUtDO0lBQ2pDLE9BQU87UUFDSCxPQUFPTixVQUFVZ0IsTUFBTSxDQUFDaEIsVUFBVWUsTUFBTSxDQUFDVixLQUFLRSxPQUFPRDtJQUN6RDtBQUNKO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTRSxjQUFjUyxJQUFJO0lBQ3ZCLE9BQU8sQ0FBQ0EsUUFBUSxFQUFDLEVBQ1pDLFFBQVEsR0FDUkMsSUFBSSxHQUNKQyxPQUFPLENBQUMsdUJBQXVCLGVBQy9CQSxPQUFPLENBQUMsOEJBQThCLGNBQ3RDQSxPQUFPLENBQUMscUJBQXFCLFVBQzdCQSxPQUFPLENBQUMsc0JBQXNCLFNBQzlCQSxPQUFPLENBQUMsb0JBQW9CLFNBQzVCQyxXQUFXO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpcnN0X2NoYXRib3QvLi9ub2RlX21vZHVsZXMvZW5jb2RpbmcvbGliL2VuY29kaW5nLmpzPzIzMTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaWNvbnZMaXRlID0gcmVxdWlyZSgnaWNvbnYtbGl0ZScpO1xuXG4vLyBFeHBvc2UgdG8gdGhlIHdvcmxkXG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0ID0gY29udmVydDtcblxuLyoqXG4gKiBDb252ZXJ0IGVuY29kaW5nIG9mIGFuIFVURi04IHN0cmluZyBvciBhIGJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcn0gc3RyIFN0cmluZyB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0byBFbmNvZGluZyB0byBiZSBjb252ZXJ0ZWQgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbZnJvbT0nVVRGLTgnXSBFbmNvZGluZyB0byBiZSBjb252ZXJ0ZWQgZnJvbVxuICogQHJldHVybiB7QnVmZmVyfSBFbmNvZGVkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0KHN0ciwgdG8sIGZyb20pIHtcbiAgICBmcm9tID0gY2hlY2tFbmNvZGluZyhmcm9tIHx8ICdVVEYtOCcpO1xuICAgIHRvID0gY2hlY2tFbmNvZGluZyh0byB8fCAnVVRGLTgnKTtcbiAgICBzdHIgPSBzdHIgfHwgJyc7XG5cbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKGZyb20gIT09ICdVVEYtOCcgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RyID0gQnVmZmVyLmZyb20oc3RyLCAnYmluYXJ5Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gQnVmZmVyLmZyb20oc3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHN0cjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjb252ZXJ0SWNvbnZMaXRlKHN0ciwgdG8sIGZyb20pO1xuICAgICAgICB9IGNhdGNoIChFKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKEUpO1xuICAgICAgICAgICAgcmVzdWx0ID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5mcm9tKHJlc3VsdCwgJ3V0Zi04Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGVuY29kaW5nIG9mIGFzdHJpbmcgd2l0aCBpY29udi1saXRlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8QnVmZmVyfSBzdHIgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZFxuICogQHBhcmFtIHtTdHJpbmd9IHRvIEVuY29kaW5nIHRvIGJlIGNvbnZlcnRlZCB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtmcm9tPSdVVEYtOCddIEVuY29kaW5nIHRvIGJlIGNvbnZlcnRlZCBmcm9tXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IEVuY29kZWQgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRJY29udkxpdGUoc3RyLCB0bywgZnJvbSkge1xuICAgIGlmICh0byA9PT0gJ1VURi04Jykge1xuICAgICAgICByZXR1cm4gaWNvbnZMaXRlLmRlY29kZShzdHIsIGZyb20pO1xuICAgIH0gZWxzZSBpZiAoZnJvbSA9PT0gJ1VURi04Jykge1xuICAgICAgICByZXR1cm4gaWNvbnZMaXRlLmVuY29kZShzdHIsIHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaWNvbnZMaXRlLmVuY29kZShpY29udkxpdGUuZGVjb2RlKHN0ciwgZnJvbSksIHRvKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgY2hhcnNldCBuYW1lIGlmIG5lZWRlZFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIENoYXJhY3RlciBzZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gQ2hhcmFjdGVyIHNldCBuYW1lXG4gKi9cbmZ1bmN0aW9uIGNoZWNrRW5jb2RpbmcobmFtZSkge1xuICAgIHJldHVybiAobmFtZSB8fCAnJylcbiAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgLnRyaW0oKVxuICAgICAgICAucmVwbGFjZSgvXmxhdGluW1xcLV9dPyhcXGQrKSQvaSwgJ0lTTy04ODU5LSQxJylcbiAgICAgICAgLnJlcGxhY2UoL153aW4oPzpkb3dzKT9bXFwtX10/KFxcZCspJC9pLCAnV0lORE9XUy0kMScpXG4gICAgICAgIC5yZXBsYWNlKC9edXRmW1xcLV9dPyhcXGQrKSQvaSwgJ1VURi0kMScpXG4gICAgICAgIC5yZXBsYWNlKC9ea3NfY181NjAxXFwtMTk4NyQvaSwgJ0NQOTQ5JylcbiAgICAgICAgLnJlcGxhY2UoL151c1tcXC1fXT9hc2NpaSQvaSwgJ0FTQ0lJJylcbiAgICAgICAgLnRvVXBwZXJDYXNlKCk7XG59XG4iXSwibmFtZXMiOlsiaWNvbnZMaXRlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb252ZXJ0Iiwic3RyIiwidG8iLCJmcm9tIiwiY2hlY2tFbmNvZGluZyIsInJlc3VsdCIsIkJ1ZmZlciIsImNvbnZlcnRJY29udkxpdGUiLCJFIiwiY29uc29sZSIsImVycm9yIiwiZGVjb2RlIiwiZW5jb2RlIiwibmFtZSIsInRvU3RyaW5nIiwidHJpbSIsInJlcGxhY2UiLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/encoding/lib/encoding.js\n");

/***/ })

};
;