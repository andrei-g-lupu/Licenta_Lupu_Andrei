"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai/react/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/ai/react/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   experimental_useObject: () => (/* binding */ experimental_useObject),\n/* harmony export */   useAssistant: () => (/* binding */ useAssistant),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/react */ \"(ssr)/./node_modules/@ai-sdk/react/dist/index.mjs\");\n'use client'\n\n// react/index.ts\n;\nvar useChat = _ai_sdk_react__WEBPACK_IMPORTED_MODULE_0__.useChat;\nvar useCompletion = _ai_sdk_react__WEBPACK_IMPORTED_MODULE_0__.useCompletion;\nvar useAssistant = _ai_sdk_react__WEBPACK_IMPORTED_MODULE_0__.useAssistant;\nvar experimental_useObject = _ai_sdk_react__WEBPACK_IMPORTED_MODULE_0__.experimental_useObject;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBLENBS3VCO0FBQ3ZCLGNBQWMsa0RBQVk7QUFDMUIsb0JBQW9CLHdEQUFrQjtBQUN0QyxtQkFBbUIsdURBQWlCO0FBQ3BDLDZCQUE2QixpRUFBMkI7QUFNdEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maXJzdF9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2FpL3JlYWN0L2Rpc3QvaW5kZXgubWpzPzg4YTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbi8vIHJlYWN0L2luZGV4LnRzXG5pbXBvcnQge1xuICB1c2VDaGF0IGFzIHVzZUNoYXRSZWFjdCxcbiAgdXNlQ29tcGxldGlvbiBhcyB1c2VDb21wbGV0aW9uUmVhY3QsXG4gIHVzZUFzc2lzdGFudCBhcyB1c2VBc3Npc3RhbnRSZWFjdCxcbiAgZXhwZXJpbWVudGFsX3VzZU9iamVjdCBhcyBleHBlcmltZW50YWxfdXNlT2JqZWN0UmVhY3Rcbn0gZnJvbSBcIkBhaS1zZGsvcmVhY3RcIjtcbnZhciB1c2VDaGF0ID0gdXNlQ2hhdFJlYWN0O1xudmFyIHVzZUNvbXBsZXRpb24gPSB1c2VDb21wbGV0aW9uUmVhY3Q7XG52YXIgdXNlQXNzaXN0YW50ID0gdXNlQXNzaXN0YW50UmVhY3Q7XG52YXIgZXhwZXJpbWVudGFsX3VzZU9iamVjdCA9IGV4cGVyaW1lbnRhbF91c2VPYmplY3RSZWFjdDtcbmV4cG9ydCB7XG4gIGV4cGVyaW1lbnRhbF91c2VPYmplY3QsXG4gIHVzZUFzc2lzdGFudCxcbiAgdXNlQ2hhdCxcbiAgdXNlQ29tcGxldGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/react/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/dist/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/ai/dist/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError),\n/* harmony export */   AIStream: () => (/* binding */ AIStream),\n/* harmony export */   APICallError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError),\n/* harmony export */   AWSBedrockAnthropicMessagesStream: () => (/* binding */ AWSBedrockAnthropicMessagesStream),\n/* harmony export */   AWSBedrockAnthropicStream: () => (/* binding */ AWSBedrockAnthropicStream),\n/* harmony export */   AWSBedrockCohereStream: () => (/* binding */ AWSBedrockCohereStream),\n/* harmony export */   AWSBedrockLlama2Stream: () => (/* binding */ AWSBedrockLlama2Stream),\n/* harmony export */   AWSBedrockStream: () => (/* binding */ AWSBedrockStream),\n/* harmony export */   AnthropicStream: () => (/* binding */ AnthropicStream),\n/* harmony export */   AssistantResponse: () => (/* binding */ AssistantResponse),\n/* harmony export */   CohereStream: () => (/* binding */ CohereStream),\n/* harmony export */   DownloadError: () => (/* binding */ DownloadError),\n/* harmony export */   EmptyResponseBodyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError),\n/* harmony export */   GoogleGenerativeAIStream: () => (/* binding */ GoogleGenerativeAIStream),\n/* harmony export */   HuggingFaceStream: () => (/* binding */ HuggingFaceStream),\n/* harmony export */   InkeepStream: () => (/* binding */ InkeepStream),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidDataContentError: () => (/* binding */ InvalidDataContentError),\n/* harmony export */   InvalidMessageRoleError: () => (/* binding */ InvalidMessageRoleError),\n/* harmony export */   InvalidPromptError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidResponseDataError),\n/* harmony export */   InvalidToolArgumentsError: () => (/* binding */ InvalidToolArgumentsError),\n/* harmony export */   JSONParseError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError),\n/* harmony export */   LangChainAdapter: () => (/* binding */ langchain_adapter_exports),\n/* harmony export */   LangChainStream: () => (/* binding */ LangChainStream),\n/* harmony export */   LlamaIndexAdapter: () => (/* binding */ llamaindex_adapter_exports),\n/* harmony export */   LoadAPIKeyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError),\n/* harmony export */   MessageConversionError: () => (/* binding */ MessageConversionError),\n/* harmony export */   MistralStream: () => (/* binding */ MistralStream),\n/* harmony export */   NoContentGeneratedError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoContentGeneratedError),\n/* harmony export */   NoObjectGeneratedError: () => (/* binding */ NoObjectGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError),\n/* harmony export */   NoSuchProviderError: () => (/* binding */ NoSuchProviderError),\n/* harmony export */   NoSuchToolError: () => (/* binding */ NoSuchToolError),\n/* harmony export */   OpenAIStream: () => (/* binding */ OpenAIStream),\n/* harmony export */   ReplicateStream: () => (/* binding */ ReplicateStream),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   StreamData: () => (/* binding */ StreamData2),\n/* harmony export */   StreamingTextResponse: () => (/* binding */ StreamingTextResponse),\n/* harmony export */   TypeValidationError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError),\n/* harmony export */   convertToCoreMessages: () => (/* binding */ convertToCoreMessages),\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   createCallbacksTransformer: () => (/* binding */ createCallbacksTransformer),\n/* harmony export */   createEventStreamTransformer: () => (/* binding */ createEventStreamTransformer),\n/* harmony export */   createStreamDataTransformer: () => (/* binding */ createStreamDataTransformer),\n/* harmony export */   embed: () => (/* binding */ embed),\n/* harmony export */   embedMany: () => (/* binding */ embedMany),\n/* harmony export */   experimental_AssistantResponse: () => (/* binding */ experimental_AssistantResponse),\n/* harmony export */   experimental_StreamData: () => (/* binding */ experimental_StreamData),\n/* harmony export */   experimental_createModelRegistry: () => (/* binding */ experimental_createModelRegistry),\n/* harmony export */   experimental_createProviderRegistry: () => (/* binding */ experimental_createProviderRegistry),\n/* harmony export */   experimental_customProvider: () => (/* binding */ experimental_customProvider),\n/* harmony export */   experimental_generateObject: () => (/* binding */ experimental_generateObject),\n/* harmony export */   experimental_generateText: () => (/* binding */ experimental_generateText),\n/* harmony export */   experimental_streamObject: () => (/* binding */ experimental_streamObject),\n/* harmony export */   experimental_streamText: () => (/* binding */ experimental_streamText),\n/* harmony export */   experimental_wrapLanguageModel: () => (/* binding */ experimental_wrapLanguageModel),\n/* harmony export */   formatStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart),\n/* harmony export */   generateId: () => (/* binding */ generateId2),\n/* harmony export */   generateObject: () => (/* binding */ generateObject),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   jsonSchema: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.jsonSchema),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   parseStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.parseStreamPart),\n/* harmony export */   processDataProtocolResponse: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.processDataProtocolResponse),\n/* harmony export */   readDataStream: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.readDataStream),\n/* harmony export */   readableFromAsyncIterable: () => (/* binding */ readableFromAsyncIterable),\n/* harmony export */   streamObject: () => (/* binding */ streamObject),\n/* harmony export */   streamText: () => (/* binding */ streamText),\n/* harmony export */   streamToResponse: () => (/* binding */ streamToResponse),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   trimStartOfStreamHelper: () => (/* binding */ trimStartOfStreamHelper)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(rsc)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var eventsource_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/eventsource-parser/dist/index.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name11 in all)__defProp(target, name11, {\n        get: all[name11],\n        enumerable: true\n    });\n};\n// streams/index.ts\n\n\n// core/index.ts\n\n// util/retry-with-exponential-backoff.ts\n\n\n// util/delay.ts\nasync function delay(delayInMs) {\n    return delayInMs === void 0 ? Promise.resolve() : new Promise((resolve)=>setTimeout(resolve, delayInMs));\n}\n// util/retry-error.ts\n\nvar name = \"AI_RetryError\";\nvar marker = `vercel.ai.error.${name}`;\nvar symbol = Symbol.for(marker);\nvar _a;\nvar RetryError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ message, reason, errors }){\n        super({\n            name,\n            message\n        });\n        this[_a] = true;\n        this.reason = reason;\n        this.errors = errors;\n        this.lastError = errors[errors.length - 1];\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isRetryError(error) {\n        return error instanceof Error && error.name === name && typeof error.reason === \"string\" && Array.isArray(error.errors);\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            reason: this.reason,\n            lastError: this.lastError,\n            errors: this.errors\n        };\n    }\n};\n_a = symbol;\n// util/retry-with-exponential-backoff.ts\nvar retryWithExponentialBackoff = ({ maxRetries = 2, initialDelayInMs = 2e3, backoffFactor = 2 } = {})=>async (f)=>_retryWithExponentialBackoff(f, {\n            maxRetries,\n            delayInMs: initialDelayInMs,\n            backoffFactor\n        });\nasync function _retryWithExponentialBackoff(f, { maxRetries, delayInMs, backoffFactor }, errors = []) {\n    try {\n        return await f();\n    } catch (error) {\n        if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isAbortError)(error)) {\n            throw error;\n        }\n        if (maxRetries === 0) {\n            throw error;\n        }\n        const errorMessage = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(error);\n        const newErrors = [\n            ...errors,\n            error\n        ];\n        const tryNumber = newErrors.length;\n        if (tryNumber > maxRetries) {\n            throw new RetryError({\n                message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n                reason: \"maxRetriesExceeded\",\n                errors: newErrors\n            });\n        }\n        if (error instanceof Error && _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isAPICallError(error) && error.isRetryable === true && tryNumber <= maxRetries) {\n            await delay(delayInMs);\n            return _retryWithExponentialBackoff(f, {\n                maxRetries,\n                delayInMs: backoffFactor * delayInMs,\n                backoffFactor\n            }, newErrors);\n        }\n        if (tryNumber === 1) {\n            throw error;\n        }\n        throw new RetryError({\n            message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n            reason: \"errorNotRetryable\",\n            errors: newErrors\n        });\n    }\n}\n// core/telemetry/assemble-operation-name.ts\nfunction assembleOperationName({ operationId, telemetry }) {\n    return {\n        // standardized operation and resource name:\n        \"operation.name\": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : \"\"}`,\n        \"resource.name\": telemetry == null ? void 0 : telemetry.functionId,\n        // detailed, AI SDK specific data:\n        \"ai.operationId\": operationId,\n        \"ai.telemetry.functionId\": telemetry == null ? void 0 : telemetry.functionId\n    };\n}\n// core/telemetry/get-base-telemetry-attributes.ts\nfunction getBaseTelemetryAttributes({ model, settings, telemetry, headers }) {\n    var _a11;\n    return {\n        \"ai.model.provider\": model.provider,\n        \"ai.model.id\": model.modelId,\n        // settings:\n        ...Object.entries(settings).reduce((attributes, [key, value])=>{\n            attributes[`ai.settings.${key}`] = value;\n            return attributes;\n        }, {}),\n        // add metadata as attributes:\n        ...Object.entries((_a11 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a11 : {}).reduce((attributes, [key, value])=>{\n            attributes[`ai.telemetry.metadata.${key}`] = value;\n            return attributes;\n        }, {}),\n        // request headers\n        ...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value])=>{\n            if (value !== void 0) {\n                attributes[`ai.request.headers.${key}`] = value;\n            }\n            return attributes;\n        }, {})\n    };\n}\n// core/telemetry/get-tracer.ts\n\n// core/telemetry/noop-tracer.ts\nvar noopTracer = {\n    startSpan () {\n        return noopSpan;\n    },\n    startActiveSpan (name11, arg1, arg2, arg3) {\n        if (typeof arg1 === \"function\") {\n            return arg1(noopSpan);\n        }\n        if (typeof arg2 === \"function\") {\n            return arg2(noopSpan);\n        }\n        if (typeof arg3 === \"function\") {\n            return arg3(noopSpan);\n        }\n    }\n};\nvar noopSpan = {\n    spanContext () {\n        return noopSpanContext;\n    },\n    setAttribute () {\n        return this;\n    },\n    setAttributes () {\n        return this;\n    },\n    addEvent () {\n        return this;\n    },\n    addLink () {\n        return this;\n    },\n    addLinks () {\n        return this;\n    },\n    setStatus () {\n        return this;\n    },\n    updateName () {\n        return this;\n    },\n    end () {\n        return this;\n    },\n    isRecording () {\n        return false;\n    },\n    recordException () {\n        return this;\n    }\n};\nvar noopSpanContext = {\n    traceId: \"\",\n    spanId: \"\",\n    traceFlags: 0\n};\n// core/telemetry/get-tracer.ts\nfunction getTracer({ isEnabled = false, tracer } = {}) {\n    if (!isEnabled) {\n        return noopTracer;\n    }\n    if (tracer) {\n        return tracer;\n    }\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(\"ai\");\n}\n// core/telemetry/record-span.ts\n\nfunction recordSpan({ name: name11, tracer, attributes, fn, endWhenDone = true }) {\n    return tracer.startActiveSpan(name11, {\n        attributes\n    }, async (span)=>{\n        try {\n            const result = await fn(span);\n            if (endWhenDone) {\n                span.end();\n            }\n            return result;\n        } catch (error) {\n            try {\n                if (error instanceof Error) {\n                    span.recordException({\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    });\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.SpanStatusCode.ERROR,\n                        message: error.message\n                    });\n                } else {\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.SpanStatusCode.ERROR\n                    });\n                }\n            } finally{\n                span.end();\n            }\n            throw error;\n        }\n    });\n}\n// core/telemetry/select-telemetry-attributes.ts\nfunction selectTelemetryAttributes({ telemetry, attributes }) {\n    if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) {\n        return {};\n    }\n    return Object.entries(attributes).reduce((attributes2, [key, value])=>{\n        if (value === void 0) {\n            return attributes2;\n        }\n        if (typeof value === \"object\" && \"input\" in value && typeof value.input === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) {\n                return attributes2;\n            }\n            const result = value.input();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        if (typeof value === \"object\" && \"output\" in value && typeof value.output === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) {\n                return attributes2;\n            }\n            const result = value.output();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        return {\n            ...attributes2,\n            [key]: value\n        };\n    }, {});\n}\n// core/embed/embed.ts\nasync function embed({ model, value, maxRetries, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embed\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embed\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                \"ai.value\": {\n                    input: ()=>JSON.stringify(value)\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const retry = retryWithExponentialBackoff({\n                maxRetries\n            });\n            const { embedding, usage, rawResponse } = await retry(()=>// nested spans to align with the embedMany telemetry data:\n                recordSpan({\n                    name: \"ai.embed.doEmbed\",\n                    attributes: selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            ...assembleOperationName({\n                                operationId: \"ai.embed.doEmbed\",\n                                telemetry\n                            }),\n                            ...baseTelemetryAttributes,\n                            // specific settings that only make sense on the outer level:\n                            \"ai.values\": {\n                                input: ()=>[\n                                        JSON.stringify(value)\n                                    ]\n                            }\n                        }\n                    }),\n                    tracer,\n                    fn: async (doEmbedSpan)=>{\n                        var _a11;\n                        const modelResponse = await model.doEmbed({\n                            values: [\n                                value\n                            ],\n                            abortSignal,\n                            headers\n                        });\n                        const embedding2 = modelResponse.embeddings[0];\n                        const usage2 = (_a11 = modelResponse.usage) != null ? _a11 : {\n                            tokens: NaN\n                        };\n                        doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.embeddings\": {\n                                    output: ()=>modelResponse.embeddings.map((embedding3)=>JSON.stringify(embedding3))\n                                },\n                                \"ai.usage.tokens\": usage2.tokens\n                            }\n                        }));\n                        return {\n                            embedding: embedding2,\n                            usage: usage2,\n                            rawResponse: modelResponse.rawResponse\n                        };\n                    }\n                }));\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embedding\": {\n                        output: ()=>JSON.stringify(embedding)\n                    },\n                    \"ai.usage.tokens\": usage.tokens\n                }\n            }));\n            return new DefaultEmbedResult({\n                value,\n                embedding,\n                usage,\n                rawResponse\n            });\n        }\n    });\n}\nvar DefaultEmbedResult = class {\n    constructor(options){\n        this.value = options.value;\n        this.embedding = options.embedding;\n        this.usage = options.usage;\n        this.rawResponse = options.rawResponse;\n    }\n};\n// core/util/split-array.ts\nfunction splitArray(array, chunkSize) {\n    if (chunkSize <= 0) {\n        throw new Error(\"chunkSize must be greater than 0\");\n    }\n    const result = [];\n    for(let i = 0; i < array.length; i += chunkSize){\n        result.push(array.slice(i, i + chunkSize));\n    }\n    return result;\n}\n// core/embed/embed-many.ts\nasync function embedMany({ model, values, maxRetries, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embedMany\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embedMany\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.values\": {\n                    input: ()=>values.map((value)=>JSON.stringify(value))\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const retry = retryWithExponentialBackoff({\n                maxRetries\n            });\n            const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;\n            if (maxEmbeddingsPerCall == null) {\n                const { embeddings: embeddings2, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>values.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a11;\n                            const modelResponse = await model.doEmbed({\n                                values,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings3 = modelResponse.embeddings;\n                            const usage2 = (_a11 = modelResponse.usage) != null ? _a11 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings3.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings3,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                span.setAttributes(selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                        \"ai.embeddings\": {\n                            output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                        },\n                        \"ai.usage.tokens\": usage.tokens\n                    }\n                }));\n                return new DefaultEmbedManyResult({\n                    values,\n                    embeddings: embeddings2,\n                    usage\n                });\n            }\n            const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n            const embeddings = [];\n            let tokens = 0;\n            for (const chunk of valueChunks){\n                const { embeddings: responseEmbeddings, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>chunk.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a11;\n                            const modelResponse = await model.doEmbed({\n                                values: chunk,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings2 = modelResponse.embeddings;\n                            const usage2 = (_a11 = modelResponse.usage) != null ? _a11 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings2,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                embeddings.push(...responseEmbeddings);\n                tokens += usage.tokens;\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embeddings\": {\n                        output: ()=>embeddings.map((embedding)=>JSON.stringify(embedding))\n                    },\n                    \"ai.usage.tokens\": tokens\n                }\n            }));\n            return new DefaultEmbedManyResult({\n                values,\n                embeddings,\n                usage: {\n                    tokens\n                }\n            });\n        }\n    });\n}\nvar DefaultEmbedManyResult = class {\n    constructor(options){\n        this.values = options.values;\n        this.embeddings = options.embeddings;\n        this.usage = options.usage;\n    }\n};\n// core/generate-object/generate-object.ts\n\n// util/download-error.ts\n\nvar name2 = \"AI_DownloadError\";\nvar marker2 = `vercel.ai.error.${name2}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar DownloadError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ url, statusCode, statusText, cause, message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}` }){\n        super({\n            name: name2,\n            message,\n            cause\n        });\n        this[_a2] = true;\n        this.url = url;\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker2);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isDownloadError(error) {\n        return error instanceof Error && error.name === name2 && typeof error.url === \"string\" && (error.statusCode == null || typeof error.statusCode === \"number\") && (error.statusText == null || typeof error.statusText === \"string\");\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            url: this.url,\n            statusCode: this.statusCode,\n            statusText: this.statusText,\n            cause: this.cause\n        };\n    }\n};\n_a2 = symbol2;\n// util/download.ts\nasync function download({ url, fetchImplementation = fetch }) {\n    var _a11;\n    const urlText = url.toString();\n    try {\n        const response = await fetchImplementation(urlText);\n        if (!response.ok) {\n            throw new DownloadError({\n                url: urlText,\n                statusCode: response.status,\n                statusText: response.statusText\n            });\n        }\n        return {\n            data: new Uint8Array(await response.arrayBuffer()),\n            mimeType: (_a11 = response.headers.get(\"content-type\")) != null ? _a11 : void 0\n        };\n    } catch (error) {\n        if (DownloadError.isInstance(error)) {\n            throw error;\n        }\n        throw new DownloadError({\n            url: urlText,\n            cause: error\n        });\n    }\n}\n// core/util/detect-image-mimetype.ts\nvar mimeTypeSignatures = [\n    {\n        mimeType: \"image/gif\",\n        bytes: [\n            71,\n            73,\n            70\n        ]\n    },\n    {\n        mimeType: \"image/png\",\n        bytes: [\n            137,\n            80,\n            78,\n            71\n        ]\n    },\n    {\n        mimeType: \"image/jpeg\",\n        bytes: [\n            255,\n            216\n        ]\n    },\n    {\n        mimeType: \"image/webp\",\n        bytes: [\n            82,\n            73,\n            70,\n            70\n        ]\n    }\n];\nfunction detectImageMimeType(image) {\n    for (const { bytes, mimeType } of mimeTypeSignatures){\n        if (image.length >= bytes.length && bytes.every((byte, index)=>image[index] === byte)) {\n            return mimeType;\n        }\n    }\n    return void 0;\n}\n// core/prompt/data-content.ts\n\n// core/prompt/invalid-data-content-error.ts\n\nvar name3 = \"AI_InvalidDataContentError\";\nvar marker3 = `vercel.ai.error.${name3}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar InvalidDataContentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ content, cause, message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.` }){\n        super({\n            name: name3,\n            message,\n            cause\n        });\n        this[_a3] = true;\n        this.content = content;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker3);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isInvalidDataContentError(error) {\n        return error instanceof Error && error.name === name3 && error.content != null;\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n            cause: this.cause,\n            content: this.content\n        };\n    }\n};\n_a3 = symbol3;\n// core/prompt/data-content.ts\n\nvar dataContentSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.instanceof(Uint8Array),\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.instanceof(ArrayBuffer),\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.custom(// Buffer might not be available in some environments such as CloudFlare:\n    (value)=>{\n        var _a11, _b;\n        return (_b = (_a11 = globalThis.Buffer) == null ? void 0 : _a11.isBuffer(value)) != null ? _b : false;\n    }, {\n        message: \"Must be a Buffer\"\n    })\n]);\nfunction convertDataContentToBase64String(content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    if (content instanceof ArrayBuffer) {\n        return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertUint8ArrayToBase64)(new Uint8Array(content));\n    }\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertUint8ArrayToBase64)(content);\n}\nfunction convertDataContentToUint8Array(content) {\n    if (content instanceof Uint8Array) {\n        return content;\n    }\n    if (typeof content === \"string\") {\n        try {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(content);\n        } catch (error) {\n            throw new InvalidDataContentError({\n                message: \"Invalid data content. Content string is not a base64-encoded media.\",\n                content,\n                cause: error\n            });\n        }\n    }\n    if (content instanceof ArrayBuffer) {\n        return new Uint8Array(content);\n    }\n    throw new InvalidDataContentError({\n        content\n    });\n}\nfunction convertUint8ArrayToText(uint8Array) {\n    try {\n        return new TextDecoder().decode(uint8Array);\n    } catch (error) {\n        throw new Error(\"Error decoding Uint8Array to text\");\n    }\n}\n// core/prompt/invalid-message-role-error.ts\n\nvar name4 = \"AI_InvalidMessageRoleError\";\nvar marker4 = `vercel.ai.error.${name4}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidMessageRoleError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ role, message = `Invalid message role: '${role}'. Must be one of: \"system\", \"user\", \"assistant\", \"tool\".` }){\n        super({\n            name: name4,\n            message\n        });\n        this[_a4] = true;\n        this.role = role;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker4);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isInvalidMessageRoleError(error) {\n        return error instanceof Error && error.name === name4 && typeof error.role === \"string\";\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n            role: this.role\n        };\n    }\n};\n_a4 = symbol4;\n// core/prompt/split-data-url.ts\nfunction splitDataUrl(dataUrl) {\n    try {\n        const [header, base64Content] = dataUrl.split(\",\");\n        return {\n            mimeType: header.split(\";\")[0].split(\":\")[1],\n            base64Content\n        };\n    } catch (error) {\n        return {\n            mimeType: void 0,\n            base64Content: void 0\n        };\n    }\n}\n// core/prompt/convert-to-language-model-prompt.ts\nasync function convertToLanguageModelPrompt({ prompt, modelSupportsImageUrls = true, modelSupportsUrl = ()=>false, downloadImplementation = download }) {\n    const downloadedAssets = await downloadAssets(prompt.messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl);\n    return [\n        ...prompt.system != null ? [\n            {\n                role: \"system\",\n                content: prompt.system\n            }\n        ] : [],\n        ...prompt.messages.map((message)=>convertToLanguageModelMessage(message, downloadedAssets))\n    ];\n}\nfunction convertToLanguageModelMessage(message, downloadedAssets) {\n    const role = message.role;\n    switch(role){\n        case \"system\":\n            {\n                return {\n                    role: \"system\",\n                    content: message.content,\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"user\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"user\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"user\",\n                    content: message.content.map((part)=>convertPartToLanguageModelPart(part, downloadedAssets)).filter((part)=>part.type !== \"text\" || part.text !== \"\"),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"assistant\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"assistant\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"assistant\",\n                    content: message.content.filter(// remove empty text parts:\n                    (part)=>part.type !== \"text\" || part.text !== \"\").map((part)=>{\n                        const { experimental_providerMetadata, ...rest } = part;\n                        return {\n                            ...rest,\n                            providerMetadata: experimental_providerMetadata\n                        };\n                    }),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"tool\":\n            {\n                return {\n                    role: \"tool\",\n                    content: message.content.map((part)=>({\n                            type: \"tool-result\",\n                            toolCallId: part.toolCallId,\n                            toolName: part.toolName,\n                            result: part.result,\n                            content: part.experimental_content,\n                            isError: part.isError,\n                            providerMetadata: part.experimental_providerMetadata\n                        })),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        default:\n            {\n                const _exhaustiveCheck = role;\n                throw new InvalidMessageRoleError({\n                    role: _exhaustiveCheck\n                });\n            }\n    }\n}\nasync function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {\n    const urls = messages.filter((message)=>message.role === \"user\").map((message)=>message.content).filter((content)=>Array.isArray(content)).flat().filter((part)=>part.type === \"image\" || part.type === \"file\").filter((part)=>!(part.type === \"image\" && modelSupportsImageUrls === true)).map((part)=>part.type === \"image\" ? part.image : part.data).map((part)=>// support string urls:\n        typeof part === \"string\" && (part.startsWith(\"http:\") || part.startsWith(\"https:\")) ? new URL(part) : part).filter((image)=>image instanceof URL).filter((url)=>!modelSupportsUrl(url));\n    const downloadedImages = await Promise.all(urls.map(async (url)=>({\n            url,\n            data: await downloadImplementation({\n                url\n            })\n        })));\n    return Object.fromEntries(downloadedImages.map(({ url, data })=>[\n            url.toString(),\n            data\n        ]));\n}\nfunction convertPartToLanguageModelPart(part, downloadedAssets) {\n    if (part.type === \"text\") {\n        return {\n            type: \"text\",\n            text: part.text,\n            providerMetadata: part.experimental_providerMetadata\n        };\n    }\n    let mimeType = part.mimeType;\n    let data;\n    let content;\n    let normalizedData;\n    const type = part.type;\n    switch(type){\n        case \"image\":\n            data = part.image;\n            break;\n        case \"file\":\n            data = part.data;\n            break;\n        default:\n            throw new Error(`Unsupported part type: ${type}`);\n    }\n    try {\n        content = typeof data === \"string\" ? new URL(data) : data;\n    } catch (error) {\n        content = data;\n    }\n    if (content instanceof URL) {\n        if (content.protocol === \"data:\") {\n            const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(content.toString());\n            if (dataUrlMimeType == null || base64Content == null) {\n                throw new Error(`Invalid data URL format in part ${type}`);\n            }\n            mimeType = dataUrlMimeType;\n            normalizedData = convertDataContentToUint8Array(base64Content);\n        } else {\n            const downloadedFile = downloadedAssets[content.toString()];\n            if (downloadedFile) {\n                normalizedData = downloadedFile.data;\n                mimeType != null ? mimeType : mimeType = downloadedFile.mimeType;\n            } else {\n                normalizedData = content;\n            }\n        }\n    } else {\n        normalizedData = convertDataContentToUint8Array(content);\n    }\n    switch(type){\n        case \"image\":\n            if (mimeType == null && normalizedData instanceof Uint8Array) {\n                mimeType = detectImageMimeType(normalizedData);\n            }\n            return {\n                type: \"image\",\n                image: normalizedData,\n                mimeType,\n                providerMetadata: part.experimental_providerMetadata\n            };\n        case \"file\":\n            if (mimeType == null) {\n                throw new Error(`Mime type is missing for file part`);\n            }\n            return {\n                type: \"file\",\n                data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,\n                mimeType,\n                providerMetadata: part.experimental_providerMetadata\n            };\n    }\n}\n// errors/invalid-argument-error.ts\n\nvar name5 = \"AI_InvalidArgumentError\";\nvar marker5 = `vercel.ai.error.${name5}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidArgumentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ parameter, value, message }){\n        super({\n            name: name5,\n            message: `Invalid argument for parameter ${parameter}: ${message}`\n        });\n        this[_a5] = true;\n        this.parameter = parameter;\n        this.value = value;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker5);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isInvalidArgumentError(error) {\n        return error instanceof Error && error.name === name5 && typeof error.parameter === \"string\" && typeof error.value === \"string\";\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n            parameter: this.parameter,\n            value: this.value\n        };\n    }\n};\n_a5 = symbol5;\n// core/prompt/prepare-call-settings.ts\nfunction prepareCallSettings({ maxTokens, temperature, topP, topK, presencePenalty, frequencyPenalty, stopSequences, seed, maxRetries }) {\n    if (maxTokens != null) {\n        if (!Number.isInteger(maxTokens)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be an integer\"\n            });\n        }\n        if (maxTokens < 1) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be >= 1\"\n            });\n        }\n    }\n    if (temperature != null) {\n        if (typeof temperature !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"temperature\",\n                value: temperature,\n                message: \"temperature must be a number\"\n            });\n        }\n    }\n    if (topP != null) {\n        if (typeof topP !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topP\",\n                value: topP,\n                message: \"topP must be a number\"\n            });\n        }\n    }\n    if (topK != null) {\n        if (typeof topK !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topK\",\n                value: topK,\n                message: \"topK must be a number\"\n            });\n        }\n    }\n    if (presencePenalty != null) {\n        if (typeof presencePenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"presencePenalty\",\n                value: presencePenalty,\n                message: \"presencePenalty must be a number\"\n            });\n        }\n    }\n    if (frequencyPenalty != null) {\n        if (typeof frequencyPenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"frequencyPenalty\",\n                value: frequencyPenalty,\n                message: \"frequencyPenalty must be a number\"\n            });\n        }\n    }\n    if (seed != null) {\n        if (!Number.isInteger(seed)) {\n            throw new InvalidArgumentError({\n                parameter: \"seed\",\n                value: seed,\n                message: \"seed must be an integer\"\n            });\n        }\n    }\n    if (maxRetries != null) {\n        if (!Number.isInteger(maxRetries)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be an integer\"\n            });\n        }\n        if (maxRetries < 0) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be >= 0\"\n            });\n        }\n    }\n    return {\n        maxTokens,\n        temperature: temperature != null ? temperature : 0,\n        topP,\n        topK,\n        presencePenalty,\n        frequencyPenalty,\n        stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,\n        seed,\n        maxRetries: maxRetries != null ? maxRetries : 2\n    };\n}\n// core/prompt/standardize-prompt.ts\n\n\n\n// core/prompt/message.ts\n\n// core/types/provider-metadata.ts\n\n// core/types/json-value.ts\n\nvar jsonValueSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.lazy(()=>zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.null(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.number(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.boolean(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.record(zod__WEBPACK_IMPORTED_MODULE_3__.z.string(), jsonValueSchema),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.array(jsonValueSchema)\n    ]));\n// core/types/provider-metadata.ts\nvar providerMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.record(zod__WEBPACK_IMPORTED_MODULE_3__.z.string(), zod__WEBPACK_IMPORTED_MODULE_3__.z.record(zod__WEBPACK_IMPORTED_MODULE_3__.z.string(), jsonValueSchema));\n// core/prompt/content-part.ts\n\n// core/prompt/tool-result-content.ts\n\nvar toolResultContentSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.array(zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"text\"),\n        text: zod__WEBPACK_IMPORTED_MODULE_3__.z.string()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"image\"),\n        data: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        mimeType: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional()\n    })\n]));\n// core/prompt/content-part.ts\nvar textPartSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar imagePartSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"image\"),\n    image: zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.instanceof(URL)\n    ]),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar filePartSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"file\"),\n    data: zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.instanceof(URL)\n    ]),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar toolCallPartSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"tool-call\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    args: zod__WEBPACK_IMPORTED_MODULE_3__.z.unknown()\n});\nvar toolResultPartSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"tool-result\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    result: zod__WEBPACK_IMPORTED_MODULE_3__.z.unknown(),\n    content: toolResultContentSchema.optional(),\n    isError: zod__WEBPACK_IMPORTED_MODULE_3__.z.boolean().optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\n// core/prompt/message.ts\nvar coreSystemMessageSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"system\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreUserMessageSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.array(zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n            textPartSchema,\n            imagePartSchema,\n            filePartSchema\n        ]))\n    ]),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreAssistantMessageSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_3__.z.array(zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n            textPartSchema,\n            toolCallPartSchema\n        ]))\n    ]),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreToolMessageSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_3__.z.literal(\"tool\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_3__.z.array(toolResultPartSchema),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreMessageSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.union([\n    coreSystemMessageSchema,\n    coreUserMessageSchema,\n    coreAssistantMessageSchema,\n    coreToolMessageSchema\n]);\n// core/prompt/detect-prompt-type.ts\nfunction detectPromptType(prompt) {\n    if (!Array.isArray(prompt)) {\n        return \"other\";\n    }\n    if (prompt.length === 0) {\n        return \"messages\";\n    }\n    const characteristics = prompt.map(detectSingleMessageCharacteristics);\n    if (characteristics.some((c)=>c === \"has-ui-specific-parts\")) {\n        return \"ui-messages\";\n    } else if (characteristics.every((c)=>c === \"has-core-specific-parts\" || c === \"message\")) {\n        return \"messages\";\n    } else {\n        return \"other\";\n    }\n}\nfunction detectSingleMessageCharacteristics(message) {\n    if (typeof message === \"object\" && message !== null && (message.role === \"function\" || // UI-only role\n    message.role === \"data\" || // UI-only role\n    \"toolInvocations\" in message || // UI-specific field\n    \"experimental_attachments\" in message)) {\n        return \"has-ui-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"content\" in message && (Array.isArray(message.content) || // Core messages can have array content\n    \"experimental_providerMetadata\" in message)) {\n        return \"has-core-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"role\" in message && \"content\" in message && typeof message.content === \"string\" && [\n        \"system\",\n        \"user\",\n        \"assistant\",\n        \"tool\"\n    ].includes(message.role)) {\n        return \"message\";\n    } else {\n        return \"other\";\n    }\n}\n// core/prompt/attachments-to-parts.ts\nfunction attachmentsToParts(attachments) {\n    var _a11, _b, _c;\n    const parts = [];\n    for (const attachment of attachments){\n        let url;\n        try {\n            url = new URL(attachment.url);\n        } catch (error) {\n            throw new Error(`Invalid URL: ${attachment.url}`);\n        }\n        switch(url.protocol){\n            case \"http:\":\n            case \"https:\":\n                {\n                    if ((_a11 = attachment.contentType) == null ? void 0 : _a11.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: url\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: url,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            case \"data:\":\n                {\n                    let header;\n                    let base64Content;\n                    let mimeType;\n                    try {\n                        [header, base64Content] = attachment.url.split(\",\");\n                        mimeType = header.split(\";\")[0].split(\":\")[1];\n                    } catch (error) {\n                        throw new Error(`Error processing data URL: ${attachment.url}`);\n                    }\n                    if (mimeType == null || base64Content == null) {\n                        throw new Error(`Invalid data URL format: ${attachment.url}`);\n                    }\n                    if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: convertDataContentToUint8Array(base64Content)\n                        });\n                    } else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith(\"text/\")) {\n                        parts.push({\n                            type: \"text\",\n                            text: convertUint8ArrayToText(convertDataContentToUint8Array(base64Content))\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image or text, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: base64Content,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            default:\n                {\n                    throw new Error(`Unsupported URL protocol: ${url.protocol}`);\n                }\n        }\n    }\n    return parts;\n}\n// core/prompt/message-conversion-error.ts\n\nvar name6 = \"AI_MessageConversionError\";\nvar marker6 = `vercel.ai.error.${name6}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar MessageConversionError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ originalMessage, message }){\n        super({\n            name: name6,\n            message\n        });\n        this[_a6] = true;\n        this.originalMessage = originalMessage;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker6);\n    }\n};\n_a6 = symbol6;\n// core/prompt/convert-to-core-messages.ts\nfunction convertToCoreMessages(messages, options) {\n    var _a11;\n    const tools = (_a11 = options == null ? void 0 : options.tools) != null ? _a11 : {};\n    const coreMessages = [];\n    for (const message of messages){\n        const { role, content, toolInvocations, experimental_attachments } = message;\n        switch(role){\n            case \"system\":\n                {\n                    coreMessages.push({\n                        role: \"system\",\n                        content\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    coreMessages.push({\n                        role: \"user\",\n                        content: experimental_attachments ? [\n                            {\n                                type: \"text\",\n                                text: content\n                            },\n                            ...attachmentsToParts(experimental_attachments)\n                        ] : content\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    if (toolInvocations == null) {\n                        coreMessages.push({\n                            role: \"assistant\",\n                            content\n                        });\n                        break;\n                    }\n                    coreMessages.push({\n                        role: \"assistant\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: content\n                            },\n                            ...toolInvocations.map(({ toolCallId, toolName, args })=>({\n                                    type: \"tool-call\",\n                                    toolCallId,\n                                    toolName,\n                                    args\n                                }))\n                        ]\n                    });\n                    coreMessages.push({\n                        role: \"tool\",\n                        content: toolInvocations.map((toolInvocation)=>{\n                            if (!(\"result\" in toolInvocation)) {\n                                throw new MessageConversionError({\n                                    originalMessage: message,\n                                    message: \"ToolInvocation must have a result: \" + JSON.stringify(toolInvocation)\n                                });\n                            }\n                            const { toolCallId, toolName, result } = toolInvocation;\n                            const tool2 = tools[toolName];\n                            return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                                type: \"tool-result\",\n                                toolCallId,\n                                toolName,\n                                result: tool2.experimental_toToolResultContent(result),\n                                experimental_content: tool2.experimental_toToolResultContent(result)\n                            } : {\n                                type: \"tool-result\",\n                                toolCallId,\n                                toolName,\n                                result\n                            };\n                        })\n                    });\n                    break;\n                }\n            case \"function\":\n            case \"data\":\n            case \"tool\":\n                {\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new MessageConversionError({\n                        originalMessage: message,\n                        message: `Unsupported role: ${_exhaustiveCheck}`\n                    });\n                }\n        }\n    }\n    return coreMessages;\n}\n// core/prompt/standardize-prompt.ts\nfunction standardizePrompt({ prompt, tools }) {\n    if (prompt.prompt == null && prompt.messages == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n            prompt,\n            message: \"prompt or messages must be defined\"\n        });\n    }\n    if (prompt.prompt != null && prompt.messages != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n            prompt,\n            message: \"prompt and messages cannot be defined at the same time\"\n        });\n    }\n    if (prompt.system != null && typeof prompt.system !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n            prompt,\n            message: \"system must be a string\"\n        });\n    }\n    if (prompt.prompt != null) {\n        if (typeof prompt.prompt !== \"string\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n                prompt,\n                message: \"prompt must be a string\"\n            });\n        }\n        return {\n            type: \"prompt\",\n            system: prompt.system,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt.prompt\n                }\n            ]\n        };\n    }\n    if (prompt.messages != null) {\n        const promptType = detectPromptType(prompt.messages);\n        if (promptType === \"other\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\"\n            });\n        }\n        const messages = promptType === \"ui-messages\" ? convertToCoreMessages(prompt.messages, {\n            tools\n        }) : prompt.messages;\n        const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n            value: messages,\n            schema: zod__WEBPACK_IMPORTED_MODULE_3__.z.array(coreMessageSchema)\n        });\n        if (!validationResult.success) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\",\n                cause: validationResult.error\n            });\n        }\n        return {\n            type: \"messages\",\n            messages,\n            system: prompt.system\n        };\n    }\n    throw new Error(\"unreachable\");\n}\n// core/types/usage.ts\nfunction calculateLanguageModelUsage(usage) {\n    return {\n        promptTokens: usage.promptTokens,\n        completionTokens: usage.completionTokens,\n        totalTokens: usage.promptTokens + usage.completionTokens\n    };\n}\n// core/util/prepare-response-headers.ts\nfunction prepareResponseHeaders(init, { contentType, dataStreamVersion }) {\n    var _a11;\n    const headers = new Headers((_a11 = init == null ? void 0 : init.headers) != null ? _a11 : {});\n    if (!headers.has(\"Content-Type\")) {\n        headers.set(\"Content-Type\", contentType);\n    }\n    if (dataStreamVersion !== void 0) {\n        headers.set(\"X-Vercel-AI-Data-Stream\", dataStreamVersion);\n    }\n    return headers;\n}\n// core/generate-object/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({ prompt, schema, schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0, schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX }) {\n    return [\n        prompt != null && prompt.length > 0 ? prompt : void 0,\n        prompt != null && prompt.length > 0 ? \"\" : void 0,\n        // add a newline if prompt is not null\n        schemaPrefix,\n        schema != null ? JSON.stringify(schema) : void 0,\n        schemaSuffix\n    ].filter((line)=>line != null).join(\"\\n\");\n}\n// core/generate-object/no-object-generated-error.ts\n\nvar name7 = \"AI_NoObjectGeneratedError\";\nvar marker7 = `vercel.ai.error.${name7}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar NoObjectGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    // used in isInstance\n    constructor({ message = \"No object generated.\" } = {}){\n        super({\n            name: name7,\n            message\n        });\n        this[_a7] = true;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker7);\n    }\n    /**\n   * @deprecated Use isInstance instead.\n   */ static isNoObjectGeneratedError(error) {\n        return error instanceof Error && error.name === name7;\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            cause: this.cause,\n            message: this.message,\n            stack: this.stack\n        };\n    }\n};\n_a7 = symbol7;\n// core/generate-object/output-strategy.ts\n\n\n\n// core/util/async-iterable-stream.ts\nfunction createAsyncIterableStream(source, transformer) {\n    const transformedStream = source.pipeThrough(new TransformStream(transformer));\n    transformedStream[Symbol.asyncIterator] = ()=>{\n        const reader = transformedStream.getReader();\n        return {\n            async next () {\n                const { done, value } = await reader.read();\n                return done ? {\n                    done: true,\n                    value: void 0\n                } : {\n                    done: false,\n                    value\n                };\n            }\n        };\n    };\n    return transformedStream;\n}\n// core/generate-object/output-strategy.ts\nvar noSchemaOutputStrategy = {\n    type: \"no-schema\",\n    jsonSchema: void 0,\n    validatePartialResult ({ value, textDelta }) {\n        return {\n            success: true,\n            value: {\n                partial: value,\n                textDelta\n            }\n        };\n    },\n    validateFinalResult (value) {\n        return value === void 0 ? {\n            success: false,\n            error: new NoObjectGeneratedError()\n        } : {\n            success: true,\n            value\n        };\n    },\n    createElementStream () {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n            functionality: \"element streams in no-schema mode\"\n        });\n    }\n};\nvar objectOutputStrategy = (schema)=>({\n        type: \"object\",\n        jsonSchema: schema.jsonSchema,\n        validatePartialResult ({ value, textDelta }) {\n            return {\n                success: true,\n                value: {\n                    // Note: currently no validation of partial results:\n                    partial: value,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n                value,\n                schema\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                functionality: \"element streams in object mode\"\n            });\n        }\n    });\nvar arrayOutputStrategy = (schema)=>{\n    const { $schema, ...itemSchema } = schema.jsonSchema;\n    return {\n        type: \"enum\",\n        // wrap in object that contains array of elements, since most LLMs will not\n        // be able to generate an array directly:\n        // possible future optimization: use arrays directly when model supports grammar-guided generation\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                elements: {\n                    type: \"array\",\n                    items: itemSchema\n                }\n            },\n            required: [\n                \"elements\"\n            ],\n            additionalProperties: false\n        },\n        validatePartialResult ({ value, latestObject, isFirstDelta, isFinalDelta }) {\n            var _a11;\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            const resultArray = [];\n            for(let i = 0; i < inputArray.length; i++){\n                const element = inputArray[i];\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (i === inputArray.length - 1 && !isFinalDelta) {\n                    continue;\n                }\n                if (!result.success) {\n                    return result;\n                }\n                resultArray.push(result.value);\n            }\n            const publishedElementCount = (_a11 = latestObject == null ? void 0 : latestObject.length) != null ? _a11 : 0;\n            let textDelta = \"\";\n            if (isFirstDelta) {\n                textDelta += \"[\";\n            }\n            if (publishedElementCount > 0) {\n                textDelta += \",\";\n            }\n            textDelta += resultArray.slice(publishedElementCount).map((element)=>JSON.stringify(element)).join(\",\");\n            if (isFinalDelta) {\n                textDelta += \"]\";\n            }\n            return {\n                success: true,\n                value: {\n                    partial: resultArray,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            for (const element of inputArray){\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (!result.success) {\n                    return result;\n                }\n            }\n            return {\n                success: true,\n                value: inputArray\n            };\n        },\n        createElementStream (originalStream) {\n            let publishedElements = 0;\n            return createAsyncIterableStream(originalStream, {\n                transform (chunk, controller) {\n                    switch(chunk.type){\n                        case \"object\":\n                            {\n                                const array = chunk.object;\n                                for(; publishedElements < array.length; publishedElements++){\n                                    controller.enqueue(array[publishedElements]);\n                                }\n                                break;\n                            }\n                        case \"text-delta\":\n                        case \"finish\":\n                            break;\n                        case \"error\":\n                            controller.error(chunk.error);\n                            break;\n                        default:\n                            {\n                                const _exhaustiveCheck = chunk;\n                                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                            }\n                    }\n                }\n            });\n        }\n    };\n};\nvar enumOutputStrategy = (enumValues)=>{\n    return {\n        type: \"enum\",\n        // wrap in object that contains result, since most LLMs will not\n        // be able to generate an enum value directly:\n        // possible future optimization: use enums directly when model supports top-level enums\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                result: {\n                    type: \"string\",\n                    enum: enumValues\n                }\n            },\n            required: [\n                \"result\"\n            ],\n            additionalProperties: false\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isJSONObject)(value) || typeof value.result !== \"string\") {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n                        value,\n                        cause: 'value must be an object that contains a string in the \"result\" property.'\n                    })\n                };\n            }\n            const result = value.result;\n            return enumValues.includes(result) ? {\n                success: true,\n                value: result\n            } : {\n                success: false,\n                error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n                    value,\n                    cause: \"value must be a string in the enum\"\n                })\n            };\n        },\n        validatePartialResult () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                functionality: \"partial results in enum mode\"\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                functionality: \"element streams in enum mode\"\n            });\n        }\n    };\n};\nfunction getOutputStrategy({ output, schema, enumValues }) {\n    switch(output){\n        case \"object\":\n            return objectOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.asSchema)(schema));\n        case \"array\":\n            return arrayOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.asSchema)(schema));\n        case \"enum\":\n            return enumOutputStrategy(enumValues);\n        case \"no-schema\":\n            return noSchemaOutputStrategy;\n        default:\n            {\n                const _exhaustiveCheck = output;\n                throw new Error(`Unsupported output: ${_exhaustiveCheck}`);\n            }\n    }\n}\n// core/generate-object/validate-object-generation-input.ts\nfunction validateObjectGenerationInput({ output, mode, schema, schemaName, schemaDescription, enumValues }) {\n    if (output != null && output !== \"object\" && output !== \"array\" && output !== \"enum\" && output !== \"no-schema\") {\n        throw new InvalidArgumentError({\n            parameter: \"output\",\n            value: output,\n            message: \"Invalid output type.\"\n        });\n    }\n    if (output === \"no-schema\") {\n        if (mode === \"auto\" || mode === \"tool\") {\n            throw new InvalidArgumentError({\n                parameter: \"mode\",\n                value: mode,\n                message: 'Mode must be \"json\" for no-schema output.'\n            });\n        }\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for no-schema output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for no-schema output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for no-schema output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for no-schema output.\"\n            });\n        }\n    }\n    if (output === \"object\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is required for object output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for object output.\"\n            });\n        }\n    }\n    if (output === \"array\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Element schema is required for array output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for array output.\"\n            });\n        }\n    }\n    if (output === \"enum\") {\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for enum output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for enum output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for enum output.\"\n            });\n        }\n        if (enumValues == null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are required for enum output.\"\n            });\n        }\n        for (const value of enumValues){\n            if (typeof value !== \"string\") {\n                throw new InvalidArgumentError({\n                    parameter: \"enumValues\",\n                    value,\n                    message: \"Enum values must be strings.\"\n                });\n            }\n        }\n    }\n}\n// core/generate-object/generate-object.ts\nvar originalGenerateId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nasync function generateObject({ model, enum: enumValues, // rename bc enum is reserved by typescript\nschema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries, abortSignal, headers, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, _internal: { generateId: generateId3 = originalGenerateId, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription,\n        enumValues\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema,\n        enumValues\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateObject\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateObject\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                    input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                } : void 0,\n                \"ai.schema.name\": schemaName,\n                \"ai.schema.description\": schemaDescription,\n                \"ai.settings.output\": outputStrategy.type,\n                \"ai.settings.mode\": mode\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a11, _b;\n            const retry = retryWithExponentialBackoff({\n                maxRetries\n            });\n            if (mode === \"auto\" || mode == null) {\n                mode = model.defaultObjectGenerationMode;\n            }\n            let result;\n            let finishReason;\n            let usage;\n            let warnings;\n            let rawResponse;\n            let response;\n            let request;\n            let logprobs;\n            let resultProviderMetadata;\n            switch(mode){\n                case \"json\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                    prompt: system\n                                }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                    prompt: system,\n                                    schema: outputStrategy.jsonSchema\n                                }),\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: model.supportsUrl\n                        });\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>standardizedPrompt.type\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a12, _b2, _c, _d, _e, _f;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-json\",\n                                            schema: outputStrategy.jsonSchema,\n                                            name: schemaName,\n                                            description: schemaDescription\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat: standardizedPrompt.type,\n                                        prompt: promptMessages,\n                                        providerMetadata,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    if (result2.text === void 0) {\n                                        throw new NoObjectGeneratedError();\n                                    }\n                                    const responseData = {\n                                        id: (_b2 = (_a12 = result2.response) == null ? void 0 : _a12.id) != null ? _b2 : generateId3(),\n                                        timestamp: (_d = (_c = result2.response) == null ? void 0 : _c.timestamp) != null ? _d : currentDate(),\n                                        modelId: (_f = (_e = result2.response) == null ? void 0 : _e.modelId) != null ? _f : model.modelId\n                                    };\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>result2.text\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // deprecated:\n                                            \"ai.finishReason\": result2.finishReason,\n                                            \"ai.result.object\": {\n                                                output: ()=>result2.text\n                                            },\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.prompt_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.completion_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText: result2.text,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_a11 = generateResult.request) != null ? _a11 : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case \"tool\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system,\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: model.supportsUrl\n                        });\n                        const inputFormat = standardizedPrompt.type;\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>inputFormat\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a12, _b2, _c, _d, _e, _f, _g, _h;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-tool\",\n                                            tool: {\n                                                type: \"function\",\n                                                name: schemaName != null ? schemaName : \"json\",\n                                                description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                                parameters: outputStrategy.jsonSchema\n                                            }\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat,\n                                        prompt: promptMessages,\n                                        providerMetadata,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    const objectText = (_b2 = (_a12 = result2.toolCalls) == null ? void 0 : _a12[0]) == null ? void 0 : _b2.args;\n                                    if (objectText === void 0) {\n                                        throw new NoObjectGeneratedError();\n                                    }\n                                    const responseData = {\n                                        id: (_d = (_c = result2.response) == null ? void 0 : _c.id) != null ? _d : generateId3(),\n                                        timestamp: (_f = (_e = result2.response) == null ? void 0 : _e.timestamp) != null ? _f : currentDate(),\n                                        modelId: (_h = (_g = result2.response) == null ? void 0 : _g.modelId) != null ? _h : model.modelId\n                                    };\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>objectText\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // deprecated:\n                                            \"ai.finishReason\": result2.finishReason,\n                                            \"ai.result.object\": {\n                                                output: ()=>objectText\n                                            },\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.input_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.output_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_b = generateResult.request) != null ? _b : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case void 0:\n                    {\n                        throw new Error(\"Model does not have a default object generation mode.\");\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = mode;\n                        throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                    }\n            }\n            const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)({\n                text: result\n            });\n            if (!parseResult.success) {\n                throw parseResult.error;\n            }\n            const validationResult = outputStrategy.validateFinalResult(parseResult.value);\n            if (!validationResult.success) {\n                throw validationResult.error;\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": finishReason,\n                    \"ai.response.object\": {\n                        output: ()=>JSON.stringify(validationResult.value)\n                    },\n                    \"ai.usage.promptTokens\": usage.promptTokens,\n                    \"ai.usage.completionTokens\": usage.completionTokens,\n                    // deprecated:\n                    \"ai.finishReason\": finishReason,\n                    \"ai.result.object\": {\n                        output: ()=>JSON.stringify(validationResult.value)\n                    }\n                }\n            }));\n            return new DefaultGenerateObjectResult({\n                object: validationResult.value,\n                finishReason,\n                usage: calculateLanguageModelUsage(usage),\n                warnings,\n                request,\n                response: {\n                    ...response,\n                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                },\n                logprobs,\n                providerMetadata: resultProviderMetadata\n            });\n        }\n    });\n}\nvar DefaultGenerateObjectResult = class {\n    constructor(options){\n        this.object = options.object;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.response = options.response;\n        this.request = options.request;\n        this.rawResponse = {\n            headers: options.response.headers\n        };\n        this.logprobs = options.logprobs;\n    }\n    toJsonResponse(init) {\n        var _a11;\n        return new Response(JSON.stringify(this.object), {\n            status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n            headers: prepareResponseHeaders(init, {\n                contentType: \"application/json; charset=utf-8\"\n            })\n        });\n    }\n};\nvar experimental_generateObject = generateObject;\n// core/generate-object/stream-object.ts\n\n\n// util/create-resolvable-promise.ts\nfunction createResolvablePromise() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n// util/delayed-promise.ts\nvar DelayedPromise = class {\n    constructor(){\n        this.status = {\n            type: \"pending\"\n        };\n        this._resolve = void 0;\n        this._reject = void 0;\n    }\n    get value() {\n        if (this.promise) {\n            return this.promise;\n        }\n        this.promise = new Promise((resolve, reject)=>{\n            if (this.status.type === \"resolved\") {\n                resolve(this.status.value);\n            } else if (this.status.type === \"rejected\") {\n                reject(this.status.error);\n            }\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        return this.promise;\n    }\n    resolve(value) {\n        var _a11;\n        this.status = {\n            type: \"resolved\",\n            value\n        };\n        if (this.promise) {\n            (_a11 = this._resolve) == null ? void 0 : _a11.call(this, value);\n        }\n    }\n    reject(error) {\n        var _a11;\n        this.status = {\n            type: \"rejected\",\n            error\n        };\n        if (this.promise) {\n            (_a11 = this._reject) == null ? void 0 : _a11.call(this, error);\n        }\n    }\n};\n// core/util/now.ts\nfunction now() {\n    var _a11, _b;\n    return (_b = (_a11 = globalThis == null ? void 0 : globalThis.performance) == null ? void 0 : _a11.now()) != null ? _b : Date.now();\n}\n// core/util/prepare-outgoing-http-headers.ts\nfunction prepareOutgoingHttpHeaders(init, { contentType, dataStreamVersion }) {\n    const headers = {};\n    if ((init == null ? void 0 : init.headers) != null) {\n        for (const [key, value] of Object.entries(init.headers)){\n            headers[key] = value;\n        }\n    }\n    if (headers[\"Content-Type\"] == null) {\n        headers[\"Content-Type\"] = contentType;\n    }\n    if (dataStreamVersion !== void 0) {\n        headers[\"X-Vercel-AI-Data-Stream\"] = dataStreamVersion;\n    }\n    return headers;\n}\n// core/util/write-to-server-response.ts\nfunction writeToServerResponse({ response, status, statusText, headers, stream }) {\n    response.writeHead(status != null ? status : 200, statusText, headers);\n    const reader = stream.getReader();\n    const read = async ()=>{\n        try {\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                response.write(value);\n            }\n        } catch (error) {\n            throw error;\n        } finally{\n            response.end();\n        }\n    };\n    read();\n}\n// core/generate-object/stream-object.ts\nvar originalGenerateId2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nasync function streamObject({ model, schema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries, abortSignal, headers, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, onFinish, _internal: { generateId: generateId3 = originalGenerateId2, currentDate = ()=>/* @__PURE__ */ new Date(), now: now2 = now } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    const retry = retryWithExponentialBackoff({\n        maxRetries\n    });\n    return recordSpan({\n        name: \"ai.streamObject\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.streamObject\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                    input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                } : void 0,\n                \"ai.schema.name\": schemaName,\n                \"ai.schema.description\": schemaDescription,\n                \"ai.settings.output\": outputStrategy.type,\n                \"ai.settings.mode\": mode\n            }\n        }),\n        tracer,\n        endWhenDone: false,\n        fn: async (rootSpan)=>{\n            if (mode === \"auto\" || mode == null) {\n                mode = model.defaultObjectGenerationMode;\n            }\n            let callOptions;\n            let transformer;\n            switch(mode){\n                case \"json\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                    prompt: system\n                                }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                    prompt: system,\n                                    schema: outputStrategy.jsonSchema\n                                }),\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        callOptions = {\n                            mode: {\n                                type: \"object-json\",\n                                schema: outputStrategy.jsonSchema,\n                                name: schemaName,\n                                description: schemaDescription\n                            },\n                            ...prepareCallSettings(settings),\n                            inputFormat: standardizedPrompt.type,\n                            prompt: await convertToLanguageModelPrompt({\n                                prompt: standardizedPrompt,\n                                modelSupportsImageUrls: model.supportsImageUrls,\n                                modelSupportsUrl: model.supportsUrl\n                            }),\n                            providerMetadata,\n                            abortSignal,\n                            headers\n                        };\n                        transformer = {\n                            transform: (chunk, controller)=>{\n                                switch(chunk.type){\n                                    case \"text-delta\":\n                                        controller.enqueue(chunk.textDelta);\n                                        break;\n                                    case \"response-metadata\":\n                                    case \"finish\":\n                                    case \"error\":\n                                        controller.enqueue(chunk);\n                                        break;\n                                }\n                            }\n                        };\n                        break;\n                    }\n                case \"tool\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system,\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        callOptions = {\n                            mode: {\n                                type: \"object-tool\",\n                                tool: {\n                                    type: \"function\",\n                                    name: schemaName != null ? schemaName : \"json\",\n                                    description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                    parameters: outputStrategy.jsonSchema\n                                }\n                            },\n                            ...prepareCallSettings(settings),\n                            inputFormat: standardizedPrompt.type,\n                            prompt: await convertToLanguageModelPrompt({\n                                prompt: standardizedPrompt,\n                                modelSupportsImageUrls: model.supportsImageUrls,\n                                modelSupportsUrl: model.supportsUrl\n                            }),\n                            providerMetadata,\n                            abortSignal,\n                            headers\n                        };\n                        transformer = {\n                            transform (chunk, controller) {\n                                switch(chunk.type){\n                                    case \"tool-call-delta\":\n                                        controller.enqueue(chunk.argsTextDelta);\n                                        break;\n                                    case \"response-metadata\":\n                                    case \"finish\":\n                                    case \"error\":\n                                        controller.enqueue(chunk);\n                                        break;\n                                }\n                            }\n                        };\n                        break;\n                    }\n                case void 0:\n                    {\n                        throw new Error(\"Model does not have a default object generation mode.\");\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = mode;\n                        throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                    }\n            }\n            const { result: { stream, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await retry(()=>recordSpan({\n                    name: \"ai.streamObject.doStream\",\n                    attributes: selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            ...assembleOperationName({\n                                operationId: \"ai.streamObject.doStream\",\n                                telemetry\n                            }),\n                            ...baseTelemetryAttributes,\n                            \"ai.prompt.format\": {\n                                input: ()=>callOptions.inputFormat\n                            },\n                            \"ai.prompt.messages\": {\n                                input: ()=>JSON.stringify(callOptions.prompt)\n                            },\n                            \"ai.settings.mode\": mode,\n                            // standardized gen-ai llm span attributes:\n                            \"gen_ai.system\": model.provider,\n                            \"gen_ai.request.model\": model.modelId,\n                            \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                            \"gen_ai.request.max_tokens\": settings.maxTokens,\n                            \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                            \"gen_ai.request.temperature\": settings.temperature,\n                            \"gen_ai.request.top_k\": settings.topK,\n                            \"gen_ai.request.top_p\": settings.topP\n                        }\n                    }),\n                    tracer,\n                    endWhenDone: false,\n                    fn: async (doStreamSpan2)=>({\n                            startTimestampMs: now2(),\n                            doStreamSpan: doStreamSpan2,\n                            result: await model.doStream(callOptions)\n                        })\n                }));\n            return new DefaultStreamObjectResult({\n                outputStrategy,\n                stream: stream.pipeThrough(new TransformStream(transformer)),\n                warnings,\n                rawResponse,\n                request: request != null ? request : {},\n                onFinish,\n                rootSpan,\n                doStreamSpan,\n                telemetry,\n                startTimestampMs,\n                modelId: model.modelId,\n                now: now2,\n                currentDate,\n                generateId: generateId3\n            });\n        }\n    });\n}\nvar DefaultStreamObjectResult = class {\n    constructor({ stream, warnings, rawResponse, request, outputStrategy, onFinish, rootSpan, doStreamSpan, telemetry, startTimestampMs, modelId, now: now2, currentDate, generateId: generateId3 }){\n        this.warnings = warnings;\n        this.rawResponse = rawResponse;\n        this.outputStrategy = outputStrategy;\n        this.request = Promise.resolve(request);\n        this.objectPromise = new DelayedPromise();\n        const { resolve: resolveUsage, promise: usagePromise } = createResolvablePromise();\n        this.usage = usagePromise;\n        const { resolve: resolveResponse, promise: responsePromise } = createResolvablePromise();\n        this.response = responsePromise;\n        const { resolve: resolveProviderMetadata, promise: providerMetadataPromise } = createResolvablePromise();\n        this.experimental_providerMetadata = providerMetadataPromise;\n        let usage;\n        let finishReason;\n        let providerMetadata;\n        let object;\n        let error;\n        let accumulatedText = \"\";\n        let textDelta = \"\";\n        let response = {\n            id: generateId3(),\n            timestamp: currentDate(),\n            modelId\n        };\n        let latestObjectJson = void 0;\n        let latestObject = void 0;\n        let isFirstChunk = true;\n        let isFirstDelta = true;\n        const self = this;\n        this.originalStream = stream.pipeThrough(new TransformStream({\n            async transform (chunk, controller) {\n                var _a11, _b, _c;\n                if (isFirstChunk) {\n                    const msToFirstChunk = now2() - startTimestampMs;\n                    isFirstChunk = false;\n                    doStreamSpan.addEvent(\"ai.stream.firstChunk\", {\n                        \"ai.stream.msToFirstChunk\": msToFirstChunk\n                    });\n                    doStreamSpan.setAttributes({\n                        \"ai.stream.msToFirstChunk\": msToFirstChunk\n                    });\n                }\n                if (typeof chunk === \"string\") {\n                    accumulatedText += chunk;\n                    textDelta += chunk;\n                    const { value: currentObjectJson, state: parseState } = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.parsePartialJson)(accumulatedText);\n                    if (currentObjectJson !== void 0 && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.isDeepEqualData)(latestObjectJson, currentObjectJson)) {\n                        const validationResult = outputStrategy.validatePartialResult({\n                            value: currentObjectJson,\n                            textDelta,\n                            latestObject,\n                            isFirstDelta,\n                            isFinalDelta: parseState === \"successful-parse\"\n                        });\n                        if (validationResult.success && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.isDeepEqualData)(latestObject, validationResult.value.partial)) {\n                            latestObjectJson = currentObjectJson;\n                            latestObject = validationResult.value.partial;\n                            controller.enqueue({\n                                type: \"object\",\n                                object: latestObject\n                            });\n                            controller.enqueue({\n                                type: \"text-delta\",\n                                textDelta: validationResult.value.textDelta\n                            });\n                            textDelta = \"\";\n                            isFirstDelta = false;\n                        }\n                    }\n                    return;\n                }\n                switch(chunk.type){\n                    case \"response-metadata\":\n                        {\n                            response = {\n                                id: (_a11 = chunk.id) != null ? _a11 : response.id,\n                                timestamp: (_b = chunk.timestamp) != null ? _b : response.timestamp,\n                                modelId: (_c = chunk.modelId) != null ? _c : response.modelId\n                            };\n                            break;\n                        }\n                    case \"finish\":\n                        {\n                            if (textDelta !== \"\") {\n                                controller.enqueue({\n                                    type: \"text-delta\",\n                                    textDelta\n                                });\n                            }\n                            finishReason = chunk.finishReason;\n                            usage = calculateLanguageModelUsage(chunk.usage);\n                            providerMetadata = chunk.providerMetadata;\n                            controller.enqueue({\n                                ...chunk,\n                                usage,\n                                response\n                            });\n                            resolveUsage(usage);\n                            resolveProviderMetadata(providerMetadata);\n                            resolveResponse({\n                                ...response,\n                                headers: rawResponse == null ? void 0 : rawResponse.headers\n                            });\n                            const validationResult = outputStrategy.validateFinalResult(latestObjectJson);\n                            if (validationResult.success) {\n                                object = validationResult.value;\n                                self.objectPromise.resolve(object);\n                            } else {\n                                error = validationResult.error;\n                                self.objectPromise.reject(error);\n                            }\n                            break;\n                        }\n                    default:\n                        {\n                            controller.enqueue(chunk);\n                            break;\n                        }\n                }\n            },\n            // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n            async flush (controller) {\n                try {\n                    const finalUsage = usage != null ? usage : {\n                        promptTokens: NaN,\n                        completionTokens: NaN,\n                        totalTokens: NaN\n                    };\n                    doStreamSpan.setAttributes(selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            \"ai.response.finishReason\": finishReason,\n                            \"ai.response.object\": {\n                                output: ()=>JSON.stringify(object)\n                            },\n                            \"ai.response.id\": response.id,\n                            \"ai.response.model\": response.modelId,\n                            \"ai.response.timestamp\": response.timestamp.toISOString(),\n                            \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                            \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                            // deprecated\n                            \"ai.finishReason\": finishReason,\n                            \"ai.result.object\": {\n                                output: ()=>JSON.stringify(object)\n                            },\n                            // standardized gen-ai llm span attributes:\n                            \"gen_ai.response.finish_reasons\": [\n                                finishReason\n                            ],\n                            \"gen_ai.response.id\": response.id,\n                            \"gen_ai.response.model\": response.modelId,\n                            \"gen_ai.usage.input_tokens\": finalUsage.promptTokens,\n                            \"gen_ai.usage.output_tokens\": finalUsage.completionTokens\n                        }\n                    }));\n                    doStreamSpan.end();\n                    rootSpan.setAttributes(selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                            \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                            \"ai.response.object\": {\n                                output: ()=>JSON.stringify(object)\n                            },\n                            // deprecated\n                            \"ai.result.object\": {\n                                output: ()=>JSON.stringify(object)\n                            }\n                        }\n                    }));\n                    await (onFinish == null ? void 0 : onFinish({\n                        usage: finalUsage,\n                        object,\n                        error,\n                        rawResponse,\n                        response: {\n                            ...response,\n                            headers: rawResponse == null ? void 0 : rawResponse.headers\n                        },\n                        warnings,\n                        experimental_providerMetadata: providerMetadata\n                    }));\n                } catch (error2) {\n                    controller.error(error2);\n                } finally{\n                    rootSpan.end();\n                }\n            }\n        }));\n    }\n    get object() {\n        return this.objectPromise.value;\n    }\n    get partialObjectStream() {\n        return createAsyncIterableStream(this.originalStream, {\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"object\":\n                        controller.enqueue(chunk.object);\n                        break;\n                    case \"text-delta\":\n                    case \"finish\":\n                        break;\n                    case \"error\":\n                        controller.error(chunk.error);\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        });\n    }\n    get elementStream() {\n        return this.outputStrategy.createElementStream(this.originalStream);\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.originalStream, {\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"text-delta\":\n                        controller.enqueue(chunk.textDelta);\n                        break;\n                    case \"object\":\n                    case \"finish\":\n                        break;\n                    case \"error\":\n                        controller.error(chunk.error);\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        });\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.originalStream, {\n            transform (chunk, controller) {\n                controller.enqueue(chunk);\n            }\n        });\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a11;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n            headers: prepareResponseHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\nvar experimental_streamObject = streamObject;\n// core/generate-text/generate-text.ts\n\n// errors/index.ts\n\n// errors/invalid-tool-arguments-error.ts\n\nvar name8 = \"AI_InvalidToolArgumentsError\";\nvar marker8 = `vercel.ai.error.${name8}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar InvalidToolArgumentsError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ toolArgs, toolName, cause, message = `Invalid arguments for tool ${toolName}: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.getErrorMessage)(cause)}` }){\n        super({\n            name: name8,\n            message,\n            cause\n        });\n        this[_a8] = true;\n        this.toolArgs = toolArgs;\n        this.toolName = toolName;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker8);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isInvalidToolArgumentsError(error) {\n        return error instanceof Error && error.name === name8 && typeof error.toolName === \"string\" && typeof error.toolArgs === \"string\";\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            cause: this.cause,\n            stack: this.stack,\n            toolName: this.toolName,\n            toolArgs: this.toolArgs\n        };\n    }\n};\n_a8 = symbol8;\n// errors/no-such-tool-error.ts\n\nvar name9 = \"AI_NoSuchToolError\";\nvar marker9 = `vercel.ai.error.${name9}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar NoSuchToolError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError {\n    constructor({ toolName, availableTools = void 0, message = `Model tried to call unavailable tool '${toolName}'. ${availableTools === void 0 ? \"No tools are available.\" : `Available tools: ${availableTools.join(\", \")}.`}` }){\n        super({\n            name: name9,\n            message\n        });\n        this[_a9] = true;\n        this.toolName = toolName;\n        this.availableTools = availableTools;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker9);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isNoSuchToolError(error) {\n        return error instanceof Error && error.name === name9 && \"toolName\" in error && error.toolName != void 0 && typeof error.name === \"string\";\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n            toolName: this.toolName,\n            availableTools: this.availableTools\n        };\n    }\n};\n_a9 = symbol9;\n// core/prompt/prepare-tools-and-tool-choice.ts\n\n// core/util/is-non-empty-object.ts\nfunction isNonEmptyObject(object) {\n    return object != null && Object.keys(object).length > 0;\n}\n// core/prompt/prepare-tools-and-tool-choice.ts\nfunction prepareToolsAndToolChoice({ tools, toolChoice, activeTools }) {\n    if (!isNonEmptyObject(tools)) {\n        return {\n            tools: void 0,\n            toolChoice: void 0\n        };\n    }\n    const filteredTools = activeTools != null ? Object.entries(tools).filter(([name11])=>activeTools.includes(name11)) : Object.entries(tools);\n    return {\n        tools: filteredTools.map(([name11, tool2])=>{\n            const toolType = tool2.type;\n            switch(toolType){\n                case void 0:\n                case \"function\":\n                    return {\n                        type: \"function\",\n                        name: name11,\n                        description: tool2.description,\n                        parameters: (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.asSchema)(tool2.parameters).jsonSchema\n                    };\n                case \"provider-defined\":\n                    return {\n                        type: \"provider-defined\",\n                        name: name11,\n                        id: tool2.id,\n                        args: tool2.args\n                    };\n                default:\n                    {\n                        const exhaustiveCheck = toolType;\n                        throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);\n                    }\n            }\n        }),\n        toolChoice: toolChoice == null ? {\n            type: \"auto\"\n        } : typeof toolChoice === \"string\" ? {\n            type: toolChoice\n        } : {\n            type: \"tool\",\n            toolName: toolChoice.toolName\n        }\n    };\n}\n// core/util/split-on-last-whitespace.ts\nvar lastWhitespaceRegexp = /^([\\s\\S]*?)(\\s+)(\\S*)$/;\nfunction splitOnLastWhitespace(text) {\n    const match = text.match(lastWhitespaceRegexp);\n    return match ? {\n        prefix: match[1],\n        whitespace: match[2],\n        suffix: match[3]\n    } : void 0;\n}\n// core/util/remove-text-after-last-whitespace.ts\nfunction removeTextAfterLastWhitespace(text) {\n    const match = splitOnLastWhitespace(text);\n    return match ? match.prefix + match.whitespace : text;\n}\n// core/generate-text/parse-tool-call.ts\n\n\nfunction parseToolCall({ toolCall, tools }) {\n    const toolName = toolCall.toolName;\n    if (tools == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName\n        });\n    }\n    const tool2 = tools[toolName];\n    if (tool2 == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName,\n            availableTools: Object.keys(tools)\n        });\n    }\n    const schema = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.asSchema)(tool2.parameters);\n    const parseResult = toolCall.args.trim() === \"\" ? (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n        value: {},\n        schema\n    }) : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)({\n        text: toolCall.args,\n        schema\n    });\n    if (parseResult.success === false) {\n        throw new InvalidToolArgumentsError({\n            toolName,\n            toolArgs: toolCall.args,\n            cause: parseResult.error\n        });\n    }\n    return {\n        type: \"tool-call\",\n        toolCallId: toolCall.toolCallId,\n        toolName,\n        args: parseResult.value\n    };\n}\n// core/generate-text/to-response-messages.ts\nfunction toResponseMessages({ text = \"\", tools, toolCalls, toolResults }) {\n    const responseMessages = [];\n    responseMessages.push({\n        role: \"assistant\",\n        content: [\n            {\n                type: \"text\",\n                text\n            },\n            ...toolCalls\n        ]\n    });\n    if (toolResults.length > 0) {\n        responseMessages.push({\n            role: \"tool\",\n            content: toolResults.map((toolResult)=>{\n                const tool2 = tools[toolResult.toolName];\n                return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: tool2.experimental_toToolResultContent(toolResult.result),\n                    experimental_content: tool2.experimental_toToolResultContent(toolResult.result)\n                } : {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: toolResult.result\n                };\n            })\n        });\n    }\n    return responseMessages;\n}\n// core/generate-text/generate-text.ts\nvar originalGenerateId3 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nasync function generateText({ model, tools, toolChoice, system, prompt, messages, maxRetries, abortSignal, headers, maxAutomaticRoundtrips = 0, maxToolRoundtrips = maxAutomaticRoundtrips, maxSteps = maxToolRoundtrips != null ? maxToolRoundtrips + 1 : 1, experimental_continuationSteps, experimental_continueSteps: continueSteps = experimental_continuationSteps != null ? experimental_continuationSteps : false, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, experimental_activeTools: activeTools, _internal: { generateId: generateId3 = originalGenerateId3, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, onStepFinish, ...settings }) {\n    if (maxSteps < 1) {\n        throw new InvalidArgumentError({\n            parameter: \"maxSteps\",\n            value: maxSteps,\n            message: \"maxSteps must be at least 1\"\n        });\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const initialPrompt = standardizePrompt({\n        prompt: {\n            system,\n            prompt,\n            messages\n        },\n        tools\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateText\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateText\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.settings.maxSteps\": maxSteps\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a11, _b, _c, _d, _e, _f;\n            const retry = retryWithExponentialBackoff({\n                maxRetries\n            });\n            const mode = {\n                type: \"regular\",\n                ...prepareToolsAndToolChoice({\n                    tools,\n                    toolChoice,\n                    activeTools\n                })\n            };\n            const callSettings = prepareCallSettings(settings);\n            let currentModelResponse;\n            let currentToolCalls = [];\n            let currentToolResults = [];\n            let stepCount = 0;\n            const responseMessages = [];\n            let text = \"\";\n            const steps = [];\n            const usage = {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            };\n            let stepType = \"initial\";\n            do {\n                if (stepCount === 1) {\n                    initialPrompt.type = \"messages\";\n                }\n                const promptFormat = stepCount === 0 ? initialPrompt.type : \"messages\";\n                const promptMessages = await convertToLanguageModelPrompt({\n                    prompt: {\n                        type: promptFormat,\n                        system: initialPrompt.system,\n                        messages: [\n                            ...initialPrompt.messages,\n                            ...responseMessages\n                        ]\n                    },\n                    modelSupportsImageUrls: model.supportsImageUrls,\n                    modelSupportsUrl: model.supportsUrl\n                });\n                currentModelResponse = await retry(()=>recordSpan({\n                        name: \"ai.generateText.doGenerate\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.generateText.doGenerate\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>promptFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(promptMessages)\n                                },\n                                \"ai.prompt.tools\": {\n                                    // convert the language model level tools:\n                                    input: ()=>{\n                                        var _a12;\n                                        return (_a12 = mode.tools) == null ? void 0 : _a12.map((tool2)=>JSON.stringify(tool2));\n                                    }\n                                },\n                                \"ai.prompt.toolChoice\": {\n                                    input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                },\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        fn: async (span2)=>{\n                            var _a12, _b2, _c2, _d2, _e2, _f2;\n                            const result = await model.doGenerate({\n                                mode,\n                                ...callSettings,\n                                inputFormat: promptFormat,\n                                prompt: promptMessages,\n                                providerMetadata,\n                                abortSignal,\n                                headers\n                            });\n                            const responseData = {\n                                id: (_b2 = (_a12 = result.response) == null ? void 0 : _a12.id) != null ? _b2 : generateId3(),\n                                timestamp: (_d2 = (_c2 = result.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),\n                                modelId: (_f2 = (_e2 = result.response) == null ? void 0 : _e2.modelId) != null ? _f2 : model.modelId\n                            };\n                            span2.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.response.finishReason\": result.finishReason,\n                                    \"ai.response.text\": {\n                                        output: ()=>result.text\n                                    },\n                                    \"ai.response.toolCalls\": {\n                                        output: ()=>JSON.stringify(result.toolCalls)\n                                    },\n                                    \"ai.response.id\": responseData.id,\n                                    \"ai.response.model\": responseData.modelId,\n                                    \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                    \"ai.usage.promptTokens\": result.usage.promptTokens,\n                                    \"ai.usage.completionTokens\": result.usage.completionTokens,\n                                    // deprecated:\n                                    \"ai.finishReason\": result.finishReason,\n                                    \"ai.result.text\": {\n                                        output: ()=>result.text\n                                    },\n                                    \"ai.result.toolCalls\": {\n                                        output: ()=>JSON.stringify(result.toolCalls)\n                                    },\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.response.finish_reasons\": [\n                                        result.finishReason\n                                    ],\n                                    \"gen_ai.response.id\": responseData.id,\n                                    \"gen_ai.response.model\": responseData.modelId,\n                                    \"gen_ai.usage.input_tokens\": result.usage.promptTokens,\n                                    \"gen_ai.usage.output_tokens\": result.usage.completionTokens\n                                }\n                            }));\n                            return {\n                                ...result,\n                                response: responseData\n                            };\n                        }\n                    }));\n                currentToolCalls = ((_a11 = currentModelResponse.toolCalls) != null ? _a11 : []).map((modelToolCall)=>parseToolCall({\n                        toolCall: modelToolCall,\n                        tools\n                    }));\n                currentToolResults = tools == null ? [] : await executeTools({\n                    toolCalls: currentToolCalls,\n                    tools,\n                    tracer,\n                    telemetry,\n                    abortSignal\n                });\n                const currentUsage = calculateLanguageModelUsage(currentModelResponse.usage);\n                usage.completionTokens += currentUsage.completionTokens;\n                usage.promptTokens += currentUsage.promptTokens;\n                usage.totalTokens += currentUsage.totalTokens;\n                let nextStepType = \"done\";\n                if (++stepCount < maxSteps) {\n                    if (continueSteps && currentModelResponse.finishReason === \"length\" && // only use continue when there are no tool calls:\n                    currentToolCalls.length === 0) {\n                        nextStepType = \"continue\";\n                    } else if (// there are tool calls:\n                    currentToolCalls.length > 0 && // all current tool calls have results:\n                    currentToolResults.length === currentToolCalls.length) {\n                        nextStepType = \"tool-result\";\n                    }\n                }\n                const originalText = (_b = currentModelResponse.text) != null ? _b : \"\";\n                const stepTextLeadingWhitespaceTrimmed = stepType === \"continue\" && // only for continue steps\n                text.trimEnd() !== text ? originalText.trimStart() : originalText;\n                const stepText = nextStepType === \"continue\" ? removeTextAfterLastWhitespace(stepTextLeadingWhitespaceTrimmed) : stepTextLeadingWhitespaceTrimmed;\n                text = nextStepType === \"continue\" || stepType === \"continue\" ? text + stepText : stepText;\n                if (stepType === \"continue\") {\n                    const lastMessage = responseMessages[responseMessages.length - 1];\n                    if (typeof lastMessage.content === \"string\") {\n                        lastMessage.content += stepText;\n                    } else {\n                        lastMessage.content.push({\n                            text: stepText,\n                            type: \"text\"\n                        });\n                    }\n                } else {\n                    responseMessages.push(...toResponseMessages({\n                        text,\n                        tools: tools != null ? tools : {},\n                        toolCalls: currentToolCalls,\n                        toolResults: currentToolResults\n                    }));\n                }\n                const currentStepResult = {\n                    stepType,\n                    text: stepText,\n                    toolCalls: currentToolCalls,\n                    toolResults: currentToolResults,\n                    finishReason: currentModelResponse.finishReason,\n                    usage: currentUsage,\n                    warnings: currentModelResponse.warnings,\n                    logprobs: currentModelResponse.logprobs,\n                    request: (_c = currentModelResponse.request) != null ? _c : {},\n                    response: {\n                        ...currentModelResponse.response,\n                        headers: (_d = currentModelResponse.rawResponse) == null ? void 0 : _d.headers,\n                        // deep clone msgs to avoid mutating past messages in multi-step:\n                        messages: JSON.parse(JSON.stringify(responseMessages))\n                    },\n                    experimental_providerMetadata: currentModelResponse.providerMetadata,\n                    isContinued: nextStepType === \"continue\"\n                };\n                steps.push(currentStepResult);\n                await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                stepType = nextStepType;\n            }while (stepType !== \"done\");\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": currentModelResponse.finishReason,\n                    \"ai.response.text\": {\n                        output: ()=>currentModelResponse.text\n                    },\n                    \"ai.response.toolCalls\": {\n                        output: ()=>JSON.stringify(currentModelResponse.toolCalls)\n                    },\n                    \"ai.usage.promptTokens\": currentModelResponse.usage.promptTokens,\n                    \"ai.usage.completionTokens\": currentModelResponse.usage.completionTokens,\n                    // deprecated:\n                    \"ai.finishReason\": currentModelResponse.finishReason,\n                    \"ai.result.text\": {\n                        output: ()=>currentModelResponse.text\n                    },\n                    \"ai.result.toolCalls\": {\n                        output: ()=>JSON.stringify(currentModelResponse.toolCalls)\n                    }\n                }\n            }));\n            return new DefaultGenerateTextResult({\n                text,\n                toolCalls: currentToolCalls,\n                toolResults: currentToolResults,\n                finishReason: currentModelResponse.finishReason,\n                usage,\n                warnings: currentModelResponse.warnings,\n                request: (_e = currentModelResponse.request) != null ? _e : {},\n                response: {\n                    ...currentModelResponse.response,\n                    headers: (_f = currentModelResponse.rawResponse) == null ? void 0 : _f.headers,\n                    messages: responseMessages\n                },\n                logprobs: currentModelResponse.logprobs,\n                responseMessages,\n                steps,\n                providerMetadata: currentModelResponse.providerMetadata\n            });\n        }\n    });\n}\nasync function executeTools({ toolCalls, tools, tracer, telemetry, abortSignal }) {\n    const toolResults = await Promise.all(toolCalls.map(async (toolCall)=>{\n        const tool2 = tools[toolCall.toolName];\n        if ((tool2 == null ? void 0 : tool2.execute) == null) {\n            return void 0;\n        }\n        const result = await recordSpan({\n            name: \"ai.toolCall\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.toolCall\",\n                        telemetry\n                    }),\n                    \"ai.toolCall.name\": toolCall.toolName,\n                    \"ai.toolCall.id\": toolCall.toolCallId,\n                    \"ai.toolCall.args\": {\n                        output: ()=>JSON.stringify(toolCall.args)\n                    }\n                }\n            }),\n            tracer,\n            fn: async (span)=>{\n                const result2 = await tool2.execute(toolCall.args, {\n                    abortSignal\n                });\n                try {\n                    span.setAttributes(selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            \"ai.toolCall.result\": {\n                                output: ()=>JSON.stringify(result2)\n                            }\n                        }\n                    }));\n                } catch (ignored) {}\n                return result2;\n            }\n        });\n        return {\n            toolCallId: toolCall.toolCallId,\n            toolName: toolCall.toolName,\n            args: toolCall.args,\n            result\n        };\n    }));\n    return toolResults.filter((result)=>result != null);\n}\nvar DefaultGenerateTextResult = class {\n    constructor(options){\n        this.text = options.text;\n        this.toolCalls = options.toolCalls;\n        this.toolResults = options.toolResults;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.request = options.request;\n        this.response = options.response;\n        this.responseMessages = options.responseMessages;\n        this.roundtrips = options.steps;\n        this.steps = options.steps;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.rawResponse = {\n            headers: options.response.headers\n        };\n        this.logprobs = options.logprobs;\n    }\n};\nvar experimental_generateText = generateText;\n// core/generate-text/stream-text.ts\n\n// core/util/create-stitchable-stream.ts\nfunction createStitchableStream() {\n    let innerStreamReaders = [];\n    let controller = null;\n    let isClosed = false;\n    const processPull = async ()=>{\n        if (isClosed && innerStreamReaders.length === 0) {\n            controller == null ? void 0 : controller.close();\n            return;\n        }\n        if (innerStreamReaders.length === 0) {\n            return;\n        }\n        try {\n            const { value, done } = await innerStreamReaders[0].read();\n            if (done) {\n                innerStreamReaders.shift();\n                if (innerStreamReaders.length > 0) {\n                    await processPull();\n                } else if (isClosed) {\n                    controller == null ? void 0 : controller.close();\n                }\n            } else {\n                controller == null ? void 0 : controller.enqueue(value);\n            }\n        } catch (error) {\n            controller == null ? void 0 : controller.error(error);\n            innerStreamReaders.shift();\n            if (isClosed && innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        }\n    };\n    return {\n        stream: new ReadableStream({\n            start (controllerParam) {\n                controller = controllerParam;\n            },\n            pull: processPull,\n            async cancel () {\n                for (const reader of innerStreamReaders){\n                    await reader.cancel();\n                }\n                innerStreamReaders = [];\n                isClosed = true;\n            }\n        }),\n        addStream: (innerStream)=>{\n            if (isClosed) {\n                throw new Error(\"Cannot add inner stream: outer stream is closed\");\n            }\n            innerStreamReaders.push(innerStream.getReader());\n        },\n        close: ()=>{\n            isClosed = true;\n            if (innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        }\n    };\n}\n// core/util/merge-streams.ts\nfunction mergeStreams(stream1, stream2) {\n    const reader1 = stream1.getReader();\n    const reader2 = stream2.getReader();\n    let lastRead1 = void 0;\n    let lastRead2 = void 0;\n    let stream1Done = false;\n    let stream2Done = false;\n    async function readStream1(controller) {\n        try {\n            if (lastRead1 == null) {\n                lastRead1 = reader1.read();\n            }\n            const result = await lastRead1;\n            lastRead1 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    async function readStream2(controller) {\n        try {\n            if (lastRead2 == null) {\n                lastRead2 = reader2.read();\n            }\n            const result = await lastRead2;\n            lastRead2 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    return new ReadableStream({\n        async pull (controller) {\n            try {\n                if (stream1Done) {\n                    await readStream2(controller);\n                    return;\n                }\n                if (stream2Done) {\n                    await readStream1(controller);\n                    return;\n                }\n                if (lastRead1 == null) {\n                    lastRead1 = reader1.read();\n                }\n                if (lastRead2 == null) {\n                    lastRead2 = reader2.read();\n                }\n                const { result, reader } = await Promise.race([\n                    lastRead1.then((result2)=>({\n                            result: result2,\n                            reader: reader1\n                        })),\n                    lastRead2.then((result2)=>({\n                            result: result2,\n                            reader: reader2\n                        }))\n                ]);\n                if (!result.done) {\n                    controller.enqueue(result.value);\n                }\n                if (reader === reader1) {\n                    lastRead1 = void 0;\n                    if (result.done) {\n                        await readStream2(controller);\n                        stream1Done = true;\n                    }\n                } else {\n                    lastRead2 = void 0;\n                    if (result.done) {\n                        stream2Done = true;\n                        await readStream1(controller);\n                    }\n                }\n            } catch (error) {\n                controller.error(error);\n            }\n        },\n        cancel () {\n            reader1.cancel();\n            reader2.cancel();\n        }\n    });\n}\n// core/generate-text/run-tools-transformation.ts\n\nfunction runToolsTransformation({ tools, generatorStream, toolCallStreaming, tracer, telemetry, abortSignal }) {\n    let toolResultsStreamController = null;\n    const toolResultsStream = new ReadableStream({\n        start (controller) {\n            toolResultsStreamController = controller;\n        }\n    });\n    const activeToolCalls = {};\n    const outstandingToolResults = /* @__PURE__ */ new Set();\n    let canClose = false;\n    let finishChunk = void 0;\n    function attemptClose() {\n        if (canClose && outstandingToolResults.size === 0) {\n            if (finishChunk != null) {\n                toolResultsStreamController.enqueue(finishChunk);\n            }\n            toolResultsStreamController.close();\n        }\n    }\n    const forwardStream = new TransformStream({\n        transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                case \"response-metadata\":\n                case \"error\":\n                    {\n                        controller.enqueue(chunk);\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        if (toolCallStreaming) {\n                            if (!activeToolCalls[chunk.toolCallId]) {\n                                controller.enqueue({\n                                    type: \"tool-call-streaming-start\",\n                                    toolCallId: chunk.toolCallId,\n                                    toolName: chunk.toolName\n                                });\n                                activeToolCalls[chunk.toolCallId] = true;\n                            }\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                argsTextDelta: chunk.argsTextDelta\n                            });\n                        }\n                        break;\n                    }\n                case \"tool-call\":\n                    {\n                        const toolName = chunk.toolName;\n                        if (tools == null) {\n                            toolResultsStreamController.enqueue({\n                                type: \"error\",\n                                error: new NoSuchToolError({\n                                    toolName: chunk.toolName\n                                })\n                            });\n                            break;\n                        }\n                        const tool2 = tools[toolName];\n                        if (tool2 == null) {\n                            toolResultsStreamController.enqueue({\n                                type: \"error\",\n                                error: new NoSuchToolError({\n                                    toolName: chunk.toolName,\n                                    availableTools: Object.keys(tools)\n                                })\n                            });\n                            break;\n                        }\n                        try {\n                            const toolCall = parseToolCall({\n                                toolCall: chunk,\n                                tools\n                            });\n                            controller.enqueue(toolCall);\n                            if (tool2.execute != null) {\n                                const toolExecutionId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)();\n                                outstandingToolResults.add(toolExecutionId);\n                                recordSpan({\n                                    name: \"ai.toolCall\",\n                                    attributes: selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            ...assembleOperationName({\n                                                operationId: \"ai.toolCall\",\n                                                telemetry\n                                            }),\n                                            \"ai.toolCall.name\": toolCall.toolName,\n                                            \"ai.toolCall.id\": toolCall.toolCallId,\n                                            \"ai.toolCall.args\": {\n                                                output: ()=>JSON.stringify(toolCall.args)\n                                            }\n                                        }\n                                    }),\n                                    tracer,\n                                    fn: async (span)=>tool2.execute(toolCall.args, {\n                                            abortSignal\n                                        }).then((result)=>{\n                                            toolResultsStreamController.enqueue({\n                                                ...toolCall,\n                                                type: \"tool-result\",\n                                                result\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                            try {\n                                                span.setAttributes(selectTelemetryAttributes({\n                                                    telemetry,\n                                                    attributes: {\n                                                        \"ai.toolCall.result\": {\n                                                            output: ()=>JSON.stringify(result)\n                                                        }\n                                                    }\n                                                }));\n                                            } catch (ignored) {}\n                                        }, (error)=>{\n                                            toolResultsStreamController.enqueue({\n                                                type: \"error\",\n                                                error\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                        })\n                                });\n                            }\n                        } catch (error) {\n                            toolResultsStreamController.enqueue({\n                                type: \"error\",\n                                error\n                            });\n                        }\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        finishChunk = {\n                            type: \"finish\",\n                            finishReason: chunk.finishReason,\n                            logprobs: chunk.logprobs,\n                            usage: calculateLanguageModelUsage(chunk.usage),\n                            experimental_providerMetadata: chunk.providerMetadata\n                        };\n                        break;\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = chunkType;\n                        throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n                    }\n            }\n        },\n        flush () {\n            canClose = true;\n            attemptClose();\n        }\n    });\n    return new ReadableStream({\n        async start (controller) {\n            return Promise.all([\n                generatorStream.pipeThrough(forwardStream).pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {}\n                })),\n                toolResultsStream.pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {\n                        controller.close();\n                    }\n                }))\n            ]);\n        }\n    });\n}\n// core/generate-text/stream-text.ts\nvar originalGenerateId4 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nasync function streamText({ model, tools, toolChoice, system, prompt, messages, maxRetries, abortSignal, headers, maxToolRoundtrips = 0, maxSteps = maxToolRoundtrips != null ? maxToolRoundtrips + 1 : 1, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, experimental_toolCallStreaming: toolCallStreaming = false, experimental_activeTools: activeTools, onChunk, onFinish, onStepFinish, _internal: { now: now2 = now, generateId: generateId3 = originalGenerateId4, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    if (maxSteps < 1) {\n        throw new InvalidArgumentError({\n            parameter: \"maxSteps\",\n            value: maxSteps,\n            message: \"maxSteps must be at least 1\"\n        });\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    const initialPrompt = standardizePrompt({\n        prompt: {\n            system,\n            prompt,\n            messages\n        },\n        tools\n    });\n    return recordSpan({\n        name: \"ai.streamText\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.streamText\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.settings.maxSteps\": maxSteps\n            }\n        }),\n        tracer,\n        endWhenDone: false,\n        fn: async (rootSpan)=>{\n            const retry = retryWithExponentialBackoff({\n                maxRetries\n            });\n            const startStep = async ({ responseMessages })=>{\n                const promptFormat = responseMessages.length === 0 ? initialPrompt.type : \"messages\";\n                const promptMessages = await convertToLanguageModelPrompt({\n                    prompt: {\n                        type: promptFormat,\n                        system: initialPrompt.system,\n                        messages: [\n                            ...initialPrompt.messages,\n                            ...responseMessages\n                        ]\n                    },\n                    modelSupportsImageUrls: model.supportsImageUrls,\n                    modelSupportsUrl: model.supportsUrl\n                });\n                const mode = {\n                    type: \"regular\",\n                    ...prepareToolsAndToolChoice({\n                        tools,\n                        toolChoice,\n                        activeTools\n                    })\n                };\n                const { result: { stream: stream2, warnings: warnings2, rawResponse: rawResponse2, request: request2 }, doStreamSpan: doStreamSpan2, startTimestampMs: startTimestampMs2 } = await retry(()=>recordSpan({\n                        name: \"ai.streamText.doStream\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.streamText.doStream\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>promptFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(promptMessages)\n                                },\n                                \"ai.prompt.tools\": {\n                                    // convert the language model level tools:\n                                    input: ()=>{\n                                        var _a11;\n                                        return (_a11 = mode.tools) == null ? void 0 : _a11.map((tool2)=>JSON.stringify(tool2));\n                                    }\n                                },\n                                \"ai.prompt.toolChoice\": {\n                                    input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                },\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        endWhenDone: false,\n                        fn: async (doStreamSpan3)=>({\n                                startTimestampMs: now2(),\n                                // get before the call\n                                doStreamSpan: doStreamSpan3,\n                                result: await model.doStream({\n                                    mode,\n                                    ...prepareCallSettings(settings),\n                                    inputFormat: promptFormat,\n                                    prompt: promptMessages,\n                                    providerMetadata,\n                                    abortSignal,\n                                    headers\n                                })\n                            })\n                    }));\n                return {\n                    result: {\n                        stream: runToolsTransformation({\n                            tools,\n                            generatorStream: stream2,\n                            toolCallStreaming,\n                            tracer,\n                            telemetry,\n                            abortSignal\n                        }),\n                        warnings: warnings2,\n                        request: request2 != null ? request2 : {},\n                        rawResponse: rawResponse2\n                    },\n                    doStreamSpan: doStreamSpan2,\n                    startTimestampMs: startTimestampMs2\n                };\n            };\n            const { result: { stream, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await startStep({\n                responseMessages: []\n            });\n            return new DefaultStreamTextResult({\n                stream,\n                warnings,\n                rawResponse,\n                request,\n                onChunk,\n                onFinish,\n                onStepFinish,\n                rootSpan,\n                doStreamSpan,\n                telemetry,\n                startTimestampMs,\n                maxSteps,\n                continueSteps,\n                startStep,\n                modelId: model.modelId,\n                now: now2,\n                currentDate,\n                generateId: generateId3,\n                tools\n            });\n        }\n    });\n}\nvar DefaultStreamTextResult = class {\n    constructor({ stream, warnings, rawResponse, request, onChunk, onFinish, onStepFinish, rootSpan, doStreamSpan, telemetry, startTimestampMs, maxSteps, continueSteps, startStep, modelId, now: now2, currentDate, generateId: generateId3, tools }){\n        this.warnings = warnings;\n        this.rawResponse = rawResponse;\n        const { resolve: resolveUsage, promise: usagePromise } = createResolvablePromise();\n        this.usage = usagePromise;\n        const { resolve: resolveFinishReason, promise: finishReasonPromise } = createResolvablePromise();\n        this.finishReason = finishReasonPromise;\n        const { resolve: resolveText, promise: textPromise } = createResolvablePromise();\n        this.text = textPromise;\n        const { resolve: resolveToolCalls, promise: toolCallsPromise } = createResolvablePromise();\n        this.toolCalls = toolCallsPromise;\n        const { resolve: resolveToolResults, promise: toolResultsPromise } = createResolvablePromise();\n        this.toolResults = toolResultsPromise;\n        const { resolve: resolveSteps, promise: stepsPromise } = createResolvablePromise();\n        this.steps = stepsPromise;\n        const { resolve: resolveProviderMetadata, promise: providerMetadataPromise } = createResolvablePromise();\n        this.experimental_providerMetadata = providerMetadataPromise;\n        const { resolve: resolveRequest, promise: requestPromise } = createResolvablePromise();\n        this.request = requestPromise;\n        const { resolve: resolveResponse, promise: responsePromise } = createResolvablePromise();\n        this.response = responsePromise;\n        const { resolve: resolveResponseMessages, promise: responseMessagesPromise } = createResolvablePromise();\n        this.responseMessages = responseMessagesPromise;\n        const { stream: stitchableStream, addStream, close: closeStitchableStream } = createStitchableStream();\n        this.originalStream = stitchableStream;\n        const stepResults = [];\n        const self = this;\n        function addStepStream({ stream: stream2, startTimestamp, doStreamSpan: doStreamSpan2, currentStep, responseMessages, usage = {\n            promptTokens: 0,\n            completionTokens: 0,\n            totalTokens: 0\n        }, stepType, previousStepText = \"\", stepRequest, hasLeadingWhitespace }) {\n            const stepToolCalls = [];\n            const stepToolResults = [];\n            let stepFinishReason = \"unknown\";\n            let stepUsage = {\n                promptTokens: 0,\n                completionTokens: 0,\n                totalTokens: 0\n            };\n            let stepProviderMetadata;\n            let stepFirstChunk = true;\n            let stepText = \"\";\n            let fullStepText = stepType === \"continue\" ? previousStepText : \"\";\n            let stepLogProbs;\n            let stepResponse = {\n                id: generateId3(),\n                timestamp: currentDate(),\n                modelId\n            };\n            let chunkBuffer = \"\";\n            let chunkTextPublished = false;\n            let inWhitespacePrefix = true;\n            let hasWhitespaceSuffix = false;\n            async function publishTextChunk({ controller, chunk }) {\n                controller.enqueue(chunk);\n                stepText += chunk.textDelta;\n                fullStepText += chunk.textDelta;\n                chunkTextPublished = true;\n                hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;\n                await (onChunk == null ? void 0 : onChunk({\n                    chunk\n                }));\n            }\n            addStream(stream2.pipeThrough(new TransformStream({\n                async transform (chunk, controller) {\n                    var _a11, _b, _c;\n                    if (stepFirstChunk) {\n                        const msToFirstChunk = now2() - startTimestamp;\n                        stepFirstChunk = false;\n                        doStreamSpan2.addEvent(\"ai.stream.firstChunk\", {\n                            \"ai.response.msToFirstChunk\": msToFirstChunk,\n                            // deprecated:\n                            \"ai.stream.msToFirstChunk\": msToFirstChunk\n                        });\n                        doStreamSpan2.setAttributes({\n                            \"ai.response.msToFirstChunk\": msToFirstChunk,\n                            // deprecated:\n                            \"ai.stream.msToFirstChunk\": msToFirstChunk\n                        });\n                    }\n                    if (chunk.type === \"text-delta\" && chunk.textDelta.length === 0) {\n                        return;\n                    }\n                    const chunkType = chunk.type;\n                    switch(chunkType){\n                        case \"text-delta\":\n                            {\n                                if (continueSteps) {\n                                    const trimmedChunkText = inWhitespacePrefix && hasLeadingWhitespace ? chunk.textDelta.trimStart() : chunk.textDelta;\n                                    if (trimmedChunkText.length === 0) {\n                                        break;\n                                    }\n                                    inWhitespacePrefix = false;\n                                    chunkBuffer += trimmedChunkText;\n                                    const split = splitOnLastWhitespace(chunkBuffer);\n                                    if (split != null) {\n                                        chunkBuffer = split.suffix;\n                                        await publishTextChunk({\n                                            controller,\n                                            chunk: {\n                                                type: \"text-delta\",\n                                                textDelta: split.prefix + split.whitespace\n                                            }\n                                        });\n                                    }\n                                } else {\n                                    await publishTextChunk({\n                                        controller,\n                                        chunk\n                                    });\n                                }\n                                break;\n                            }\n                        case \"tool-call\":\n                            {\n                                controller.enqueue(chunk);\n                                stepToolCalls.push(chunk);\n                                await (onChunk == null ? void 0 : onChunk({\n                                    chunk\n                                }));\n                                break;\n                            }\n                        case \"tool-result\":\n                            {\n                                controller.enqueue(chunk);\n                                stepToolResults.push(chunk);\n                                await (onChunk == null ? void 0 : onChunk({\n                                    chunk\n                                }));\n                                break;\n                            }\n                        case \"response-metadata\":\n                            {\n                                stepResponse = {\n                                    id: (_a11 = chunk.id) != null ? _a11 : stepResponse.id,\n                                    timestamp: (_b = chunk.timestamp) != null ? _b : stepResponse.timestamp,\n                                    modelId: (_c = chunk.modelId) != null ? _c : stepResponse.modelId\n                                };\n                                break;\n                            }\n                        case \"finish\":\n                            {\n                                stepUsage = chunk.usage;\n                                stepFinishReason = chunk.finishReason;\n                                stepProviderMetadata = chunk.experimental_providerMetadata;\n                                stepLogProbs = chunk.logprobs;\n                                const msToFinish = now2() - startTimestamp;\n                                doStreamSpan2.addEvent(\"ai.stream.finish\");\n                                doStreamSpan2.setAttributes({\n                                    \"ai.response.msToFinish\": msToFinish,\n                                    \"ai.response.avgCompletionTokensPerSecond\": 1e3 * stepUsage.completionTokens / msToFinish\n                                });\n                                break;\n                            }\n                        case \"tool-call-streaming-start\":\n                        case \"tool-call-delta\":\n                            {\n                                controller.enqueue(chunk);\n                                await (onChunk == null ? void 0 : onChunk({\n                                    chunk\n                                }));\n                                break;\n                            }\n                        case \"error\":\n                            {\n                                controller.enqueue(chunk);\n                                stepFinishReason = \"error\";\n                                break;\n                            }\n                        default:\n                            {\n                                const exhaustiveCheck = chunkType;\n                                throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                            }\n                    }\n                },\n                // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                async flush (controller) {\n                    var _a11;\n                    const stepToolCallsJson = stepToolCalls.length > 0 ? JSON.stringify(stepToolCalls) : void 0;\n                    let nextStepType = \"done\";\n                    if (currentStep + 1 < maxSteps) {\n                        if (continueSteps && stepFinishReason === \"length\" && // only use continue when there are no tool calls:\n                        stepToolCalls.length === 0) {\n                            nextStepType = \"continue\";\n                        } else if (// there are tool calls:\n                        stepToolCalls.length > 0 && // all current tool calls have results:\n                        stepToolResults.length === stepToolCalls.length) {\n                            nextStepType = \"tool-result\";\n                        }\n                    }\n                    if (continueSteps && chunkBuffer.length > 0 && (nextStepType !== \"continue\" || // when the next step is a regular step, publish the buffer\n                    stepType === \"continue\" && !chunkTextPublished)) {\n                        await publishTextChunk({\n                            controller,\n                            chunk: {\n                                type: \"text-delta\",\n                                textDelta: chunkBuffer\n                            }\n                        });\n                        chunkBuffer = \"\";\n                    }\n                    try {\n                        doStreamSpan2.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.response.finishReason\": stepFinishReason,\n                                \"ai.response.text\": {\n                                    output: ()=>stepText\n                                },\n                                \"ai.response.toolCalls\": {\n                                    output: ()=>stepToolCallsJson\n                                },\n                                \"ai.response.id\": stepResponse.id,\n                                \"ai.response.model\": stepResponse.modelId,\n                                \"ai.response.timestamp\": stepResponse.timestamp.toISOString(),\n                                \"ai.usage.promptTokens\": stepUsage.promptTokens,\n                                \"ai.usage.completionTokens\": stepUsage.completionTokens,\n                                // deprecated\n                                \"ai.finishReason\": stepFinishReason,\n                                \"ai.result.text\": {\n                                    output: ()=>stepText\n                                },\n                                \"ai.result.toolCalls\": {\n                                    output: ()=>stepToolCallsJson\n                                },\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.response.finish_reasons\": [\n                                    stepFinishReason\n                                ],\n                                \"gen_ai.response.id\": stepResponse.id,\n                                \"gen_ai.response.model\": stepResponse.modelId,\n                                \"gen_ai.usage.input_tokens\": stepUsage.promptTokens,\n                                \"gen_ai.usage.output_tokens\": stepUsage.completionTokens\n                            }\n                        }));\n                    } catch (error) {} finally{\n                        doStreamSpan2.end();\n                    }\n                    controller.enqueue({\n                        type: \"step-finish\",\n                        finishReason: stepFinishReason,\n                        usage: stepUsage,\n                        experimental_providerMetadata: stepProviderMetadata,\n                        logprobs: stepLogProbs,\n                        response: {\n                            ...stepResponse\n                        },\n                        isContinued: nextStepType === \"continue\"\n                    });\n                    if (stepType === \"continue\") {\n                        const lastMessage = responseMessages[responseMessages.length - 1];\n                        if (typeof lastMessage.content === \"string\") {\n                            lastMessage.content += stepText;\n                        } else {\n                            lastMessage.content.push({\n                                text: stepText,\n                                type: \"text\"\n                            });\n                        }\n                    } else {\n                        responseMessages.push(...toResponseMessages({\n                            text: stepText,\n                            tools: tools != null ? tools : {},\n                            toolCalls: stepToolCalls,\n                            toolResults: stepToolResults\n                        }));\n                    }\n                    const currentStepResult = {\n                        stepType,\n                        text: stepText,\n                        toolCalls: stepToolCalls,\n                        toolResults: stepToolResults,\n                        finishReason: stepFinishReason,\n                        usage: stepUsage,\n                        warnings: self.warnings,\n                        logprobs: stepLogProbs,\n                        request: stepRequest,\n                        rawResponse: self.rawResponse,\n                        response: {\n                            ...stepResponse,\n                            headers: (_a11 = self.rawResponse) == null ? void 0 : _a11.headers,\n                            // deep clone msgs to avoid mutating past messages in multi-step:\n                            messages: JSON.parse(JSON.stringify(responseMessages))\n                        },\n                        experimental_providerMetadata: stepProviderMetadata,\n                        isContinued: nextStepType === \"continue\"\n                    };\n                    stepResults.push(currentStepResult);\n                    await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                    const combinedUsage = {\n                        promptTokens: usage.promptTokens + stepUsage.promptTokens,\n                        completionTokens: usage.completionTokens + stepUsage.completionTokens,\n                        totalTokens: usage.totalTokens + stepUsage.totalTokens\n                    };\n                    if (nextStepType !== \"done\") {\n                        const { result, doStreamSpan: doStreamSpan3, startTimestampMs: startTimestamp2 } = await startStep({\n                            responseMessages\n                        });\n                        self.warnings = result.warnings;\n                        self.rawResponse = result.rawResponse;\n                        addStepStream({\n                            stream: result.stream,\n                            startTimestamp: startTimestamp2,\n                            doStreamSpan: doStreamSpan3,\n                            currentStep: currentStep + 1,\n                            responseMessages,\n                            usage: combinedUsage,\n                            stepType: nextStepType,\n                            previousStepText: fullStepText,\n                            stepRequest: result.request,\n                            hasLeadingWhitespace: hasWhitespaceSuffix\n                        });\n                        return;\n                    }\n                    try {\n                        controller.enqueue({\n                            type: \"finish\",\n                            finishReason: stepFinishReason,\n                            usage: combinedUsage,\n                            experimental_providerMetadata: stepProviderMetadata,\n                            logprobs: stepLogProbs,\n                            response: {\n                                ...stepResponse\n                            }\n                        });\n                        closeStitchableStream();\n                        rootSpan.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.response.finishReason\": stepFinishReason,\n                                \"ai.response.text\": {\n                                    output: ()=>fullStepText\n                                },\n                                \"ai.response.toolCalls\": {\n                                    output: ()=>stepToolCallsJson\n                                },\n                                \"ai.usage.promptTokens\": combinedUsage.promptTokens,\n                                \"ai.usage.completionTokens\": combinedUsage.completionTokens,\n                                // deprecated\n                                \"ai.finishReason\": stepFinishReason,\n                                \"ai.result.text\": {\n                                    output: ()=>fullStepText\n                                },\n                                \"ai.result.toolCalls\": {\n                                    output: ()=>stepToolCallsJson\n                                }\n                            }\n                        }));\n                        resolveUsage(combinedUsage);\n                        resolveFinishReason(stepFinishReason);\n                        resolveText(fullStepText);\n                        resolveToolCalls(stepToolCalls);\n                        resolveProviderMetadata(stepProviderMetadata);\n                        resolveToolResults(stepToolResults);\n                        resolveRequest(stepRequest);\n                        resolveResponse({\n                            ...stepResponse,\n                            headers: rawResponse == null ? void 0 : rawResponse.headers,\n                            messages: responseMessages\n                        });\n                        resolveSteps(stepResults);\n                        resolveResponseMessages(responseMessages);\n                        await (onFinish == null ? void 0 : onFinish({\n                            finishReason: stepFinishReason,\n                            logprobs: stepLogProbs,\n                            usage: combinedUsage,\n                            text: fullStepText,\n                            toolCalls: stepToolCalls,\n                            // The tool results are inferred as a never[] type, because they are\n                            // optional and the execute method with an inferred result type is\n                            // optional as well. Therefore we need to cast the toolResults to any.\n                            // The type exposed to the users will be correctly inferred.\n                            toolResults: stepToolResults,\n                            request: stepRequest,\n                            rawResponse,\n                            response: {\n                                ...stepResponse,\n                                headers: rawResponse == null ? void 0 : rawResponse.headers,\n                                messages: responseMessages\n                            },\n                            warnings,\n                            experimental_providerMetadata: stepProviderMetadata,\n                            steps: stepResults,\n                            responseMessages\n                        }));\n                    } catch (error) {\n                        controller.error(error);\n                    } finally{\n                        rootSpan.end();\n                    }\n                }\n            })));\n        }\n        addStepStream({\n            stream,\n            startTimestamp: startTimestampMs,\n            doStreamSpan,\n            currentStep: 0,\n            responseMessages: [],\n            usage: void 0,\n            stepType: \"initial\",\n            stepRequest: request,\n            hasLeadingWhitespace: false\n        });\n    }\n    /**\n  Split out a new stream from the original stream.\n  The original stream is replaced to allow for further splitting,\n  since we do not know how many times the stream will be split.\n  \n  Note: this leads to buffering the stream content on the server.\n  However, the LLM results are expected to be small enough to not cause issues.\n     */ teeStream() {\n        const [stream1, stream2] = this.originalStream.tee();\n        this.originalStream = stream2;\n        return stream1;\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.teeStream(), {\n            transform (chunk, controller) {\n                if (chunk.type === \"text-delta\") {\n                    controller.enqueue(chunk.textDelta);\n                } else if (chunk.type === \"error\") {\n                    controller.error(chunk.error);\n                }\n            }\n        });\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.teeStream(), {\n            transform (chunk, controller) {\n                controller.enqueue(chunk);\n            }\n        });\n    }\n    toAIStream(callbacks = {}) {\n        return this.toDataStreamInternal({\n            callbacks\n        });\n    }\n    toDataStreamInternal({ callbacks = {}, getErrorMessage: getErrorMessage3 = ()=>\"\", // mask error messages for safety by default\n    sendUsage = true } = {}) {\n        let aggregatedResponse = \"\";\n        const callbackTransformer = new TransformStream({\n            async start () {\n                if (callbacks.onStart) await callbacks.onStart();\n            },\n            async transform (chunk, controller) {\n                controller.enqueue(chunk);\n                if (chunk.type === \"text-delta\") {\n                    const textDelta = chunk.textDelta;\n                    aggregatedResponse += textDelta;\n                    if (callbacks.onToken) await callbacks.onToken(textDelta);\n                    if (callbacks.onText) await callbacks.onText(textDelta);\n                }\n            },\n            async flush () {\n                if (callbacks.onCompletion) await callbacks.onCompletion(aggregatedResponse);\n                if (callbacks.onFinal) await callbacks.onFinal(aggregatedResponse);\n            }\n        });\n        const streamPartsTransformer = new TransformStream({\n            transform: async (chunk, controller)=>{\n                const chunkType = chunk.type;\n                switch(chunkType){\n                    case \"text-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"text\", chunk.textDelta));\n                            break;\n                        }\n                    case \"tool-call-streaming-start\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"tool_call_streaming_start\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName\n                            }));\n                            break;\n                        }\n                    case \"tool-call-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"tool_call_delta\", {\n                                toolCallId: chunk.toolCallId,\n                                argsTextDelta: chunk.argsTextDelta\n                            }));\n                            break;\n                        }\n                    case \"tool-call\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"tool_call\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                args: chunk.args\n                            }));\n                            break;\n                        }\n                    case \"tool-result\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"tool_result\", {\n                                toolCallId: chunk.toolCallId,\n                                result: chunk.result\n                            }));\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"error\", getErrorMessage3(chunk.error)));\n                            break;\n                        }\n                    case \"step-finish\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"finish_step\", {\n                                finishReason: chunk.finishReason,\n                                usage: sendUsage ? {\n                                    promptTokens: chunk.usage.promptTokens,\n                                    completionTokens: chunk.usage.completionTokens\n                                } : void 0,\n                                isContinued: chunk.isContinued\n                            }));\n                            break;\n                        }\n                    case \"finish\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"finish_message\", {\n                                finishReason: chunk.finishReason,\n                                usage: sendUsage ? {\n                                    promptTokens: chunk.usage.promptTokens,\n                                    completionTokens: chunk.usage.completionTokens\n                                } : void 0\n                            }));\n                            break;\n                        }\n                    default:\n                        {\n                            const exhaustiveCheck = chunkType;\n                            throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                        }\n                }\n            }\n        });\n        return this.fullStream.pipeThrough(callbackTransformer).pipeThrough(streamPartsTransformer).pipeThrough(new TextEncoderStream());\n    }\n    pipeAIStreamToResponse(response, init) {\n        return this.pipeDataStreamToResponse(response, init);\n    }\n    pipeDataStreamToResponse(response, options) {\n        const init = options == null ? void 0 : \"init\" in options ? options.init : {\n            headers: \"headers\" in options ? options.headers : void 0,\n            status: \"status\" in options ? options.status : void 0,\n            statusText: \"statusText\" in options ? options.statusText : void 0\n        };\n        const data = options == null ? void 0 : \"data\" in options ? options.data : void 0;\n        const getErrorMessage3 = options == null ? void 0 : \"getErrorMessage\" in options ? options.getErrorMessage : void 0;\n        const sendUsage = options == null ? void 0 : \"sendUsage\" in options ? options.sendUsage : void 0;\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            }),\n            stream: this.toDataStream({\n                data,\n                getErrorMessage: getErrorMessage3,\n                sendUsage\n            })\n        });\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    toAIStreamResponse(options) {\n        return this.toDataStreamResponse(options);\n    }\n    toDataStream(options) {\n        const stream = this.toDataStreamInternal({\n            getErrorMessage: options == null ? void 0 : options.getErrorMessage,\n            sendUsage: options == null ? void 0 : options.sendUsage\n        });\n        return (options == null ? void 0 : options.data) ? mergeStreams(options == null ? void 0 : options.data.stream, stream) : stream;\n    }\n    toDataStreamResponse(options) {\n        var _a11;\n        const init = options == null ? void 0 : \"init\" in options ? options.init : {\n            headers: \"headers\" in options ? options.headers : void 0,\n            status: \"status\" in options ? options.status : void 0,\n            statusText: \"statusText\" in options ? options.statusText : void 0\n        };\n        const data = options == null ? void 0 : \"data\" in options ? options.data : void 0;\n        const getErrorMessage3 = options == null ? void 0 : \"getErrorMessage\" in options ? options.getErrorMessage : void 0;\n        const sendUsage = options == null ? void 0 : \"sendUsage\" in options ? options.sendUsage : void 0;\n        return new Response(this.toDataStream({\n            data,\n            getErrorMessage: getErrorMessage3,\n            sendUsage\n        }), {\n            status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareResponseHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            })\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a11;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n            headers: prepareResponseHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\nvar experimental_streamText = streamText;\n// core/middleware/wrap-language-model.ts\nvar experimental_wrapLanguageModel = ({ model, middleware: { transformParams, wrapGenerate, wrapStream }, modelId, providerId })=>{\n    async function doTransform({ params, type }) {\n        return transformParams ? await transformParams({\n            params,\n            type\n        }) : params;\n    }\n    return {\n        specificationVersion: \"v1\",\n        provider: providerId != null ? providerId : model.provider,\n        modelId: modelId != null ? modelId : model.modelId,\n        defaultObjectGenerationMode: model.defaultObjectGenerationMode,\n        supportsImageUrls: model.supportsImageUrls,\n        supportsUrl: model.supportsUrl,\n        supportsStructuredOutputs: model.supportsStructuredOutputs,\n        async doGenerate (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"generate\"\n            });\n            const doGenerate = async ()=>model.doGenerate(transformedParams);\n            return wrapGenerate ? wrapGenerate({\n                doGenerate,\n                params: transformedParams,\n                model\n            }) : doGenerate();\n        },\n        async doStream (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"stream\"\n            });\n            const doStream = async ()=>model.doStream(transformedParams);\n            return wrapStream ? wrapStream({\n                doStream,\n                params: transformedParams,\n                model\n            }) : doStream();\n        }\n    };\n};\n// core/registry/custom-provider.ts\n\nfunction experimental_customProvider({ languageModels, textEmbeddingModels, fallbackProvider }) {\n    return {\n        languageModel (modelId) {\n            if (languageModels != null && modelId in languageModels) {\n                return languageModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.languageModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError({\n                modelId,\n                modelType: \"languageModel\"\n            });\n        },\n        textEmbeddingModel (modelId) {\n            if (textEmbeddingModels != null && modelId in textEmbeddingModels) {\n                return textEmbeddingModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.textEmbeddingModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError({\n                modelId,\n                modelType: \"textEmbeddingModel\"\n            });\n        }\n    };\n}\n// core/registry/no-such-provider-error.ts\n\nvar name10 = \"AI_NoSuchProviderError\";\nvar marker10 = `vercel.ai.error.${name10}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoSuchProviderError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError {\n    constructor({ modelId, modelType, providerId, availableProviders, message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})` }){\n        super({\n            errorName: name10,\n            modelId,\n            modelType,\n            message\n        });\n        this[_a10] = true;\n        this.providerId = providerId;\n        this.availableProviders = availableProviders;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.AISDKError.hasMarker(error, marker10);\n    }\n    /**\n   * @deprecated use `isInstance` instead\n   */ static isNoSuchProviderError(error) {\n        return error instanceof Error && error.name === name10 && typeof error.providerId === \"string\" && Array.isArray(error.availableProviders);\n    }\n    /**\n   * @deprecated Do not use this method. It will be removed in the next major version.\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n            modelId: this.modelId,\n            modelType: this.modelType,\n            providerId: this.providerId,\n            availableProviders: this.availableProviders\n        };\n    }\n};\n_a10 = symbol10;\n// core/registry/provider-registry.ts\n\nfunction experimental_createProviderRegistry(providers) {\n    const registry = new DefaultProviderRegistry();\n    for (const [id, provider] of Object.entries(providers)){\n        registry.registerProvider({\n            id,\n            provider\n        });\n    }\n    return registry;\n}\nvar experimental_createModelRegistry = experimental_createProviderRegistry;\nvar DefaultProviderRegistry = class {\n    constructor(){\n        this.providers = {};\n    }\n    registerProvider({ id, provider }) {\n        this.providers[id] = provider;\n    }\n    getProvider(id) {\n        const provider = this.providers[id];\n        if (provider == null) {\n            throw new NoSuchProviderError({\n                modelId: id,\n                modelType: \"languageModel\",\n                providerId: id,\n                availableProviders: Object.keys(this.providers)\n            });\n        }\n        return provider;\n    }\n    splitId(id, modelType) {\n        const index = id.indexOf(\":\");\n        if (index === -1) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError({\n                modelId: id,\n                modelType,\n                message: `Invalid ${modelType} id for registry: ${id} (must be in the format \"providerId:modelId\")`\n            });\n        }\n        return [\n            id.slice(0, index),\n            id.slice(index + 1)\n        ];\n    }\n    languageModel(id) {\n        var _a11, _b;\n        const [providerId, modelId] = this.splitId(id, \"languageModel\");\n        const model = (_b = (_a11 = this.getProvider(providerId)).languageModel) == null ? void 0 : _b.call(_a11, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError({\n                modelId: id,\n                modelType: \"languageModel\"\n            });\n        }\n        return model;\n    }\n    textEmbeddingModel(id) {\n        var _a11, _b, _c;\n        const [providerId, modelId] = this.splitId(id, \"textEmbeddingModel\");\n        const provider = this.getProvider(providerId);\n        const model = (_c = (_a11 = provider.textEmbeddingModel) == null ? void 0 : _a11.call(provider, modelId)) != null ? _c : \"textEmbedding\" in provider ? (_b = provider.textEmbedding) == null ? void 0 : _b.call(provider, modelId) : void 0;\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.NoSuchModelError({\n                modelId: id,\n                modelType: \"textEmbeddingModel\"\n            });\n        }\n        return model;\n    }\n    /**\n   * @deprecated Use `textEmbeddingModel` instead.\n   */ textEmbedding(id) {\n        return this.textEmbeddingModel(id);\n    }\n};\n// core/tool/tool.ts\nfunction tool(tool2) {\n    return tool2;\n}\n// core/util/cosine-similarity.ts\nfunction cosineSimilarity(vector1, vector2) {\n    if (vector1.length !== vector2.length) {\n        throw new Error(`Vectors must have the same length (vector1: ${vector1.length} elements, vector2: ${vector2.length} elements)`);\n    }\n    return dotProduct(vector1, vector2) / (magnitude(vector1) * magnitude(vector2));\n}\nfunction dotProduct(vector1, vector2) {\n    return vector1.reduce((accumulator, value, index)=>accumulator + value * vector2[index], 0);\n}\nfunction magnitude(vector) {\n    return Math.sqrt(dotProduct(vector, vector));\n}\n// streams/ai-stream.ts\n\nfunction createEventStreamTransformer(customParser) {\n    const textDecoder = new TextDecoder();\n    let eventSourceParser;\n    return new TransformStream({\n        async start (controller) {\n            eventSourceParser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_5__.createParser)((event)=>{\n                if (\"data\" in event && event.type === \"event\" && event.data === \"[DONE]\" || // Replicate doesn't send [DONE] but does send a 'done' event\n                // @see https://replicate.com/docs/streaming\n                event.event === \"done\") {\n                    controller.terminate();\n                    return;\n                }\n                if (\"data\" in event) {\n                    const parsedMessage = customParser ? customParser(event.data, {\n                        event: event.event\n                    }) : event.data;\n                    if (parsedMessage) controller.enqueue(parsedMessage);\n                }\n            });\n        },\n        transform (chunk) {\n            eventSourceParser.feed(textDecoder.decode(chunk));\n        }\n    });\n}\nfunction createCallbacksTransformer(cb) {\n    const textEncoder = new TextEncoder();\n    let aggregatedResponse = \"\";\n    const callbacks = cb || {};\n    return new TransformStream({\n        async start () {\n            if (callbacks.onStart) await callbacks.onStart();\n        },\n        async transform (message, controller) {\n            const content = typeof message === \"string\" ? message : message.content;\n            controller.enqueue(textEncoder.encode(content));\n            aggregatedResponse += content;\n            if (callbacks.onToken) await callbacks.onToken(content);\n            if (callbacks.onText && typeof message === \"string\") {\n                await callbacks.onText(message);\n            }\n        },\n        async flush () {\n            const isOpenAICallbacks = isOfTypeOpenAIStreamCallbacks(callbacks);\n            if (callbacks.onCompletion) {\n                await callbacks.onCompletion(aggregatedResponse);\n            }\n            if (callbacks.onFinal && !isOpenAICallbacks) {\n                await callbacks.onFinal(aggregatedResponse);\n            }\n        }\n    });\n}\nfunction isOfTypeOpenAIStreamCallbacks(callbacks) {\n    return \"experimental_onFunctionCall\" in callbacks;\n}\nfunction trimStartOfStreamHelper() {\n    let isStreamStart = true;\n    return (text)=>{\n        if (isStreamStart) {\n            text = text.trimStart();\n            if (text) isStreamStart = false;\n        }\n        return text;\n    };\n}\nfunction AIStream(response, customParser, callbacks) {\n    if (!response.ok) {\n        if (response.body) {\n            const reader = response.body.getReader();\n            return new ReadableStream({\n                async start (controller) {\n                    const { done, value } = await reader.read();\n                    if (!done) {\n                        const errorText = new TextDecoder().decode(value);\n                        controller.error(new Error(`Response error: ${errorText}`));\n                    }\n                }\n            });\n        } else {\n            return new ReadableStream({\n                start (controller) {\n                    controller.error(new Error(\"Response error: No response body\"));\n                }\n            });\n        }\n    }\n    const responseBodyStream = response.body || createEmptyReadableStream();\n    return responseBodyStream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));\n}\nfunction createEmptyReadableStream() {\n    return new ReadableStream({\n        start (controller) {\n            controller.close();\n        }\n    });\n}\nfunction readableFromAsyncIterable(iterable) {\n    let it = iterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull (controller) {\n            const { done, value } = await it.next();\n            if (done) controller.close();\n            else controller.enqueue(value);\n        },\n        async cancel (reason) {\n            var _a11;\n            await ((_a11 = it.return) == null ? void 0 : _a11.call(it, reason));\n        }\n    });\n}\n// streams/stream-data.ts\n\n// util/constants.ts\nvar HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;\n// streams/stream-data.ts\nvar StreamData2 = class {\n    constructor(){\n        this.encoder = new TextEncoder();\n        this.controller = null;\n        this.isClosed = false;\n        this.warningTimeout = null;\n        const self = this;\n        this.stream = new ReadableStream({\n            start: async (controller)=>{\n                self.controller = controller;\n                if (true) {\n                    self.warningTimeout = setTimeout(()=>{\n                        console.warn(\"The data stream is hanging. Did you forget to close it with `data.close()`?\");\n                    }, HANGING_STREAM_WARNING_TIME_MS);\n                }\n            },\n            pull: (controller)=>{},\n            cancel: (reason)=>{\n                this.isClosed = true;\n            }\n        });\n    }\n    async close() {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.close();\n        this.isClosed = true;\n        if (this.warningTimeout) {\n            clearTimeout(this.warningTimeout);\n        }\n    }\n    append(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"data\", [\n            value\n        ])));\n    }\n    appendMessageAnnotation(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"message_annotations\", [\n            value\n        ])));\n    }\n};\nfunction createStreamDataTransformer() {\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    return new TransformStream({\n        transform: async (chunk, controller)=>{\n            const message = decoder.decode(chunk);\n            controller.enqueue(encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"text\", message)));\n        }\n    });\n}\nvar experimental_StreamData = class extends StreamData2 {\n};\n// streams/anthropic-stream.ts\nfunction parseAnthropicStream() {\n    let previous = \"\";\n    return (data)=>{\n        const json = JSON.parse(data);\n        if (\"error\" in json) {\n            throw new Error(`${json.error.type}: ${json.error.message}`);\n        }\n        if (!(\"completion\" in json)) {\n            return;\n        }\n        const text = json.completion;\n        if (!previous || text.length > previous.length && text.startsWith(previous)) {\n            const delta = text.slice(previous.length);\n            previous = text;\n            return delta;\n        }\n        return text;\n    };\n}\nasync function* streamable(stream) {\n    for await (const chunk of stream){\n        if (\"completion\" in chunk) {\n            const text = chunk.completion;\n            if (text) yield text;\n        } else if (\"delta\" in chunk) {\n            const { delta } = chunk;\n            if (\"text\" in delta) {\n                const text = delta.text;\n                if (text) yield text;\n            }\n        }\n    }\n}\nfunction AnthropicStream(res, cb) {\n    if (Symbol.asyncIterator in res) {\n        return readableFromAsyncIterable(streamable(res)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer());\n    } else {\n        return AIStream(res, parseAnthropicStream(), cb).pipeThrough(createStreamDataTransformer());\n    }\n}\n// streams/assistant-response.ts\n\nfunction AssistantResponse({ threadId, messageId }, process2) {\n    const stream = new ReadableStream({\n        async start (controller) {\n            var _a11;\n            const textEncoder = new TextEncoder();\n            const sendMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"assistant_message\", message)));\n            };\n            const sendDataMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"data_message\", message)));\n            };\n            const sendError = (errorMessage)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"error\", errorMessage)));\n            };\n            const forwardStream = async (stream2)=>{\n                var _a12, _b;\n                let result = void 0;\n                for await (const value of stream2){\n                    switch(value.event){\n                        case \"thread.message.created\":\n                            {\n                                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"assistant_message\", {\n                                    id: value.data.id,\n                                    role: \"assistant\",\n                                    content: [\n                                        {\n                                            type: \"text\",\n                                            text: {\n                                                value: \"\"\n                                            }\n                                        }\n                                    ]\n                                })));\n                                break;\n                            }\n                        case \"thread.message.delta\":\n                            {\n                                const content = (_a12 = value.data.delta.content) == null ? void 0 : _a12[0];\n                                if ((content == null ? void 0 : content.type) === \"text\" && ((_b = content.text) == null ? void 0 : _b.value) != null) {\n                                    controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"text\", content.text.value)));\n                                }\n                                break;\n                            }\n                        case \"thread.run.completed\":\n                        case \"thread.run.requires_action\":\n                            {\n                                result = value.data;\n                                break;\n                            }\n                    }\n                }\n                return result;\n            };\n            controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"assistant_control_data\", {\n                threadId,\n                messageId\n            })));\n            try {\n                await process2({\n                    threadId,\n                    messageId,\n                    sendMessage,\n                    sendDataMessage,\n                    forwardStream\n                });\n            } catch (error) {\n                sendError((_a11 = error.message) != null ? _a11 : `${error}`);\n            } finally{\n                controller.close();\n            }\n        },\n        pull (controller) {},\n        cancel () {}\n    });\n    return new Response(stream, {\n        status: 200,\n        headers: {\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n        }\n    });\n}\nvar experimental_AssistantResponse = AssistantResponse;\n// streams/aws-bedrock-stream.ts\nasync function* asDeltaIterable(response, extractTextDeltaFromChunk) {\n    var _a11, _b;\n    const decoder = new TextDecoder();\n    for await (const chunk of (_a11 = response.body) != null ? _a11 : []){\n        const bytes = (_b = chunk.chunk) == null ? void 0 : _b.bytes;\n        if (bytes != null) {\n            const chunkText = decoder.decode(bytes);\n            const chunkJSON = JSON.parse(chunkText);\n            const delta = extractTextDeltaFromChunk(chunkJSON);\n            if (delta != null) {\n                yield delta;\n            }\n        }\n    }\n}\nfunction AWSBedrockAnthropicMessagesStream(response, callbacks) {\n    return AWSBedrockStream(response, callbacks, (chunk)=>{\n        var _a11;\n        return (_a11 = chunk.delta) == null ? void 0 : _a11.text;\n    });\n}\nfunction AWSBedrockAnthropicStream(response, callbacks) {\n    return AWSBedrockStream(response, callbacks, (chunk)=>chunk.completion);\n}\nfunction AWSBedrockCohereStream(response, callbacks) {\n    return AWSBedrockStream(response, callbacks, (chunk)=>chunk == null ? void 0 : chunk.text);\n}\nfunction AWSBedrockLlama2Stream(response, callbacks) {\n    return AWSBedrockStream(response, callbacks, (chunk)=>chunk.generation);\n}\nfunction AWSBedrockStream(response, callbacks, extractTextDeltaFromChunk) {\n    return readableFromAsyncIterable(asDeltaIterable(response, extractTextDeltaFromChunk)).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n// streams/cohere-stream.ts\nvar utf8Decoder = new TextDecoder(\"utf-8\");\nasync function processLines(lines, controller) {\n    for (const line of lines){\n        const { text, is_finished } = JSON.parse(line);\n        if (!is_finished) {\n            controller.enqueue(text);\n        }\n    }\n}\nasync function readAndProcessLines(reader, controller) {\n    let segment = \"\";\n    while(true){\n        const { value: chunk, done } = await reader.read();\n        if (done) {\n            break;\n        }\n        segment += utf8Decoder.decode(chunk, {\n            stream: true\n        });\n        const linesArray = segment.split(/\\r\\n|\\n|\\r/g);\n        segment = linesArray.pop() || \"\";\n        await processLines(linesArray, controller);\n    }\n    if (segment) {\n        const linesArray = [\n            segment\n        ];\n        await processLines(linesArray, controller);\n    }\n    controller.close();\n}\nfunction createParser2(res) {\n    var _a11;\n    const reader = (_a11 = res.body) == null ? void 0 : _a11.getReader();\n    return new ReadableStream({\n        async start (controller) {\n            if (!reader) {\n                controller.close();\n                return;\n            }\n            await readAndProcessLines(reader, controller);\n        }\n    });\n}\nasync function* streamable2(stream) {\n    for await (const chunk of stream){\n        if (chunk.eventType === \"text-generation\") {\n            const text = chunk.text;\n            if (text) yield text;\n        }\n    }\n}\nfunction CohereStream(reader, callbacks) {\n    if (Symbol.asyncIterator in reader) {\n        return readableFromAsyncIterable(streamable2(reader)).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n    } else {\n        return createParser2(reader).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n    }\n}\n// streams/google-generative-ai-stream.ts\nasync function* streamable3(response) {\n    var _a11, _b, _c;\n    for await (const chunk of response.stream){\n        const parts = (_c = (_b = (_a11 = chunk.candidates) == null ? void 0 : _a11[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts;\n        if (parts === void 0) {\n            continue;\n        }\n        const firstPart = parts[0];\n        if (typeof firstPart.text === \"string\") {\n            yield firstPart.text;\n        }\n    }\n}\nfunction GoogleGenerativeAIStream(response, cb) {\n    return readableFromAsyncIterable(streamable3(response)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer());\n}\n// streams/huggingface-stream.ts\nfunction createParser3(res) {\n    const trimStartOfStream = trimStartOfStreamHelper();\n    return new ReadableStream({\n        async pull (controller) {\n            var _a11, _b;\n            const { value, done } = await res.next();\n            if (done) {\n                controller.close();\n                return;\n            }\n            const text = trimStartOfStream((_b = (_a11 = value.token) == null ? void 0 : _a11.text) != null ? _b : \"\");\n            if (!text) return;\n            if (value.generated_text != null && value.generated_text.length > 0) {\n                return;\n            }\n            if (text === \"</s>\" || text === \"<|endoftext|>\" || text === \"<|end|>\") {\n                return;\n            }\n            controller.enqueue(text);\n        }\n    });\n}\nfunction HuggingFaceStream(res, callbacks) {\n    return createParser3(res).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n// streams/inkeep-stream.ts\nfunction InkeepStream(res, callbacks) {\n    if (!res.body) {\n        throw new Error(\"Response body is null\");\n    }\n    let chat_session_id = \"\";\n    let records_cited;\n    const inkeepEventParser = (data, options)=>{\n        var _a11, _b;\n        const { event } = options;\n        if (event === \"records_cited\") {\n            records_cited = JSON.parse(data);\n            (_a11 = callbacks == null ? void 0 : callbacks.onRecordsCited) == null ? void 0 : _a11.call(callbacks, records_cited);\n        }\n        if (event === \"message_chunk\") {\n            const inkeepMessageChunk = JSON.parse(data);\n            chat_session_id = (_b = inkeepMessageChunk.chat_session_id) != null ? _b : chat_session_id;\n            return inkeepMessageChunk.content_chunk;\n        }\n        return;\n    };\n    let { onRecordsCited, ...passThroughCallbacks } = callbacks || {};\n    passThroughCallbacks = {\n        ...passThroughCallbacks,\n        onFinal: (completion)=>{\n            var _a11;\n            const inkeepOnFinalMetadata = {\n                chat_session_id,\n                records_cited\n            };\n            (_a11 = callbacks == null ? void 0 : callbacks.onFinal) == null ? void 0 : _a11.call(callbacks, completion, inkeepOnFinalMetadata);\n        }\n    };\n    return AIStream(res, inkeepEventParser, passThroughCallbacks).pipeThrough(createStreamDataTransformer());\n}\n// streams/langchain-adapter.ts\nvar langchain_adapter_exports = {};\n__export(langchain_adapter_exports, {\n    toAIStream: ()=>toAIStream,\n    toDataStream: ()=>toDataStream,\n    toDataStreamResponse: ()=>toDataStreamResponse\n});\nfunction toAIStream(stream, callbacks) {\n    return toDataStream(stream, callbacks);\n}\nfunction toDataStream(stream, callbacks) {\n    return stream.pipeThrough(new TransformStream({\n        transform: async (value, controller)=>{\n            var _a11;\n            if (typeof value === \"string\") {\n                controller.enqueue(value);\n                return;\n            }\n            if (\"event\" in value) {\n                if (value.event === \"on_chat_model_stream\") {\n                    forwardAIMessageChunk((_a11 = value.data) == null ? void 0 : _a11.chunk, controller);\n                }\n                return;\n            }\n            forwardAIMessageChunk(value, controller);\n        }\n    })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\nfunction toDataStreamResponse(stream, options) {\n    var _a11;\n    const dataStream = toDataStream(stream, options == null ? void 0 : options.callbacks);\n    const data = options == null ? void 0 : options.data;\n    const init = options == null ? void 0 : options.init;\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction forwardAIMessageChunk(chunk, controller) {\n    if (typeof chunk.content === \"string\") {\n        controller.enqueue(chunk.content);\n    } else {\n        const content = chunk.content;\n        for (const item of content){\n            if (item.type === \"text\") {\n                controller.enqueue(item.text);\n            }\n        }\n    }\n}\n// streams/llamaindex-adapter.ts\nvar llamaindex_adapter_exports = {};\n__export(llamaindex_adapter_exports, {\n    toDataStream: ()=>toDataStream2,\n    toDataStreamResponse: ()=>toDataStreamResponse2\n});\nfunction toDataStream2(stream, callbacks) {\n    return toReadableStream(stream).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\nfunction toDataStreamResponse2(stream, options = {}) {\n    var _a11;\n    const { init, data, callbacks } = options;\n    const dataStream = toDataStream2(stream, callbacks);\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction toReadableStream(res) {\n    const it = res[Symbol.asyncIterator]();\n    const trimStartOfStream = trimStartOfStreamHelper();\n    return new ReadableStream({\n        async pull (controller) {\n            var _a11;\n            const { value, done } = await it.next();\n            if (done) {\n                controller.close();\n                return;\n            }\n            const text = trimStartOfStream((_a11 = value.delta) != null ? _a11 : \"\");\n            if (text) {\n                controller.enqueue(text);\n            }\n        }\n    });\n}\n// streams/langchain-stream.ts\nfunction LangChainStream(callbacks) {\n    const stream = new TransformStream();\n    const writer = stream.writable.getWriter();\n    const runs = /* @__PURE__ */ new Set();\n    const handleError = async (e, runId)=>{\n        runs.delete(runId);\n        await writer.ready;\n        await writer.abort(e);\n    };\n    const handleStart = async (runId)=>{\n        runs.add(runId);\n    };\n    const handleEnd = async (runId)=>{\n        runs.delete(runId);\n        if (runs.size === 0) {\n            await writer.ready;\n            await writer.close();\n        }\n    };\n    return {\n        stream: stream.readable.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer()),\n        writer,\n        handlers: {\n            handleLLMNewToken: async (token)=>{\n                await writer.ready;\n                await writer.write(token);\n            },\n            handleLLMStart: async (_llm, _prompts, runId)=>{\n                handleStart(runId);\n            },\n            handleLLMEnd: async (_output, runId)=>{\n                await handleEnd(runId);\n            },\n            handleLLMError: async (e, runId)=>{\n                await handleError(e, runId);\n            },\n            handleChainStart: async (_chain, _inputs, runId)=>{\n                handleStart(runId);\n            },\n            handleChainEnd: async (_outputs, runId)=>{\n                await handleEnd(runId);\n            },\n            handleChainError: async (e, runId)=>{\n                await handleError(e, runId);\n            },\n            handleToolStart: async (_tool, _input, runId)=>{\n                handleStart(runId);\n            },\n            handleToolEnd: async (_output, runId)=>{\n                await handleEnd(runId);\n            },\n            handleToolError: async (e, runId)=>{\n                await handleError(e, runId);\n            }\n        }\n    };\n}\n// streams/mistral-stream.ts\nasync function* streamable4(stream) {\n    var _a11, _b;\n    for await (const chunk of stream){\n        const content = (_b = (_a11 = chunk.choices[0]) == null ? void 0 : _a11.delta) == null ? void 0 : _b.content;\n        if (content === void 0 || content === \"\") {\n            continue;\n        }\n        yield content;\n    }\n}\nfunction MistralStream(response, callbacks) {\n    const stream = readableFromAsyncIterable(streamable4(response));\n    return stream.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n// streams/openai-stream.ts\n\nfunction parseOpenAIStream() {\n    const extract = chunkToText();\n    return (data)=>extract(JSON.parse(data));\n}\nasync function* streamable5(stream) {\n    const extract = chunkToText();\n    for await (let chunk of stream){\n        if (\"promptFilterResults\" in chunk) {\n            chunk = {\n                id: chunk.id,\n                created: chunk.created.getDate(),\n                object: chunk.object,\n                // not exposed by Azure API\n                model: chunk.model,\n                // not exposed by Azure API\n                choices: chunk.choices.map((choice)=>{\n                    var _a11, _b, _c, _d, _e, _f, _g;\n                    return {\n                        delta: {\n                            content: (_a11 = choice.delta) == null ? void 0 : _a11.content,\n                            function_call: (_b = choice.delta) == null ? void 0 : _b.functionCall,\n                            role: (_c = choice.delta) == null ? void 0 : _c.role,\n                            tool_calls: ((_e = (_d = choice.delta) == null ? void 0 : _d.toolCalls) == null ? void 0 : _e.length) ? (_g = (_f = choice.delta) == null ? void 0 : _f.toolCalls) == null ? void 0 : _g.map((toolCall, index)=>({\n                                    index,\n                                    id: toolCall.id,\n                                    function: toolCall.function,\n                                    type: toolCall.type\n                                })) : void 0\n                        },\n                        finish_reason: choice.finishReason,\n                        index: choice.index\n                    };\n                })\n            };\n        }\n        const text = extract(chunk);\n        if (text) yield text;\n    }\n}\nfunction chunkToText() {\n    const trimStartOfStream = trimStartOfStreamHelper();\n    let isFunctionStreamingIn;\n    return (json)=>{\n        var _a11, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;\n        if (isChatCompletionChunk(json)) {\n            const delta = (_a11 = json.choices[0]) == null ? void 0 : _a11.delta;\n            if ((_b = delta.function_call) == null ? void 0 : _b.name) {\n                isFunctionStreamingIn = true;\n                return {\n                    isText: false,\n                    content: `{\"function_call\": {\"name\": \"${delta.function_call.name}\", \"arguments\": \"`\n                };\n            } else if ((_e = (_d = (_c = delta.tool_calls) == null ? void 0 : _c[0]) == null ? void 0 : _d.function) == null ? void 0 : _e.name) {\n                isFunctionStreamingIn = true;\n                const toolCall = delta.tool_calls[0];\n                if (toolCall.index === 0) {\n                    return {\n                        isText: false,\n                        content: `{\"tool_calls\":[ {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_f = toolCall.function) == null ? void 0 : _f.name}\", \"arguments\": \"`\n                    };\n                } else {\n                    return {\n                        isText: false,\n                        content: `\"}}, {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_g = toolCall.function) == null ? void 0 : _g.name}\", \"arguments\": \"`\n                    };\n                }\n            } else if ((_h = delta.function_call) == null ? void 0 : _h.arguments) {\n                return {\n                    isText: false,\n                    content: cleanupArguments((_i = delta.function_call) == null ? void 0 : _i.arguments)\n                };\n            } else if ((_l = (_k = (_j = delta.tool_calls) == null ? void 0 : _j[0]) == null ? void 0 : _k.function) == null ? void 0 : _l.arguments) {\n                return {\n                    isText: false,\n                    content: cleanupArguments((_o = (_n = (_m = delta.tool_calls) == null ? void 0 : _m[0]) == null ? void 0 : _n.function) == null ? void 0 : _o.arguments)\n                };\n            } else if (isFunctionStreamingIn && (((_p = json.choices[0]) == null ? void 0 : _p.finish_reason) === \"function_call\" || ((_q = json.choices[0]) == null ? void 0 : _q.finish_reason) === \"stop\")) {\n                isFunctionStreamingIn = false;\n                return {\n                    isText: false,\n                    content: '\"}}'\n                };\n            } else if (isFunctionStreamingIn && ((_r = json.choices[0]) == null ? void 0 : _r.finish_reason) === \"tool_calls\") {\n                isFunctionStreamingIn = false;\n                return {\n                    isText: false,\n                    content: '\"}}]}'\n                };\n            }\n        }\n        const text = trimStartOfStream(isChatCompletionChunk(json) && json.choices[0].delta.content ? json.choices[0].delta.content : isCompletion(json) ? json.choices[0].text : \"\");\n        return text;\n    };\n    function cleanupArguments(argumentChunk) {\n        let escapedPartialJson = argumentChunk.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\").replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\").replace(/\\f/g, \"\\\\f\");\n        return `${escapedPartialJson}`;\n    }\n}\nvar __internal__OpenAIFnMessagesSymbol = Symbol(\"internal_openai_fn_messages\");\nfunction isChatCompletionChunk(data) {\n    return \"choices\" in data && data.choices && data.choices[0] && \"delta\" in data.choices[0];\n}\nfunction isCompletion(data) {\n    return \"choices\" in data && data.choices && data.choices[0] && \"text\" in data.choices[0];\n}\nfunction OpenAIStream(res, callbacks) {\n    const cb = callbacks;\n    let stream;\n    if (Symbol.asyncIterator in res) {\n        stream = readableFromAsyncIterable(streamable5(res)).pipeThrough(createCallbacksTransformer((cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n            ...cb,\n            onFinal: void 0\n        } : {\n            ...cb\n        }));\n    } else {\n        stream = AIStream(res, parseOpenAIStream(), (cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n            ...cb,\n            onFinal: void 0\n        } : {\n            ...cb\n        });\n    }\n    if (cb && (cb.experimental_onFunctionCall || cb.experimental_onToolCall)) {\n        const functionCallTransformer = createFunctionCallTransformer(cb);\n        return stream.pipeThrough(functionCallTransformer);\n    } else {\n        return stream.pipeThrough(createStreamDataTransformer());\n    }\n}\nfunction createFunctionCallTransformer(callbacks) {\n    const textEncoder = new TextEncoder();\n    let isFirstChunk = true;\n    let aggregatedResponse = \"\";\n    let aggregatedFinalCompletionResponse = \"\";\n    let isFunctionStreamingIn = false;\n    let functionCallMessages = callbacks[__internal__OpenAIFnMessagesSymbol] || [];\n    const decode = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.createChunkDecoder)();\n    return new TransformStream({\n        async transform (chunk, controller) {\n            const message = decode(chunk);\n            aggregatedFinalCompletionResponse += message;\n            const shouldHandleAsFunction = isFirstChunk && (message.startsWith('{\"function_call\":') || message.startsWith('{\"tool_calls\":'));\n            if (shouldHandleAsFunction) {\n                isFunctionStreamingIn = true;\n                aggregatedResponse += message;\n                isFirstChunk = false;\n                return;\n            }\n            if (!isFunctionStreamingIn) {\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"text\", message)));\n                return;\n            } else {\n                aggregatedResponse += message;\n            }\n        },\n        async flush (controller) {\n            try {\n                if (!isFirstChunk && isFunctionStreamingIn && (callbacks.experimental_onFunctionCall || callbacks.experimental_onToolCall)) {\n                    isFunctionStreamingIn = false;\n                    const payload = JSON.parse(aggregatedResponse);\n                    let newFunctionCallMessages = [\n                        ...functionCallMessages\n                    ];\n                    let functionResponse = void 0;\n                    if (callbacks.experimental_onFunctionCall) {\n                        if (payload.function_call === void 0) {\n                            console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                        }\n                        const argumentsPayload = JSON.parse(payload.function_call.arguments);\n                        functionResponse = await callbacks.experimental_onFunctionCall({\n                            name: payload.function_call.name,\n                            arguments: argumentsPayload\n                        }, (result)=>{\n                            newFunctionCallMessages = [\n                                ...functionCallMessages,\n                                {\n                                    role: \"assistant\",\n                                    content: \"\",\n                                    function_call: payload.function_call\n                                },\n                                {\n                                    role: \"function\",\n                                    name: payload.function_call.name,\n                                    content: JSON.stringify(result)\n                                }\n                            ];\n                            return newFunctionCallMessages;\n                        });\n                    }\n                    if (callbacks.experimental_onToolCall) {\n                        const toolCalls = {\n                            tools: []\n                        };\n                        for (const tool2 of payload.tool_calls){\n                            toolCalls.tools.push({\n                                id: tool2.id,\n                                type: \"function\",\n                                func: {\n                                    name: tool2.function.name,\n                                    arguments: JSON.parse(tool2.function.arguments)\n                                }\n                            });\n                        }\n                        let responseIndex = 0;\n                        try {\n                            functionResponse = await callbacks.experimental_onToolCall(toolCalls, (result)=>{\n                                if (result) {\n                                    const { tool_call_id, function_name, tool_call_result } = result;\n                                    newFunctionCallMessages = [\n                                        ...newFunctionCallMessages,\n                                        // Only append the assistant message if it's the first response\n                                        ...responseIndex === 0 ? [\n                                            {\n                                                role: \"assistant\",\n                                                content: \"\",\n                                                tool_calls: payload.tool_calls.map((tc)=>({\n                                                        id: tc.id,\n                                                        type: \"function\",\n                                                        function: {\n                                                            name: tc.function.name,\n                                                            // we send the arguments an object to the user, but as the API expects a string, we need to stringify it\n                                                            arguments: JSON.stringify(tc.function.arguments)\n                                                        }\n                                                    }))\n                                            }\n                                        ] : [],\n                                        // Append the function call result message\n                                        {\n                                            role: \"tool\",\n                                            tool_call_id,\n                                            name: function_name,\n                                            content: JSON.stringify(tool_call_result)\n                                        }\n                                    ];\n                                    responseIndex++;\n                                }\n                                return newFunctionCallMessages;\n                            });\n                        } catch (e) {\n                            console.error(\"Error calling experimental_onToolCall:\", e);\n                        }\n                    }\n                    if (!functionResponse) {\n                        controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(payload.function_call ? \"function_call\" : \"tool_calls\", // parse to prevent double-encoding:\n                        JSON.parse(aggregatedResponse))));\n                        return;\n                    } else if (typeof functionResponse === \"string\") {\n                        controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_4__.formatStreamPart)(\"text\", functionResponse)));\n                        aggregatedFinalCompletionResponse = functionResponse;\n                        return;\n                    }\n                    const filteredCallbacks = {\n                        ...callbacks,\n                        onStart: void 0\n                    };\n                    callbacks.onFinal = void 0;\n                    const openAIStream = OpenAIStream(functionResponse, {\n                        ...filteredCallbacks,\n                        [__internal__OpenAIFnMessagesSymbol]: newFunctionCallMessages\n                    });\n                    const reader = openAIStream.getReader();\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            break;\n                        }\n                        controller.enqueue(value);\n                    }\n                }\n            } finally{\n                if (callbacks.onFinal && aggregatedFinalCompletionResponse) {\n                    await callbacks.onFinal(aggregatedFinalCompletionResponse);\n                }\n            }\n        }\n    });\n}\n// streams/replicate-stream.ts\nasync function ReplicateStream(res, cb, options) {\n    var _a11;\n    const url = (_a11 = res.urls) == null ? void 0 : _a11.stream;\n    if (!url) {\n        if (res.error) throw new Error(res.error);\n        else throw new Error(\"Missing stream URL in Replicate response\");\n    }\n    const eventStream = await fetch(url, {\n        method: \"GET\",\n        headers: {\n            Accept: \"text/event-stream\",\n            ...options == null ? void 0 : options.headers\n        }\n    });\n    return AIStream(eventStream, void 0, cb).pipeThrough(createStreamDataTransformer());\n}\n// streams/stream-to-response.ts\nfunction streamToResponse(res, response, init, data) {\n    var _a11;\n    response.writeHead((_a11 = init == null ? void 0 : init.status) != null ? _a11 : 200, {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n        ...init == null ? void 0 : init.headers\n    });\n    let processedStream = res;\n    if (data) {\n        processedStream = mergeStreams(data.stream, res);\n    }\n    const reader = processedStream.getReader();\n    function read() {\n        reader.read().then(({ done, value })=>{\n            if (done) {\n                response.end();\n                return;\n            }\n            response.write(value);\n            read();\n        });\n    }\n    read();\n}\n// streams/streaming-text-response.ts\nvar StreamingTextResponse = class extends Response {\n    constructor(res, init, data){\n        let processedStream = res;\n        if (data) {\n            processedStream = mergeStreams(data.stream, res);\n        }\n        super(processedStream, {\n            ...init,\n            status: 200,\n            headers: prepareResponseHeaders(init, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\n// streams/index.ts\nvar generateId2 = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\nvar nanoid = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/dist/index.mjs\n");

/***/ })

};
;